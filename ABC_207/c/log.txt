
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(vim)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(vim)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(vim)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(vim)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(vim)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(vim)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(vim)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(vim)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(vim)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(vim)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
sourcing "/opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/ftplugin.vim"
finished sourcing /opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/ftplugin.vim
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
sourcing "/opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/indent.vim"
finished sourcing /opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/indent.vim
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.config/nvim)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
sourcing "/Users/tomoya_tanaka/.config/nvim/init.vim"
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.config/nvim/settings/init)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 1: sourcing "/Users/tomoya_tanaka/.config/nvim/settings/init/dein.vim"
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/repos/github.com/Shougo/dein.vim/autoload)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 17: sourcing "/Users/tomoya_tanaka/.cache/dein/repos/github.com/Shougo/dein.vim/autoload/dein.vim"
finished sourcing /Users/tomoya_tanaka/.cache/dein/repos/github.com/Shougo/dein.vim/autoload/dein.vim
continuing in /Users/tomoya_tanaka/dotfiles/.config/nvim/settings/init/dein.vim
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/repos/github.com/Shougo/dein.vim/autoload/dein)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 1: sourcing "/Users/tomoya_tanaka/.cache/dein/repos/github.com/Shougo/dein.vim/autoload/dein/min.vim"
finished sourcing /Users/tomoya_tanaka/.cache/dein/repos/github.com/Shougo/dein.vim/autoload/dein/min.vim
continuing in dein#load_state
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 13: sourcing "/Users/tomoya_tanaka/.cache/dein/state_nvim.vim"
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 10: sourcing "/opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/ftoff.vim"
Error detected while processing /Users/tomoya_tanaka/dotfiles/.config/nvim/init.vim[1]../Users/tomoya_tanaka/dotfiles/.config/nvim/settings/init/dein.vim[17]..function dein#load_state[1]..dein#min#load_state[13]..script /Users/tomoya_tanaka/.cache/dein/state_nvim.vim[10]../opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/ftoff.vim:
line   11:
E216: No such group or event: filetypedetect *
finished sourcing /opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/ftoff.vim
continuing in /Users/tomoya_tanaka/.cache/dein/state_nvim.vim
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 13: sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/lexima.vim"
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/vital)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 4: sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/vital/lexima.vim"
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/vital/lexima.vim
continuing in /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/lexima.vim
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/repos/github.com/Shougo/dein.vim/autoload/dein)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 0: sourcing "/Users/tomoya_tanaka/.cache/dein/repos/github.com/Shougo/dein.vim/autoload/dein/autoload.vim"
finished sourcing /Users/tomoya_tanaka/.cache/dein/repos/github.com/Shougo/dein.vim/autoload/dein/autoload.vim
continuing in FuncUndefined Autocommands for "*"
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/vital/_lexima/Data)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 3: sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/vital/_lexima/Data/List.vim"
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/vital/_lexima/Data/List.vim
continuing in <SNR>11__get_module
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/vital)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 1: sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/vital/_lexima.vim"
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/vital/_lexima.vim
continuing in vital#_lexima#Data#List#import
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/vital/_lexima/Data)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 3: sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/vital/_lexima/Data/String.vim"
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/vital/_lexima/Data/String.vim
continuing in <SNR>11__get_module
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/vital/_lexima/Vim)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 3: sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/vital/_lexima/Vim/Buffer.vim"
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/vital/_lexima/Vim/Buffer.vim
continuing in <SNR>11__get_module
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/vital/_lexima/Vim)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 3: sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/vital/_lexima/Vim/Guard.vim"
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/vital/_lexima/Vim/Guard.vim
continuing in <SNR>11__get_module
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/vital/_lexima)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 3: sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/vital/_lexima/Prelude.vim"
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/vital/_lexima/Prelude.vim
continuing in <SNR>11__get_module
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/vital/_lexima/Data)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 3: sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/vital/_lexima/Data/Dict.vim"
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/vital/_lexima/Data/Dict.vim
continuing in <SNR>11__get_module
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/vital/_lexima/Vim)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 3: sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/vital/_lexima/Vim/Type.vim"
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/vital/_lexima/Vim/Type.vim
continuing in <SNR>11__get_module
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/lexima)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 1: sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/lexima/insmode.vim"
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/lexima)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 7: sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/lexima/charstack.vim"
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/lexima/charstack.vim
continuing in /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/lexima/insmode.vim
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/lexima/insmode.vim
continuing in lexima#clear_rules
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/lexima)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 2: sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/lexima/cmdmode.vim"
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/lexima/cmdmode.vim
continuing in lexima#clear_rules
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/lexima)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 15: sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/lexima/string.vim"
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/lexima/string.vim
continuing in <SNR>10_regularize
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/lexima)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 5: sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/lexima/sortedlist.vim"
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/lexima/sortedlist.vim
continuing in lexima#insmode#add_rules
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/lexima)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 18: sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/lexima/endwise_rule.vim"
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/lexima/endwise_rule.vim
continuing in lexima#set_default_rules
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/lexima.vim
continuing in /Users/tomoya_tanaka/.cache/dein/state_nvim.vim
finished sourcing /Users/tomoya_tanaka/.cache/dein/state_nvim.vim
continuing in dein#min#load_state
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/repos/github.com/Shougo/dein.vim/autoload/dein)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 1: sourcing "/Users/tomoya_tanaka/.cache/dein/repos/github.com/Shougo/dein.vim/autoload/dein/util.vim"
finished sourcing /Users/tomoya_tanaka/.cache/dein/repos/github.com/Shougo/dein.vim/autoload/dein/util.vim
continuing in dein#check_install
finished sourcing /Users/tomoya_tanaka/.config/nvim/settings/init/dein.vim
continuing in /Users/tomoya_tanaka/dotfiles/.config/nvim/init.vim
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.config/nvim/settings/user)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 2: sourcing "/Users/tomoya_tanaka/.config/nvim/settings/user/appearance.vim"
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 1: sourcing "/opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax/syntax.vim"
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 19: sourcing "/opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax/synload.vim"
finished sourcing /opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax/synload.vim
continuing in /opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax/syntax.vim
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 25: sourcing "/opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/filetype.lua"
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/ftdetect)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 0: sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/ftdetect/ftdetect.vim"
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/ftdetect/ftdetect.vim
continuing in nvim_exec() called at /opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/filetype.lua:0
not found in runtime path: "ftdetect/*.lua"
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
finished sourcing /opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/filetype.lua
continuing in /opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax/syntax.vim
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 25: sourcing "/opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/filetype.vim"
finished sourcing /opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/filetype.vim
continuing in /opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax/syntax.vim
Executing FileType Autocommands for "*"
autocommand if !exists('b:ts_highlight') | 0verbose exe "set syntax=" . expand("<amatch>") | endif

Executing BufReadPost Autocommands for "*"
autocommand <Lua 5: /opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/filetype.lua:11>

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
Executing FileType Autocommands for "*"
autocommand call s:LoadFTPlugin()

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/ftplugin)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 17: sourcing "/opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/ftplugin/cpp.vim"
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/ftplugin)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 12: sourcing "/opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/ftplugin/c.vim"
finished sourcing /opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/ftplugin/c.vim
continuing in /opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/ftplugin/cpp.vim
not found in runtime path: "ftplugin/c.lua ftplugin/c_*.lua ftplugin/c/*.lua"
finished sourcing /opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/ftplugin/cpp.vim
continuing in <SNR>2_LoadFTPlugin
not found in runtime path: "ftplugin/cpp.lua ftplugin/cpp_*.lua ftplugin/cpp/*.lua"
Executing FileType Autocommands for "*"
autocommand call s:LoadIndent()

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/indent)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 14: sourcing "/opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/indent/cpp.vim"
finished sourcing /opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/indent/cpp.vim
continuing in <SNR>3_LoadIndent
not found in runtime path: "indent/cpp.lua"
Executing FileType Autocommands for "*?"
autocommand call dein#autoload#_on_default_event('FileType')

Executing FileType Autocommands for "*"
autocommand if !exists('b:ts_highlight') | 0verbose exe "set syntax=" . expand("<amatch>") | endif

Executing BufReadPost Autocommands for "*"
autocommand if getline(1) =~# '^#!.\+\<fish\>' |     setlocal filetype=fish | endif

Executing BufReadPost Autocommands for "*"
autocommand if !did_filetype() && expand('<amatch>') !~ g:ft_ignore_pat | runtime! scripts.vim | endif

finished sourcing /opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax/syntax.vim
continuing in /Users/tomoya_tanaka/dotfiles/.config/nvim/settings/user/appearance.vim
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 2: sourcing "/opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax/syntax.vim"
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 15: sourcing "/opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax/nosyntax.vim"
Executing BufEnter Autocommands for "*"
autocommand syn clear

autocommand if exists("b:current_syntax") | unlet b:current_syntax | endif

finished sourcing /opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax/nosyntax.vim
continuing in /opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax/syntax.vim
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 19: sourcing "/opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax/synload.vim"
finished sourcing /opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax/synload.vim
continuing in /opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax/syntax.vim
Executing FileType Autocommands for "*"
autocommand if !exists('b:ts_highlight') | 0verbose exe "set syntax=" . expand("<amatch>") | endif

finished sourcing /opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax/syntax.vim
continuing in /Users/tomoya_tanaka/dotfiles/.config/nvim/settings/user/appearance.vim
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/colors)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 7: sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/colors/nord.vim"
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/colors/nord.vim
continuing in /Users/tomoya_tanaka/dotfiles/.config/nvim/settings/user/appearance.vim
finished sourcing /Users/tomoya_tanaka/.config/nvim/settings/user/appearance.vim
continuing in /Users/tomoya_tanaka/dotfiles/.config/nvim/init.vim
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.config/nvim/settings/user)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 2: sourcing "/Users/tomoya_tanaka/.config/nvim/settings/user/editor.vim"
Executing command: "'/bin/zsh' '-c' 'echo -n $(which python2)'"


Executing command: "'/bin/zsh' '-c' 'echo -n $(which python3)'"


chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/lua)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/lua)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/lua)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/lua)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/lua)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/repos/github.com/nvim-treesitter/nvim-treesitter/lua/nvim-treesitter)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
finished sourcing /Users/tomoya_tanaka/.config/nvim/settings/user/editor.vim
continuing in /Users/tomoya_tanaka/dotfiles/.config/nvim/init.vim
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.config/nvim/settings/user)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 2: sourcing "/Users/tomoya_tanaka/.config/nvim/settings/user/fzf-preview.vim"
finished sourcing /Users/tomoya_tanaka/.config/nvim/settings/user/fzf-preview.vim
continuing in /Users/tomoya_tanaka/dotfiles/.config/nvim/init.vim
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.config/nvim/settings/user)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 2: sourcing "/Users/tomoya_tanaka/.config/nvim/settings/user/keybind.vim"
finished sourcing /Users/tomoya_tanaka/.config/nvim/settings/user/keybind.vim
continuing in /Users/tomoya_tanaka/dotfiles/.config/nvim/init.vim
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.config/nvim/settings/user)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 2: sourcing "/Users/tomoya_tanaka/.config/nvim/settings/user/leader.vim"
finished sourcing /Users/tomoya_tanaka/.config/nvim/settings/user/leader.vim
continuing in /Users/tomoya_tanaka/dotfiles/.config/nvim/init.vim
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.config/nvim/settings/plugins)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 3: sourcing "/Users/tomoya_tanaka/.config/nvim/settings/plugins/coc.vim"
finished sourcing /Users/tomoya_tanaka/.config/nvim/settings/plugins/coc.vim
continuing in /Users/tomoya_tanaka/dotfiles/.config/nvim/init.vim
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.config/nvim/settings/scripts)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 4: sourcing "/Users/tomoya_tanaka/.config/nvim/settings/scripts/coc-jump-to-definition.vim"
finished sourcing /Users/tomoya_tanaka/.config/nvim/settings/scripts/coc-jump-to-definition.vim
continuing in /Users/tomoya_tanaka/dotfiles/.config/nvim/init.vim
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.config/nvim/settings/scripts)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 4: sourcing "/Users/tomoya_tanaka/.config/nvim/settings/scripts/tig-status.vim"
finished sourcing /Users/tomoya_tanaka/.config/nvim/settings/scripts/tig-status.vim
continuing in /Users/tomoya_tanaka/dotfiles/.config/nvim/init.vim
finished sourcing /Users/tomoya_tanaka/.config/nvim/init.vim
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.config/nvim)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/repos/github.com/Shougo/dein.vim)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.config/nvim)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/repos/github.com/junegunn/fzf/plugin)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
sourcing "/Users/tomoya_tanaka/.cache/dein/repos/github.com/junegunn/fzf/plugin/fzf.vim"
finished sourcing /Users/tomoya_tanaka/.cache/dein/repos/github.com/junegunn/fzf/plugin/fzf.vim
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/repos/github.com/Shougo/vimproc.vim/plugin)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
sourcing "/Users/tomoya_tanaka/.cache/dein/repos/github.com/Shougo/vimproc.vim/plugin/vimproc.vim"
finished sourcing /Users/tomoya_tanaka/.cache/dein/repos/github.com/Shougo/vimproc.vim/plugin/vimproc.vim
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/plugin)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/plugin/airline-themes.vim"
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/plugin/airline-themes.vim
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/plugin)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/plugin/airline.vim"
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/airline)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 301: sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/airline/init.vim"
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/airline/init.vim
continuing in /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/plugin/airline.vim
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/airline)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 164: sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/airline/parts.vim"
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/airline/parts.vim
continuing in airline#init#bootstrap
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/airline/formatter)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 180: sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/airline/formatter/short_path.vim"
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/airline/formatter/short_path.vim
continuing in airline#init#bootstrap
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/airline)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 75: sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/airline/util.vim"
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/airline/util.vim
continuing in <SNR>53_airline_toggle
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/plugin/airline.vim
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/plugin)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/plugin/coc.vim"
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/coc)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 57: sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/coc/rpc.vim"
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/coc/rpc.vim
continuing in /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/plugin/coc.vim
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/coc)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 10: sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/coc/util.vim"
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/coc/util.vim
continuing in coc#rpc#start_server
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/coc)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 14: sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/coc/client.vim"
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/coc/client.vim
continuing in coc#rpc#start_server
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/coc)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 10: sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/coc/highlight.vim"
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/coc/highlight.vim
continuing in <SNR>58_Highlight
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/coc)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 3: sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/coc/color.vim"
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/coc/color.vim
continuing in coc#highlight#get_contrast
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/plugin/coc.vim
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/plugin)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/plugin/commentary.vim"
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/plugin/commentary.vim
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/plugin)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/plugin/conflict_marker.vim"
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/plugin/conflict_marker.vim
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/plugin/denops)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/plugin/denops/debug.vim"
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/plugin/denops/debug.vim
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/plugin)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/plugin/denops.vim"
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 13: sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/denops.vim"
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/denops.vim
continuing in /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/plugin/denops.vim
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/plugin/denops.vim
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/plugin)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/plugin/EasyMotion.vim"
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/plugin/EasyMotion.vim
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/plugin)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/plugin/editorconfig.vim"
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/plugin/editorconfig.vim
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/plugin)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/plugin/emmet.vim"
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/plugin/emmet.vim
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/plugin)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/plugin/far.vim"
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/plugin/far.vim
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/plugin)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/plugin/fern.vim"
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/plugin/fern.vim
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/plugin)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/plugin/fern_git_status.vim"
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/plugin/fern_git_status.vim
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/plugin)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/plugin/fern_renderer_nerdfont.vim"
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 6: sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/fern.vim"
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/vital)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 2: sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/vital/fern.vim"
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/vital/fern.vim
continuing in /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/fern.vim
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/vital/_fern)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 3: sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/vital/_fern/Config.vim"
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/vital/_fern/Config.vim
continuing in <SNR>77__get_module
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/vital)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 1: sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/vital/_fern.vim"
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/vital/_fern.vim
continuing in vital#_fern#Config#import
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/fern.vim
continuing in /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/plugin/fern_renderer_nerdfont.vim
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/plugin/fern_renderer_nerdfont.vim
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/plugin)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/plugin/fzf.vim"
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/plugin/fzf.vim
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/plugin)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/plugin/fzf_preview.vim"
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/plugin/fzf_preview.vim
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/plugin)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/plugin/gin-branch.vim"
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/plugin/gin-branch.vim
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/plugin)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/plugin/gin-chaperon.vim"
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/plugin/gin-chaperon.vim
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/plugin)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/plugin/gin-diff.vim"
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/plugin/gin-diff.vim
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/plugin)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/plugin/gin-edit.vim"
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/plugin/gin-edit.vim
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/plugin)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/plugin/gin-patch.vim"
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/plugin/gin-patch.vim
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/plugin)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/plugin/gin-status.vim"
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/plugin/gin-status.vim
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/plugin)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/plugin/gin.vim"
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/plugin/gin.vim
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/plugin)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/plugin/gina.vim"
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/plugin/gina.vim
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/plugin)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/plugin/glyph_palette.vim"
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/glyph_palette)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 7: sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/glyph_palette/defaults.vim"
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/glyph_palette/defaults.vim
continuing in /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/plugin/glyph_palette.vim
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/plugin/glyph_palette.vim
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/plugin)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/plugin/goimports.vim"
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/plugin/goimports.vim
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/plugin)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/plugin/highlightedyank.vim"
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/plugin/highlightedyank.vim
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/plugin)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/plugin/lexima.vim"
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/plugin/lexima.vim
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/plugin/operator)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/plugin/operator/sandwich.vim"
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/plugin/operator/sandwich.vim
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/plugin)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/plugin/preview_markdown.vim"
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/plugin/preview_markdown.vim
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/plugin)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/plugin/quickrun.vim"
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/plugin/quickrun.vim
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/plugin)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/plugin/sandwich.vim"
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/plugin/sandwich.vim
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/plugin)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/plugin/surround.vim"
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/plugin/surround.vim
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/plugin/textobj)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/plugin/textobj/sandwich.vim"
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/plugin/textobj/sandwich.vim
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/plugin)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/plugin/tmux_navigator.vim"
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/plugin/tmux_navigator.vim
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/plugin)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/plugin/vim-gotests.vim"
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/plugin/vim-gotests.vim
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/plugin)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/plugin/webdevicons.vim"
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 601: sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/airline.vim"
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/airline.vim
continuing in /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/plugin/webdevicons.vim
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/plugin/webdevicons.vim
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/plugin)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
sourcing "/opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/plugin/gzip.vim"
finished sourcing /opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/plugin/gzip.vim
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/plugin)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
sourcing "/opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/plugin/health.vim"
finished sourcing /opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/plugin/health.vim
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/plugin)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
sourcing "/opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/plugin/matchit.vim"
not found in 'packpath': "pack/*/start/matchit"
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/repos/github.com/Shougo/dein.vim)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.config/nvim)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.config/nvim/pack/*/start/*)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/opt/homebrew/etc/xdg/nvim)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/etc/xdg/nvim)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.local/share/nvim/site)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/opt/homebrew/share/nvim/site)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/usr/local/share/nvim/site)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/usr/share/nvim/site)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/repos/github.com/junegunn/fzf)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/repos/github.com/nvim-treesitter/nvim-treesitter)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/repos/github.com/Shougo/vimproc.vim)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/pack/dist/opt)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/pack/dist/opt/matchit/plugin)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 3: sourcing "/opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/pack/dist/opt/matchit/plugin/matchit.vim"
finished sourcing /opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/pack/dist/opt/matchit/plugin/matchit.vim
continuing in /opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/plugin/matchit.vim
finished sourcing /opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/plugin/matchit.vim
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/plugin)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
sourcing "/opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/plugin/matchparen.vim"
finished sourcing /opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/plugin/matchparen.vim
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/plugin)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
sourcing "/opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/plugin/netrwPlugin.vim"
finished sourcing /opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/plugin/netrwPlugin.vim
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/plugin)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
sourcing "/opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/plugin/rplugin.vim"
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.local/share/nvim)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 3: sourcing "/Users/tomoya_tanaka/.local/share/nvim/rplugin.vim"
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/autoload/remote)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 5: sourcing "/opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/autoload/remote/host.vim"
finished sourcing /opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/autoload/remote/host.vim
continuing in /Users/tomoya_tanaka/.local/share/nvim/rplugin.vim
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/autoload/remote)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 23: sourcing "/opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/autoload/remote/define.vim"
finished sourcing /opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/autoload/remote/define.vim
continuing in remote#host#RegisterPlugin
finished sourcing /Users/tomoya_tanaka/.local/share/nvim/rplugin.vim
continuing in <SNR>111_LoadRemotePlugins
finished sourcing /opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/plugin/rplugin.vim
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/plugin)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
sourcing "/opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/plugin/shada.vim"
finished sourcing /opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/plugin/shada.vim
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/plugin)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
sourcing "/opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/plugin/spellfile.vim"
finished sourcing /opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/plugin/spellfile.vim
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/plugin)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
sourcing "/opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/plugin/tarPlugin.vim"
finished sourcing /opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/plugin/tarPlugin.vim
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/plugin)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
sourcing "/opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/plugin/tohtml.vim"
finished sourcing /opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/plugin/tohtml.vim
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/plugin)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
sourcing "/opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/plugin/tutor.vim"
finished sourcing /opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/plugin/tutor.vim
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/plugin)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
sourcing "/opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/plugin/zipPlugin.vim"
finished sourcing /opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/plugin/zipPlugin.vim
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/repos/github.com/nvim-treesitter/nvim-treesitter/plugin)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
sourcing "/Users/tomoya_tanaka/.cache/dein/repos/github.com/nvim-treesitter/nvim-treesitter/plugin/nvim-treesitter.lua"
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/repos/github.com/nvim-treesitter/nvim-treesitter/lua/nvim-treesitter)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/repos/github.com/nvim-treesitter/nvim-treesitter/lua/nvim-treesitter)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/repos/github.com/nvim-treesitter/nvim-treesitter/lua/nvim-treesitter)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/repos/github.com/nvim-treesitter/nvim-treesitter/lua/nvim-treesitter)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/repos/github.com/nvim-treesitter/nvim-treesitter/lua/nvim-treesitter)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/repos/github.com/nvim-treesitter/nvim-treesitter/lua/nvim-treesitter)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/repos/github.com/nvim-treesitter/nvim-treesitter/lua/nvim-treesitter)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/repos/github.com/nvim-treesitter/nvim-treesitter/lua/nvim-treesitter)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/repos/github.com/nvim-treesitter/nvim-treesitter/lua/nvim-treesitter)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/repos/github.com/nvim-treesitter/nvim-treesitter/lua/nvim-treesitter)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/repos/github.com/nvim-treesitter/nvim-treesitter/lua/nvim-treesitter)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/repos/github.com/nvim-treesitter/nvim-treesitter/lua/nvim-treesitter)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/repos/github.com/nvim-treesitter/nvim-treesitter/lua/nvim-treesitter)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/repos/github.com/nvim-treesitter/nvim-treesitter/lua/nvim-treesitter)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/repos/github.com/nvim-treesitter/nvim-treesitter/lua/nvim-treesitter)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/repos/github.com/nvim-treesitter/nvim-treesitter/lua/nvim-treesitter)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/repos/github.com/nvim-treesitter/nvim-treesitter/lua/nvim-treesitter)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/repos/github.com/nvim-treesitter/nvim-treesitter/lua/nvim-treesitter)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/repos/github.com/nvim-treesitter/nvim-treesitter/plugin)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/repos/github.com/nvim-treesitter/nvim-treesitter/plugin)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
finished sourcing /Users/tomoya_tanaka/.cache/dein/repos/github.com/nvim-treesitter/nvim-treesitter/plugin/nvim-treesitter.lua
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/plugin)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
sourcing "/opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/plugin/man.lua"
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/plugin)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/plugin)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
finished sourcing /opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/plugin/man.lua
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.config/nvim/pack/plugins/start)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/dotfiles/.config/nvim/pack/plugins/start/session.vim/plugin)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
sourcing "/Users/tomoya_tanaka/dotfiles/.config/nvim/pack/plugins/start/session.vim/plugin/session.vim"
finished sourcing /Users/tomoya_tanaka/dotfiles/.config/nvim/pack/plugins/start/session.vim/plugin/session.vim
not found in 'packpath': "start/*"
not found in runtime path: "plugin/**/*.vim"
not found in runtime path: "plugin/**/*.lua"
Reading ShaDa file "/Users/tomoya_tanaka/.local/state/nvim/shada/main.shada" info marks oldfiles
Reading ShaDa file "/Users/tomoya_tanaka/.local/state/nvim/shada/main.shada" marks
Executing BufReadPost Autocommands for "*?"
autocommand call dein#autoload#_on_default_event('BufRead')

Executing BufReadPost Autocommands for "*"
autocommand <Lua 5: /opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/filetype.lua:11>

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
Executing FileType Autocommands for "*"
autocommand call s:LoadFTPlugin()

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/ftplugin)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 17: sourcing "/opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/ftplugin/cpp.vim"
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/ftplugin)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 12: sourcing "/opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/ftplugin/c.vim"
finished sourcing /opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/ftplugin/c.vim
continuing in /opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/ftplugin/cpp.vim
not found in runtime path: "ftplugin/c.lua ftplugin/c_*.lua ftplugin/c/*.lua"
finished sourcing /opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/ftplugin/cpp.vim
continuing in <SNR>2_LoadFTPlugin
not found in runtime path: "ftplugin/cpp.lua ftplugin/cpp_*.lua ftplugin/cpp/*.lua"
Executing FileType Autocommands for "*"
autocommand call s:LoadIndent()

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/indent)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 14: sourcing "/opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/indent/cpp.vim"
finished sourcing /opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/indent/cpp.vim
continuing in <SNR>3_LoadIndent
not found in runtime path: "indent/cpp.lua"
Executing FileType Autocommands for "*?"
autocommand call dein#autoload#_on_default_event('FileType')

Executing FileType Autocommands for "*"
autocommand if !exists('b:ts_highlight') | 0verbose exe "set syntax=" . expand("<amatch>") | endif

Executing FileType Autocommands for "*"
autocommand set fo-=c fo-=r fo-=o

autocommand set fo-=c fo-=r fo-=o " 改行時の自動コメントアウトを無効化する 

autocommand <Lua 22: ~/.cache/dein/repos/github.com/nvim-treesitter/nvim-treesitter/lua/nvim-treesitter/install.lua:431>

Executing FileType Autocommands for "*"
autocommand call <sid>on_window_changed('FileType')

Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/airline)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 6: sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/airline/extensions.vim"
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/airline/extensions.vim
continuing in <SNR>53_init
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/airline/extensions)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 16: sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/airline/extensions/quickfix.vim"
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/airline/extensions/quickfix.vim
continuing in airline#extensions#load
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/airline/extensions)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 30: sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/airline/extensions/gina.vim"
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/airline/extensions/gina.vim
continuing in airline#extensions#load
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/airline/extensions)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 35: sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/airline/extensions/fern.vim"
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/airline/extensions/fern.vim
continuing in airline#extensions#load
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/airline/extensions)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 46: sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/airline/extensions/fzf.vim"
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/airline/extensions/fzf.vim
continuing in airline#extensions#load
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/airline/extensions)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 58: sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/airline/extensions/term.vim"
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/airline)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 11: sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/airline/section.vim"
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/airline/section.vim
continuing in /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/airline/extensions/term.vim
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/airline)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 2: sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/airline/highlighter.vim"
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/airline/highlighter.vim
continuing in <SNR>132_wrap_accent
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/airline/extensions/term.vim
continuing in airline#extensions#load
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/airline/extensions)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 102: sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/airline/extensions/hunks.vim"
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/airline/extensions/hunks.vim
continuing in airline#extensions#load
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/airline/extensions)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 160: sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/airline/extensions/branch.vim"
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/airline/extensions/branch.vim
continuing in airline#extensions#load
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/lua/vim)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/airline/extensions)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 217: sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/airline/extensions/nvimlsp.vim"
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/airline/extensions/nvimlsp.vim
continuing in airline#extensions#load
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/airline/extensions)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 232: sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/airline/extensions/whitespace.vim"
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/airline/extensions/whitespace.vim
continuing in airline#extensions#load
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/airline/extensions)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 242: sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/airline/extensions/po.vim"
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/airline/extensions/po.vim
continuing in airline#extensions#load
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/airline/extensions)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 247: sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/airline/extensions/wordcount.vim"
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/airline/extensions/wordcount.vim
continuing in airline#extensions#load
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/airline/extensions)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 302: sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/airline/extensions/keymap.vim"
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/airline/extensions/keymap.vim
continuing in airline#extensions#load
not found in runtime path: "autoload/vimtex.vim"
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/airline/extensions)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 330: sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/airline/extensions/searchcount.vim"
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/airline/extensions/searchcount.vim
continuing in airline#extensions#load
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/airline/themes)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 14: sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/airline/themes/nord.vim"
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/airline)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 50: sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/airline/themes.vim"
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/airline/themes.vim
continuing in /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/airline/themes/nord.vim
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/airline/themes/nord.vim
continuing in airline#switch_theme
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/airline)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 1: sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/airline/builder.vim"
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/airline/builder.vim
continuing in <SNR>104_invoke_funcrefs
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/airline/extensions)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 2: sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/airline/extensions/default.vim"
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/airline/extensions/default.vim
continuing in airline#util#exec_funcrefs
Executing User Autocommands for "AirlineModeChanged"
autocommand call airline#mode_changed()

Executing FileType Autocommands for "*"
autocommand call s:Autocmd('FileType', expand('<amatch>'), +expand('<abuf>'))

Executing FileType Autocommands for "*"
autocommand <Lua 23: ~/.cache/dein/repos/github.com/nvim-treesitter/nvim-treesitter/lua/nvim-treesitter/configs.lua:107>

not found in runtime path: "parser/comment.*"
Executing Syntax Autocommands for "*"
autocommand call s:SynSet()

Executing Syntax Autocommands for "*"
autocommand call s:setup_styledEmmetAbbreviation()

Executing BufReadPost Autocommands for "*"
autocommand if getline(1) =~# '^#!.\+\<fish\>' |     setlocal filetype=fish | endif

Executing BufReadPost Autocommands for "*"
autocommand if !did_filetype() && expand('<amatch>') !~ g:ft_ignore_pat | runtime! scripts.vim | endif

Executing BufReadPost Autocommands for "*"
autocommand set laststatus=0 " This will work instead

Executing BufReadPost Autocommands for "*"
autocommand call s:Autocmd('BufCreate', +expand('<abuf>'))

Executing BufReadPost Autocommands for "*"
autocommand if conflict_marker#detect#markers() | call s:on_detected() | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/conflict_marker)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 0: sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/conflict_marker/detect.vim"
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/conflict_marker/detect.vim
continuing in BufReadPost Autocommands for "*"
Executing BufReadPost Autocommands for "*"
autocommand call s:UseConfigFiles()

Executing BufWinEnter Autocommands for "*"
autocommand call <sid>on_window_changed('BufWinEnter')

Executing BufWinEnter Autocommands for "*"
autocommand call s:Autocmd('BufWinEnter', +expand('<abuf>'), win_getid())

Executing BufWinEnter Autocommands for "*"
autocommand let g:fzf#vim#buffers[bufnr('')] = reltimefloat(reltime())

Executing BufWinEnter Autocommands for "*"
autocommand call s:mru_append(expand('<amatch>'))

Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/fzf_preview/remote)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 2: sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/fzf_preview/remote/mr.vim"
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/fzf_preview/remote/mr.vim
continuing in <SNR>81_mru_append
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/fzf_preview/remote)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 4: sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/fzf_preview/remote/util.vim"
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/fzf_preview/remote/util.vim
continuing in fzf_preview#remote#mr#append
Executing BufEnter Autocommands for "*"
autocommand set fo-=c fo-=r fo-=o

Executing BufEnter Autocommands for "*"
autocommand call s:Autocmd('BufEnter', +expand('<abuf>'))

Executing BufEnter Autocommands for "*"
autocommand if conflict_marker#detect#markers() | call s:on_detected() | endif

Executing BufEnter Autocommands for "*"
autocommand call s:mru_append(expand('<amatch>'))

Executing VimEnter Autocommands for "*?"
autocommand call dein#autoload#_on_default_event('VimEnter')

Executing VimEnter Autocommands for "*"
autocommand call <sid>on_window_changed('VimEnter')

Executing VimEnter Autocommands for "*"
autocommand call coc#rpc#notify('VimEnter', [])

autocommand call timer_start(0, { -> s:CheckHighlight()})

Executing VimEnter Autocommands for "*"
autocommand call s:init()

Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/denops)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 7: sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/denops/server.vim"
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/denops)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 1: sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/denops/util.vim"
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/denops/util.vim
continuing in /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/denops/server.vim
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/denops/server.vim
continuing in <SNR>67_init
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/denops)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 23: sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/denops/job.vim"
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/denops/job.vim
continuing in denops#server#start
Executing User Autocommands for "DenopsStarted"
autocommand call denops#util#debug(expand('<amatch>:t'))

Executing User Autocommands for "DenopsStarted"
autocommand :

Executing VimEnter Autocommands for "*"
autocommand call fern_git_status#init()

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 0: sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/fern_git_status.vim"
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/vital/_fern/Async)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 3: sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/vital/_fern/Async/CancellationToken.vim"
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/vital/_fern/Async/CancellationToken.vim
continuing in <SNR>77__get_module
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/fern_git_status.vim
continuing in VimEnter Autocommands for "*"
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/fern)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 5: sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/fern/hook.vim"
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/vital/_fern/Async)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 3: sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/vital/_fern/Async/Promise.vim"
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/vital/_fern/Async/Promise.vim
continuing in <SNR>77__get_module
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/vital/_fern/Async)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 3: sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/vital/_fern/Async/Later.vim"
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/vital/_fern/Async/Later.vim
continuing in <SNR>77__get_module
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/fern/hook.vim
continuing in fern_git_status#init
Executing VimEnter Autocommands for "*"
autocommand call s:mru_append(expand('<amatch>'))

Executing VimEnter Autocommands for "*"
autocommand call s:doautocmd_from_remote()

autocommand call s:doautocmd_from_rpc()

Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/fzf_preview)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 1: sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/fzf_preview/rpc.vim"
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/vital)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 1: sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/vital/fzf_preview.vim"
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/vital/fzf_preview.vim
continuing in /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/fzf_preview/rpc.vim
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/vital/_fzf_preview/Async)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 3: sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/vital/_fzf_preview/Async/Promise.vim"
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/vital/_fzf_preview/Async/Promise.vim
continuing in <SNR>159__get_module
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/vital)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 1: sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/vital/_fzf_preview.vim"
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/vital/_fzf_preview.vim
continuing in vital#_fzf_preview#Async#Promise#import
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/vital/_fzf_preview/Async)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 3: sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/vital/_fzf_preview/Async/Later.vim"
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/vital/_fzf_preview/Async/Later.vim
continuing in <SNR>159__get_module
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/fzf_preview/rpc)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 2: sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/fzf_preview/rpc/server.vim"
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/vital/_fzf_preview/VS/RPC)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 3: sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/vital/_fzf_preview/VS/RPC/JSON.vim"
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/vital/_fzf_preview/VS/RPC/JSON.vim
continuing in <SNR>159__get_module
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/vital/_fzf_preview/VS/System)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 3: sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/vital/_fzf_preview/VS/System/Job.vim"
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/vital/_fzf_preview/VS/System/Job.vim
continuing in <SNR>159__get_module
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/vital/_fzf_preview/VS/Event)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 3: sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/vital/_fzf_preview/VS/Event/Emitter.vim"
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/vital/_fzf_preview/VS/Event/Emitter.vim
continuing in <SNR>159__get_module
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/fzf_preview/rpc/server.vim
continuing in /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/fzf_preview/rpc.vim
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/fzf_preview/rpc.vim
continuing in <SNR>81_doautocmd_from_rpc
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/autoload/provider)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
sourcing "/opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/autoload/provider/clipboard.vim"
finished sourcing /opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/autoload/provider/clipboard.vim
Executing WinScrolled Autocommands for "*"
autocommand call s:HandleWinScrolled(+expand('<amatch>'))

Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()


--- Terminal info --- {{{
&term: screen-256color
Description: GNU Screen with 256 colors
Aliases: screen-256color
Boolean capabilities:
  auto_left_margin          bw         = false
  auto_right_margin         am         = true
  no_esc_ctlc               xsb        = false
  ceol_standout_glitch      xhp        = false
  eat_newline_glitch        xenl       = true
  erase_overstrike          eo         = false
  generic_type              gn         = false
  hard_copy                 hc         = false
  has_meta_key              km         = true
  has_status_line           hs         = false
  insert_null_glitch        in         = false
  memory_above              da         = false
  memory_below              db         = false
  move_insert_mode          mir        = true
  move_standout_mode        msgr       = true
  over_strike               os         = false
  status_line_esc_ok        eslok      = false
  dest_tabs_magic_smso      xt         = false
  tilde_glitch              hz         = false
  transparent_underline     ul         = false
  xon_xoff                  xon        = false
  needs_xon_xoff            nxon       = false
  prtr_silent               mc5i       = false
  hard_cursor               chts       = false
  non_rev_rmcup             nrrmc      = false
  no_pad_char               npc        = false
  non_dest_scroll_region    ndscr      = false
  can_change                ccc        = false
  back_color_erase          bce        = false
  hue_lightness_saturation  hls        = false
  col_addr_glitch           xhpa       = false
  cr_cancels_micro_mode     crxm       = false
  has_print_wheel           daisy      = false
  row_addr_glitch           xvpa       = false
  semi_auto_right_margin    sam        = false
  cpi_changes_res           cpix       = false
  lpi_changes_res           lpix       = false
  backspaces_with_bs        OTbs       = true
  crt_no_scrolling          OTns       = false
  no_correctly_working_cr   OTnc       = false
  gnu_has_meta_key          OTMT       = false
  linefeed_is_newline       OTNL       = false
  has_hardware_tabs         OTpt       = true
  return_does_clr_eol       OTxr       = false
Numeric capabilities:
  columns                   cols       = 80
  init_tabs                 it         = 8
  lines                     lines      = 24
  lines_of_memory           lm         = -1
  magic_cookie_glitch       xmc        = -1
  padding_baud_rate         pb         = -1
  virtual_terminal          vt         = -1
  width_status_line         wsl        = -1
  num_labels                nlab       = -1
  label_height              lh         = -1
  label_width               lw         = -1
  max_attributes            ma         = -1
  maximum_windows           wnum       = -1
  max_colors                colors     = 256
  max_pairs                 pairs      = 32767
  no_color_video            ncv        = 3
  buffer_capacity           bufsz      = -1
  dot_vert_spacing          spinv      = -1
  dot_horz_spacing          spinh      = -1
  max_micro_address         maddr      = -1
  max_micro_jump            mjump      = -1
  micro_col_size            mcs        = -1
  micro_line_size           mls        = -1
  number_of_pins            npins      = -1
  output_res_char           orc        = -1
  output_res_line           orl        = -1
  output_res_horz_inch      orhi       = -1
  output_res_vert_inch      orvi       = -1
  print_rate                cps        = -1
  wide_char_size            widcs      = -1
  buttons                   btns       = -1
  bit_image_entwining       bitwin     = -1
  bit_image_type            bitype     = -1
  magic_cookie_glitch_ul    OTug       = -1
  carriage_return_delay     OTdC       = -1
  new_line_delay            OTdN       = -1
  backspace_delay           OTdB       = -1
  horizontal_tab_delay      OTdT       = -1
  number_of_function_keys   OTkn       = -1
String capabilities:
  back_tab                  cbt        = <Esc>[Z
  bell                      bel        = <C-G>
  carriage_return           cr         = <CR>
  change_scroll_region      csr        = <Esc>[%i%p1%d;%p2%dr
  clear_all_tabs            tbc        = <Esc>[3g
  clear_screen              clear      = <Esc>[H<Esc>[J
  clr_eol                   el         = <Esc>[K
  clr_eos                   ed         = <Esc>[J
  cursor_address            cup        = <Esc>[%i%p1%d;%p2%dH
  cursor_down               cud1       = <NL>
  cursor_home               home       = <Esc>[H
  cursor_invisible          civis      = <Esc>[?25l
  cursor_left               cub1       = <C-H>
  cursor_normal             cnorm      = <Esc>[34h<Esc>[?25h
  cursor_right              cuf1       = <Esc>[C
  cursor_up                 cuu1       = <Esc>M
  cursor_visible            cvvis      = <Esc>[34l
  delete_character          dch1       = <Esc>[P
  delete_line               dl1        = <Esc>[M
  enter_alt_charset_mode    smacs      = <C-N>
  enter_blink_mode          blink      = <Esc>[5m
  enter_bold_mode           bold       = <Esc>[1m
  enter_ca_mode             smcup      = <Esc>[?1049h
  enter_insert_mode         smir       = <Esc>[4h
  enter_reverse_mode        rev        = <Esc>[7m
  enter_standout_mode       smso       = <Esc>[3m
  enter_underline_mode      smul       = <Esc>[4m
  exit_alt_charset_mode     rmacs      = <C-O>
  exit_attribute_mode       sgr0       = <Esc>[m<C-O>
  exit_ca_mode              rmcup      = <Esc>[?1049l
  exit_insert_mode          rmir       = <Esc>[4l
  exit_standout_mode        rmso       = <Esc>[23m
  exit_underline_mode       rmul       = <Esc>[24m
  flash_screen              flash      = <Esc>g
  from_status_line          fsl        = <Esc>\
  init_2string              is2        = <Esc>)0
  insert_line               il1        = <Esc>[L
  key_backspace             kbs        = <C-H>
  key_dc                    kdch1      = <Esc>[3~
  key_down                  kcud1      = <Esc>OB
  key_f1                    kf1        = <Esc>OP
  key_f10                   kf10       = <Esc>[21~
  key_f2                    kf2        = <Esc>OQ
  key_f3                    kf3        = <Esc>OR
  key_f4                    kf4        = <Esc>OS
  key_f5                    kf5        = <Esc>[15~
  key_f6                    kf6        = <Esc>[17~
  key_f7                    kf7        = <Esc>[18~
  key_f8                    kf8        = <Esc>[19~
  key_f9                    kf9        = <Esc>[20~
  key_home                  khome      = <Esc>[1~
  key_ic                    kich1      = <Esc>[2~
  key_left                  kcub1      = <Esc>OD
  key_npage                 knp        = <Esc>[6~
  key_ppage                 kpp        = <Esc>[5~
  key_right                 kcuf1      = <Esc>OC
  key_up                    kcuu1      = <Esc>OA
  keypad_local              rmkx       = <Esc>[?1l<Esc>>
  keypad_xmit               smkx       = <Esc>[?1h<Esc>=
  newline                   nel        = <Esc>E
  parm_dch                  dch        = <Esc>[%p1%dP
  parm_delete_line          dl         = <Esc>[%p1%dM
  parm_down_cursor          cud        = <Esc>[%p1%dB
  parm_ich                  ich        = <Esc>[%p1%d@
  parm_insert_line          il         = <Esc>[%p1%dL
  parm_left_cursor          cub        = <Esc>[%p1%dD
  parm_right_cursor         cuf        = <Esc>[%p1%dC
  parm_up_cursor            cuu        = <Esc>[%p1%dA
  reset_2string             rs2        = <Esc>c<Esc>[?1000l<Esc>[?25h
  restore_cursor            rc         = <Esc>8
  save_cursor               sc         = <Esc>7
  scroll_forward            ind        = <NL>
  scroll_reverse            ri         = <Esc>M
  set_attributes            sgr        = <Esc>[0%?%p6%t;1%;%?%p1%t;3%;%?%p2%t;4%;%?%p3%t;7%;%?%p4%t;5%;m%?%p9%t<C-N>%e<C-O>%;
  set_tab                   hts        = <Esc>H
  tab                       ht         = <Tab>
  to_status_line            tsl        = <Esc>_
  acs_chars                 acsc       = ++,,--..00``aaffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyyzz{{||}}~~
  key_btab                  kcbt       = <Esc>[Z
  ena_acs                   enacs      = <Esc>(B<Esc>)0
  key_end                   kend       = <Esc>[4~
  key_f11                   kf11       = <Esc>[23~
  key_f12                   kf12       = <Esc>[24~
  clr_bol                   el1        = <Esc>[1K
  orig_pair                 op         = <Esc>[39;49m
  key_mouse                 kmous      = <Esc>[M
  set_a_foreground          setaf      = <Esc>[%?%p1%{8}%<%t3%p1%d%e%p1%{16}%<%t9%p1%{8}%-%d%e38;5;%p1%d%;m
  set_a_background          setab      = <Esc>[%?%p1%{8}%<%t4%p1%d%e%p1%{16}%<%t10%p1%{8}%-%d%e48;5;%p1%d%;m
Extended boolean capabilities:
  AX                        = true
  G0                        = true
Extended string capabilities:
  E0                        = <Esc>(B
  S0                        = <Esc>(%p1%c
  kDC5                      = 
  kDC6                      = 
  kDN                       = 
  kDN5                      = 
  kEND5                     = 
  kEND6                     = 
  kHOM5                     = 
  kHOM6                     = 
  kIC5                      = 
  kIC6                      = 
  kLFT5                     = 
  kNXT5                     = 
  kNXT6                     = 
  kPRV5                     = 
  kPRV6                     = 
  kRIT5                     = 
  kUP                       = 
  kUP5                      = 
  ka2                       = 
  kb1                       = 
  kb3                       = 
  kc2                       = 
  ext.get_bg                = <Esc>]11;?<C-G>
  ext.get_extkeys           = <Esc>[?u<Esc>[c
  Ss                        = <Esc>[%p1%d q
  Se                        = <Esc>[ q
  setrgbf                   = <Esc>[38;2;%p1%d;%p2%d;%p3%dm
  setrgbb                   = <Esc>[48;2;%p1%d;%p2%d;%p3%dm
  ext.set_cursor_color      = <Esc>]12;#%p1%06x<C-G>
  ext.reset_cursor_color    = <Esc>]112<C-G>
  ext.save_title            = <Esc>[22;0t
  ext.restore_title         = <Esc>[23;0t
  ext.enable_lr_margin      = <Esc>[?69h
  ext.disable_lr_margin     = <Esc>[?69l
  ext.enable_bpaste         = <Esc>[?2004h
  ext.disable_bpaste        = <Esc>[?2004l
  ext.enable_focus          = <Esc>[?1004h
  ext.disable_focus         = <Esc>[?1004l
  ext.enable_mouse          = <Esc>[?1002h<Esc>[?1006h
  ext.disable_mouse         = <Esc>[?1002l<Esc>[?1006l
  ext.enable_mouse_move     = <Esc>[?1003h
  ext.disable_mouse_move    = <Esc>[?1003l
  ext.enable_extended_keys  = <Esc>[>4;2m
  ext.disable_extended_keys = <Esc>[>4;0m
}}}

Executing User Autocommands for "DenopsReady"
autocommand call denops#util#debug(expand('<amatch>:t'))

Executing User Autocommands for "DenopsReady"
autocommand call denops#plugin#discover()

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/denops)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 0: sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/denops/plugin.vim"
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/denops/plugin.vim
continuing in User Autocommands for "DenopsReady"

NVIM v0.8.0
Build type: Release
LuaJIT 2.1.0-beta3
Compiled by brew@HMBRW-A-001-M1-004.local

Features: +acl +iconv +tui
See ":help feature-compile"

   system vimrc file: "$VIM/sysinit.vim"
  fall-back for $VIM: "/opt/homebrew/Cellar/neovim/0.8.0/share/nvim"

Run :checkhealth for more info
Executing User Autocommands for "DenopsReady"
autocommand :

Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/denops)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/denops/api.vim"
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/denops/api.vim
Executing User Autocommands for "DenopsPluginPre:*"
autocommand call denops#util#debug(expand('<amatch>:t'))

Executing User Autocommands for "DenopsPluginPre:*"
autocommand :

Executing User Autocommands for "DenopsPluginPost:*"
autocommand call denops#util#debug(expand('<amatch>:t'))

Executing User Autocommands for "DenopsPluginPost:*"
autocommand :

Executing User Autocommands for "DenopsPluginPost:*"
autocommand call s:DenopsPluginPost()

Executing User Autocommands for "DenopsPluginPre:*"
autocommand call denops#util#debug(expand('<amatch>:t'))

Executing User Autocommands for "DenopsPluginPre:*"
autocommand :

Executing User Autocommands for "DenopsPluginPost:*"
autocommand call denops#util#debug(expand('<amatch>:t'))

Executing User Autocommands for "DenopsPluginPost:*"
autocommand :

Executing User Autocommands for "DenopsPluginPost:*"
autocommand call s:DenopsPluginPost()

Executing User Autocommands for "DenopsPluginPre:*"
autocommand call denops#util#debug(expand('<amatch>:t'))

Executing User Autocommands for "DenopsPluginPre:*"
autocommand :

Executing User Autocommands for "DenopsPluginPost:*"
autocommand call denops#util#debug(expand('<amatch>:t'))

Executing User Autocommands for "DenopsPluginPost:*"
autocommand :

Executing User Autocommands for "DenopsPluginPost:*"
autocommand call s:DenopsPluginPost()


NVIM v0.8.0
Build type: Release
LuaJIT 2.1.0-beta3
Compiled by brew@HMBRW-A-001-M1-004.local

Features: +acl +iconv +tui
See ":help feature-compile"

   system vimrc file: "$VIM/sysinit.vim"
  fall-back for $VIM: "/opt/homebrew/Cellar/neovim/0.8.0/share/nvim"

Run :checkhealth for more info
SpecialKey     xxx ctermfg=8 guifg=#4c566a
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
EndOfBuffer    xxx ctermfg=0 guifg=#3b4252
	Last set from ~/dotfiles/.config/nvim/settings/user/appearance.vim line 11
TermCursor     xxx cterm=reverse gui=reverse
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 11
TermCursorNC   xxx ctermbg=0 guibg=#3b4252
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
NonText        xxx ctermfg=8 gui=bold guifg=#434c5e
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
Directory      xxx ctermfg=6 guifg=#88c0d0
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
ErrorMsg       xxx ctermbg=1 guifg=#d8dee9 guibg=#bf616a
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
IncSearch      xxx cterm=underline ctermfg=15 ctermbg=12 gui=underline guifg=#eceff4 guibg=#5e81ac
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
Search         xxx ctermfg=0 ctermbg=6 guifg=#3b4252 guibg=#88c0d0
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
CurSearch      xxx cleared
MoreMsg        xxx ctermfg=6 gui=bold guifg=#88c0d0
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
ModeMsg        xxx cterm=bold gui=bold guifg=#d8dee9
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
LineNr         xxx ctermfg=8 guifg=#4c566a
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
LineNrAbove    xxx links to LineNr
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 9
LineNrBelow    xxx links to LineNr
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 9
CursorLineNr   xxx guifg=#d8dee9
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
CursorLineSign xxx links to SignColumn
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 9
CursorLineFold xxx links to FoldColumn
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 9
Question       xxx gui=bold guifg=#d8dee9
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
StatusLine     xxx ctermfg=6 ctermbg=8 guifg=#88c0d0 guibg=#4c566a
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
StatusLineNC   xxx ctermbg=0 guifg=#d8dee9 guibg=#3b4252
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
WinSeparator   xxx links to VertSplit
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 9
VertSplit      xxx ctermfg=8 guifg=#434c5e guibg=#2e3440
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
Title          xxx guifg=#d8dee9
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
Visual         xxx ctermbg=0 guibg=Grey30
	Last set from ~/dotfiles/.config/nvim/settings/user/appearance.vim line 8
VisualNC       xxx cleared
WarningMsg     xxx ctermfg=0 ctermbg=3 guifg=#2e3440 guibg=#ebcb8b
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
WildMenu       xxx ctermfg=6 ctermbg=0 guifg=#88c0d0 guibg=#3b4252
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
Folded         xxx cterm=bold ctermfg=8 ctermbg=0 gui=bold guifg=#4c566a guibg=#3b4252
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
FoldColumn     xxx ctermfg=8 guifg=#4c566a guibg=#2e3440
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
DiffAdd        xxx cterm=reverse ctermfg=2 gui=reverse guifg=#a3be8c guibg=#2e3440
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
DiffChange     xxx cterm=reverse ctermfg=3 gui=reverse guifg=#ebcb8b guibg=#2e3440
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
DiffDelete     xxx cterm=reverse ctermfg=1 gui=reverse guifg=#bf616a guibg=#2e3440
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
DiffText       xxx cterm=reverse ctermfg=4 gui=reverse guifg=#81a1c1 guibg=#2e3440
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
SignColumn     xxx ctermfg=0 guifg=#3b4252
	Last set from ~/dotfiles/.config/nvim/settings/user/appearance.vim line 10
Conceal        xxx ctermfg=7 guifg=LightGrey
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
SpellBad       xxx cterm=underline ctermfg=1 gui=undercurl guifg=#bf616a guibg=#2e3440 guisp=#bf616a
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
SpellCap       xxx cterm=underline ctermfg=3 gui=undercurl guifg=#ebcb8b guibg=#2e3440 guisp=#ebcb8b
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
SpellRare      xxx cterm=underline ctermfg=15 gui=undercurl guifg=#eceff4 guibg=#2e3440 guisp=#eceff4
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
SpellLocal     xxx cterm=underline ctermfg=7 gui=undercurl guifg=#e5e9f0 guibg=#2e3440 guisp=#e5e9f0
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
Pmenu          xxx ctermbg=0 guifg=#d8dee9 guibg=#434c5e
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
PmenuSel       xxx ctermfg=6 ctermbg=8 guifg=#88c0d0 guibg=#4c566a
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
PmenuSbar      xxx ctermbg=0 guifg=#d8dee9 guibg=#434c5e
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
PmenuThumb     xxx ctermbg=8 guifg=#88c0d0 guibg=#4c566a
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
TabLine        xxx ctermbg=0 guifg=#d8dee9 guibg=#3b4252
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
TabLineSel     xxx ctermfg=6 ctermbg=8 guifg=#88c0d0 guibg=#4c566a
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
TabLineFill    xxx ctermbg=0 guifg=#d8dee9 guibg=#3b4252
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
CursorColumn   xxx ctermbg=0 guibg=#3b4252
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
CursorLine     xxx ctermbg=0 guibg=#3b4252
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
ColorColumn    xxx ctermbg=0 guibg=#3b4252
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
QuickFixLine   xxx links to Search
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 9
Whitespace     xxx links to NonText
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 9
NormalNC       xxx cleared
MsgSeparator   xxx links to StatusLine
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 9
NormalFloat    xxx links to Pmenu
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 9
MsgArea        xxx cleared
FloatBorder    xxx links to WinSeparator
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 9
WinBar         xxx cterm=bold gui=bold
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 11
WinBarNC       xxx links to WinBar
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 9
Cursor         xxx guifg=#2e3440 guibg=#d8dee9
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
lCursor        xxx guifg=bg guibg=fg
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 11
Normal         xxx guifg=#d8dee9
	Last set from ~/dotfiles/.config/nvim/settings/user/appearance.vim line 9
Substitute     xxx links to Search
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 9
FloatShadow    xxx guibg=Black blend=80
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 9
FloatShadowThrough xxx guibg=Black blend=100
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 9
RedrawDebugNormal xxx cterm=reverse gui=reverse
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 11
RedrawDebugClear xxx ctermbg=11 guibg=Yellow
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 11
RedrawDebugComposed xxx ctermbg=10 guibg=Green
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 11
RedrawDebugRecompose xxx ctermbg=9 guibg=Red
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 11
Error          xxx ctermfg=15 ctermbg=1 guifg=#d8dee9 guibg=#bf616a
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
Todo           xxx ctermfg=3 guifg=#ebcb8b
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
String         xxx ctermfg=2 guifg=#a3be8c
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
Constant       xxx guifg=#d8dee9
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
Character      xxx ctermfg=2 guifg=#a3be8c
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
Number         xxx ctermfg=5 guifg=#b48ead
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
Boolean        xxx ctermfg=4 guifg=#81a1c1
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
Float          xxx ctermfg=5 guifg=#b48ead
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
Function       xxx ctermfg=6 guifg=#88c0d0
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
Identifier     xxx guifg=#d8dee9
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
Conditional    xxx ctermfg=4 guifg=#81a1c1
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
Statement      xxx ctermfg=4 gui=bold guifg=#81a1c1
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
Repeat         xxx ctermfg=4 guifg=#81a1c1
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
Label          xxx ctermfg=4 guifg=#81a1c1
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
Operator       xxx ctermfg=4 guifg=#81a1c1
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
Keyword        xxx ctermfg=4 guifg=#81a1c1
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
Exception      xxx ctermfg=4 guifg=#81a1c1
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
Include        xxx ctermfg=4 guifg=#81a1c1
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
PreProc        xxx ctermfg=4 guifg=#81a1c1
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
Define         xxx ctermfg=4 guifg=#81a1c1
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
Macro          xxx links to Define
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 292
PreCondit      xxx links to PreProc
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 9
StorageClass   xxx ctermfg=4 guifg=#81a1c1
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
Type           xxx ctermfg=4 guifg=#81a1c1
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
Structure      xxx ctermfg=4 guifg=#81a1c1
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
Typedef        xxx ctermfg=4 guifg=#81a1c1
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
Tag            xxx guifg=#d8dee9
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
Special        xxx guifg=#d8dee9
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
SpecialChar    xxx ctermfg=3 guifg=#ebcb8b
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
Delimiter      xxx ctermfg=15 guifg=#eceff4
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
SpecialComment xxx ctermfg=6 guifg=#88c0d0
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
Debug          xxx links to Special
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 9
DiagnosticError xxx ctermfg=1 guifg=#bf616a
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
DiagnosticWarn xxx ctermfg=3 guifg=#ebcb8b
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
DiagnosticInfo xxx ctermfg=6 guifg=#88c0d0
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
DiagnosticHint xxx ctermfg=12 guifg=#5e81ac
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
DiagnosticUnderlineError xxx cterm=underline ctermfg=1 gui=undercurl guifg=#bf616a guisp=Red
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
DiagnosticUnderlineWarn xxx cterm=underline ctermfg=3 gui=undercurl guifg=#ebcb8b guisp=Orange
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
DiagnosticUnderlineInfo xxx cterm=underline ctermfg=6 gui=undercurl guifg=#88c0d0 guisp=LightBlue
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
DiagnosticUnderlineHint xxx cterm=underline ctermfg=12 gui=undercurl guifg=#5e81ac guisp=LightGrey
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
DiagnosticVirtualTextError xxx links to DiagnosticError
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 9
DiagnosticVirtualTextWarn xxx links to DiagnosticWarn
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 9
DiagnosticVirtualTextInfo xxx links to DiagnosticInfo
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 9
DiagnosticVirtualTextHint xxx links to DiagnosticHint
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 9
DiagnosticFloatingError xxx links to DiagnosticError
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 9
DiagnosticFloatingWarn xxx links to DiagnosticWarn
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 9
DiagnosticFloatingInfo xxx links to DiagnosticInfo
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 9
DiagnosticFloatingHint xxx links to DiagnosticHint
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 9
DiagnosticSignError xxx links to DiagnosticError
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 9
DiagnosticSignWarn xxx links to DiagnosticWarn
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 9
DiagnosticSignInfo xxx links to DiagnosticInfo
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 9
DiagnosticSignHint xxx links to DiagnosticHint
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 9
@text          xxx links to TSText
	Last set from Lua
@text.underline xxx links to TSUnderline
	Last set from Lua
Underlined     xxx cterm=underline ctermfg=81 gui=underline guifg=#80a0ff
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 11
@todo          xxx links to TSTodo
	Last set from Lua
@debug         xxx links to TSDebug
	Last set from Lua
@comment       xxx links to TSComment
	Last set from Lua
Comment        xxx ctermfg=8 guifg=#616e88
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
@punctuation   xxx links to Delimiter
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 9
@constant      xxx links to TSConstant
	Last set from Lua
@constant.builtin xxx links to TSConstBuiltin
	Last set from Lua
@constant.macro xxx links to TSConstMacro
	Last set from Lua
@define        xxx links to TSDefine
	Last set from Lua
@macro         xxx links to Macro
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 9
@string        xxx links to TSString
	Last set from Lua
@string.escape xxx links to TSStringEscape
	Last set from Lua
@character     xxx links to TSCharacter
	Last set from Lua
@character.special xxx links to TSCharacterSpecial
	Last set from Lua
@number        xxx links to TSNumber
	Last set from Lua
@boolean       xxx links to TSBoolean
	Last set from Lua
@float         xxx links to TSFloat
	Last set from Lua
@function      xxx links to TSFunction
	Last set from Lua
@function.builtin xxx links to TSFuncBuiltin
	Last set from Lua
@function.macro xxx links to TSFuncMacro
	Last set from Lua
@parameter     xxx links to TSParameter
	Last set from Lua
@method        xxx links to TSMethod
	Last set from Lua
@field         xxx links to TSField
	Last set from Lua
@property      xxx links to TSProperty
	Last set from Lua
@constructor   xxx links to TSConstructor
	Last set from Lua
@conditional   xxx links to TSConditional
	Last set from Lua
@repeat        xxx links to TSRepeat
	Last set from Lua
@label         xxx links to TSLabel
	Last set from Lua
@operator      xxx links to TSOperator
	Last set from Lua
@keyword       xxx links to TSKeyword
	Last set from Lua
@exception     xxx links to TSException
	Last set from Lua
@type          xxx links to TSType
	Last set from Lua
@type.definition xxx links to TSTypeDefinition
	Last set from Lua
@storageclass  xxx links to TSStorageClass
	Last set from Lua
@structure     xxx links to Structure
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 9
@include       xxx links to TSInclude
	Last set from Lua
@preproc       xxx links to TSPreProc
	Last set from Lua
MatchParen     xxx ctermfg=6 ctermbg=8 guifg=#88c0d0 guibg=#4c566a
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
Ignore         xxx ctermfg=0 guifg=bg
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 11
NvimInternalError xxx ctermfg=9 ctermbg=9 guifg=Red guibg=Red
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 11
NvimAssignment xxx links to Operator
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 9
NvimPlainAssignment xxx links to NvimAssignment
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 9
NvimAugmentedAssignment xxx links to NvimAssignment
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 9
NvimAssignmentWithAddition xxx links to NvimAugmentedAssignment
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 9
NvimAssignmentWithSubtraction xxx links to NvimAugmentedAssignment
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 9
NvimAssignmentWithConcatenation xxx links to NvimAugmentedAssignment
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 9
NvimOperator   xxx links to Operator
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 9
NvimUnaryOperator xxx links to NvimOperator
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 9
NvimUnaryPlus  xxx links to NvimUnaryOperator
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 9
NvimUnaryMinus xxx links to NvimUnaryOperator
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 9
NvimNot        xxx links to NvimUnaryOperator
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 9
NvimBinaryOperator xxx links to NvimOperator
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 9
NvimComparison xxx links to NvimBinaryOperator
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 9
NvimComparisonModifier xxx links to NvimComparison
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 9
NvimBinaryPlus xxx links to NvimBinaryOperator
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 9
NvimBinaryMinus xxx links to NvimBinaryOperator
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 9
NvimConcat     xxx links to NvimBinaryOperator
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 9
NvimConcatOrSubscript xxx links to NvimConcat
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 9
NvimOr         xxx links to NvimBinaryOperator
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 9
NvimAnd        xxx links to NvimBinaryOperator
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 9
NvimMultiplication xxx links to NvimBinaryOperator
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 9
NvimDivision   xxx links to NvimBinaryOperator
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 9
NvimMod        xxx links to NvimBinaryOperator
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 9
NvimTernary    xxx links to NvimOperator
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 9
NvimTernaryColon xxx links to NvimTernary
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 9
NvimParenthesis xxx links to Delimiter
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 9
NvimLambda     xxx links to NvimParenthesis
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 9
NvimNestingParenthesis xxx links to NvimParenthesis
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 9
NvimCallingParenthesis xxx links to NvimParenthesis
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 9
NvimSubscript  xxx links to NvimParenthesis
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 9
NvimSubscriptBracket xxx links to NvimSubscript
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 9
NvimSubscriptColon xxx links to NvimSubscript
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 9
NvimCurly      xxx links to NvimSubscript
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 9
NvimContainer  xxx links to NvimParenthesis
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 9
NvimDict       xxx links to NvimContainer
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 9
NvimList       xxx links to NvimContainer
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 9
NvimIdentifier xxx links to Identifier
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 9
NvimIdentifierScope xxx links to NvimIdentifier
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 9
NvimIdentifierScopeDelimiter xxx links to NvimIdentifier
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 9
NvimIdentifierName xxx links to NvimIdentifier
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 9
NvimIdentifierKey xxx links to NvimIdentifier
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 9
NvimColon      xxx links to Delimiter
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 9
NvimComma      xxx links to Delimiter
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 9
NvimArrow      xxx links to Delimiter
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 9
NvimRegister   xxx links to SpecialChar
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 9
NvimNumber     xxx links to Number
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 9
NvimFloat      xxx links to NvimNumber
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 9
NvimNumberPrefix xxx links to Type
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 9
NvimOptionSigil xxx links to Type
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 9
NvimOptionName xxx links to NvimIdentifier
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 9
NvimOptionScope xxx links to NvimIdentifierScope
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 9
NvimOptionScopeDelimiter xxx links to NvimIdentifierScopeDelimiter
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 9
NvimEnvironmentSigil xxx links to NvimOptionSigil
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 9
NvimEnvironmentName xxx links to NvimIdentifier
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 9
NvimString     xxx links to String
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 9
NvimStringBody xxx links to NvimString
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 9
NvimStringQuote xxx links to NvimString
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 9
NvimStringSpecial xxx links to SpecialChar
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 9
NvimSingleQuote xxx links to NvimStringQuote
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 9
NvimSingleQuotedBody xxx links to NvimStringBody
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 9
NvimSingleQuotedQuote xxx links to NvimStringSpecial
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 9
NvimDoubleQuote xxx links to NvimStringQuote
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 9
NvimDoubleQuotedBody xxx links to NvimStringBody
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 9
NvimDoubleQuotedEscape xxx links to NvimStringSpecial
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 9
NvimFigureBrace xxx links to NvimInternalError
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 9
NvimSingleQuotedUnknownEscape xxx links to NvimInternalError
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 9
NvimSpacing    xxx links to Normal
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 9
NvimInvalidSingleQuotedUnknownEscape xxx links to NvimInternalError
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 9
NvimInvalid    xxx links to Error
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 9
NvimInvalidAssignment xxx links to NvimInvalid
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 9
NvimInvalidPlainAssignment xxx links to NvimInvalidAssignment
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 9
NvimInvalidAugmentedAssignment xxx links to NvimInvalidAssignment
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 9
NvimInvalidAssignmentWithAddition xxx links to NvimInvalidAugmentedAssignment
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 9
NvimInvalidAssignmentWithSubtraction xxx links to NvimInvalidAugmentedAssignment
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 9
NvimInvalidAssignmentWithConcatenation xxx links to NvimInvalidAugmentedAssignment
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 9
NvimInvalidOperator xxx links to NvimInvalid
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 9
NvimInvalidUnaryOperator xxx links to NvimInvalidOperator
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 9
NvimInvalidUnaryPlus xxx links to NvimInvalidUnaryOperator
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 9
NvimInvalidUnaryMinus xxx links to NvimInvalidUnaryOperator
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 9
NvimInvalidNot xxx links to NvimInvalidUnaryOperator
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 9
NvimInvalidBinaryOperator xxx links to NvimInvalidOperator
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 9
NvimInvalidComparison xxx links to NvimInvalidBinaryOperator
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 9
NvimInvalidComparisonModifier xxx links to NvimInvalidComparison
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 9
NvimInvalidBinaryPlus xxx links to NvimInvalidBinaryOperator
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 9
NvimInvalidBinaryMinus xxx links to NvimInvalidBinaryOperator
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 9
NvimInvalidConcat xxx links to NvimInvalidBinaryOperator
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 9
NvimInvalidConcatOrSubscript xxx links to NvimInvalidConcat
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 9
NvimInvalidOr  xxx links to NvimInvalidBinaryOperator
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 9
NvimInvalidAnd xxx links to NvimInvalidBinaryOperator
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 9
NvimInvalidMultiplication xxx links to NvimInvalidBinaryOperator
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 9
NvimInvalidDivision xxx links to NvimInvalidBinaryOperator
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 9
NvimInvalidMod xxx links to NvimInvalidBinaryOperator
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 9
NvimInvalidTernary xxx links to NvimInvalidOperator
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 9
NvimInvalidTernaryColon xxx links to NvimInvalidTernary
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 9
NvimInvalidDelimiter xxx links to NvimInvalid
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 9
NvimInvalidParenthesis xxx links to NvimInvalidDelimiter
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 9
NvimInvalidLambda xxx links to NvimInvalidParenthesis
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 9
NvimInvalidNestingParenthesis xxx links to NvimInvalidParenthesis
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 9
NvimInvalidCallingParenthesis xxx links to NvimInvalidParenthesis
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 9
NvimInvalidSubscript xxx links to NvimInvalidParenthesis
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 9
NvimInvalidSubscriptBracket xxx links to NvimInvalidSubscript
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 9
NvimInvalidSubscriptColon xxx links to NvimInvalidSubscript
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 9
NvimInvalidCurly xxx links to NvimInvalidSubscript
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 9
NvimInvalidContainer xxx links to NvimInvalidParenthesis
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 9
NvimInvalidDict xxx links to NvimInvalidContainer
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 9
NvimInvalidList xxx links to NvimInvalidContainer
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 9
NvimInvalidValue xxx links to NvimInvalid
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 9
NvimInvalidIdentifier xxx links to NvimInvalidValue
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 9
NvimInvalidIdentifierScope xxx links to NvimInvalidIdentifier
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 9
NvimInvalidIdentifierScopeDelimiter xxx links to NvimInvalidIdentifier
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 9
NvimInvalidIdentifierName xxx links to NvimInvalidIdentifier
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 9
NvimInvalidIdentifierKey xxx links to NvimInvalidIdentifier
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 9
NvimInvalidColon xxx links to NvimInvalidDelimiter
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 9
NvimInvalidComma xxx links to NvimInvalidDelimiter
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 9
NvimInvalidArrow xxx links to NvimInvalidDelimiter
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 9
NvimInvalidRegister xxx links to NvimInvalidValue
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 9
NvimInvalidNumber xxx links to NvimInvalidValue
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 9
NvimInvalidFloat xxx links to NvimInvalidNumber
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 9
NvimInvalidNumberPrefix xxx links to NvimInvalidNumber
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 9
NvimInvalidOptionSigil xxx links to NvimInvalidIdentifier
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 9
NvimInvalidOptionName xxx links to NvimInvalidIdentifier
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 9
NvimInvalidOptionScope xxx links to NvimInvalidIdentifierScope
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 9
NvimInvalidOptionScopeDelimiter xxx links to NvimInvalidIdentifierScopeDelimiter
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 9
NvimInvalidEnvironmentSigil xxx links to NvimInvalidOptionSigil
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 9
NvimInvalidEnvironmentName xxx links to NvimInvalidIdentifier
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 9
NvimInvalidString xxx links to NvimInvalidValue
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 9
NvimInvalidStringBody xxx links to NvimStringBody
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 9
NvimInvalidStringQuote xxx links to NvimInvalidString
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 9
NvimInvalidStringSpecial xxx links to NvimStringSpecial
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 9
NvimInvalidSingleQuote xxx links to NvimInvalidStringQuote
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 9
NvimInvalidSingleQuotedBody xxx links to NvimInvalidStringBody
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 9
NvimInvalidSingleQuotedQuote xxx links to NvimInvalidStringSpecial
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 9
NvimInvalidDoubleQuote xxx links to NvimInvalidStringQuote
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 9
NvimInvalidDoubleQuotedBody xxx links to NvimInvalidStringBody
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 9
NvimInvalidDoubleQuotedEscape xxx links to NvimInvalidStringSpecial
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 9
NvimInvalidDoubleQuotedUnknownEscape xxx links to NvimInvalidValue
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 9
NvimInvalidFigureBrace xxx links to NvimInvalidDelimiter
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 9
NvimInvalidSpacing xxx links to ErrorMsg
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 9
NvimDoubleQuotedUnknownEscape xxx links to NvimInvalidValue
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 9
ConflictMarkerBegin xxx cleared
ConflictMarkerOurs xxx cleared
ConflictMarkerTheirs xxx cleared
ConflictMarkerEnd xxx cleared
ConflictMarkerCommonAncestorsHunk xxx cleared
cStatement     xxx links to Statement
	Last set from /opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax/c.vim line 493
cLabel         xxx links to Label
	Last set from /opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax/c.vim line 464
cConditional   xxx links to Conditional
	Last set from /opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax/c.vim line 466
cRepeat        xxx links to Repeat
	Last set from /opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax/c.vim line 467
cTodo          xxx links to Todo
	Last set from /opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax/c.vim line 506
cBadContinuation xxx links to Error
	Last set from /opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax/c.vim line 507
cSpecial       xxx links to SpecialChar
	Last set from /opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax/c.vim line 505
cFormat        xxx links to cSpecial
	Last set from /opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax/c.vim line 460
cString        xxx links to String
	Last set from /opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax/c.vim line 503
cCppString     xxx links to cString
	Last set from /opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax/c.vim line 461
cSpaceError    xxx links to cError
	Last set from /opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax/c.vim line 480
cCppSkip       xxx cleared
cCharacter     xxx links to Character
	Last set from /opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax/c.vim line 468
cSpecialError  xxx links to cError
	Last set from /opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax/c.vim line 482
cSpecialCharacter xxx links to cSpecial
	Last set from /opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax/c.vim line 469
cBadBlock      xxx cleared
cCurlyError    xxx links to cError
	Last set from /opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax/c.vim line 483
cErrInParen    xxx links to cError
	Last set from /opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax/c.vim line 476
cCppParen      xxx cleared
cErrInBracket  xxx links to cError
	Last set from /opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax/c.vim line 477
cCppBracket    xxx cleared
cBlock         xxx cleared
cParenError    xxx links to cError
	Last set from /opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax/c.vim line 475
cIncluded      xxx ctermfg=14 guifg=#8fbcbb
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
cCommentSkip   xxx links to cComment
	Last set from /opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax/c.vim line 502
cCommentString xxx links to cString
	Last set from /opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax/c.vim line 500
cComment2String xxx links to cString
	Last set from /opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax/c.vim line 501
cCommentStartError xxx links to cError
	Last set from /opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax/c.vim line 479
cUserLabel     xxx links to Label
	Last set from /opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax/c.vim line 465
cBitField      xxx cleared
cOctalZero     xxx links to PreProc
	Last set from /opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax/c.vim line 472
cNumber        xxx links to Number
	Last set from /opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax/c.vim line 470
cFloat         xxx links to Float
	Last set from /opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax/c.vim line 473
cOctal         xxx links to Number
	Last set from /opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax/c.vim line 471
cOctalError    xxx links to cError
	Last set from /opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax/c.vim line 474
cNumbersCom    xxx cleared
cParen         xxx cleared
cBracket       xxx cleared
cNumbers       xxx cleared
cWrongComTail  xxx links to cError
	Last set from /opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax/c.vim line 481
cCommentL      xxx links to cComment
	Last set from /opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax/c.vim line 462
cCommentStart  xxx links to cComment
	Last set from /opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax/c.vim line 463
cComment       xxx links to Comment
	Last set from /opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax/c.vim line 504
cCommentError  xxx links to cError
	Last set from /opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax/c.vim line 478
cOperator      xxx links to Operator
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 338
cType          xxx links to Type
	Last set from /opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax/c.vim line 498
cTypedef       xxx links to Structure
	Last set from /opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax/c.vim line 486
cStructure     xxx links to Structure
	Last set from /opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax/c.vim line 485
cStorageClass  xxx links to StorageClass
	Last set from /opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax/c.vim line 487
cConstant      xxx links to Type
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 340
cPreCondit     xxx links to PreCondit
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 339
cPreConditMatch xxx links to cPreCondit
	Last set from /opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax/c.vim line 496
cCppInIf       xxx cleared
cCppInElse     xxx cleared
cCppInElse2    xxx links to cCppOutIf2
	Last set from /opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax/c.vim line 509
cCppOutIf      xxx cleared
cCppOutIf2     xxx links to cCppOut
	Last set from /opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax/c.vim line 510
cCppOutElse    xxx cleared
cCppInSkip     xxx cleared
cCppOutSkip    xxx links to cCppOutIf2
	Last set from /opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax/c.vim line 508
cCppOutWrapper xxx links to cPreCondit
	Last set from /opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax/c.vim line 495
cCppInWrapper  xxx links to cCppOutWrapper
	Last set from /opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax/c.vim line 494
cPreProc       xxx links to PreProc
	Last set from /opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax/c.vim line 489
cInclude       xxx links to Include
	Last set from /opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax/c.vim line 488
cDefine        xxx links to Macro
	Last set from /opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax/c.vim line 490
cMulti         xxx cleared
cPragma        xxx cleared
cUserCont      xxx cleared
cError         xxx links to Error
	Last set from /opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax/c.vim line 492
cCppOut        xxx links to Comment
	Last set from /opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax/c.vim line 511
cppStatement   xxx links to Statement
	Last set from /opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax/cpp.vim line 110
cppAccess      xxx links to cppStatement
	Last set from /opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax/cpp.vim line 106
cppModifier    xxx links to Type
	Last set from /opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax/cpp.vim line 111
cppType        xxx links to Type
	Last set from /opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax/cpp.vim line 112
cppExceptions  xxx links to Exception
	Last set from /opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax/cpp.vim line 108
cppOperator    xxx links to Operator
	Last set from /opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax/cpp.vim line 109
cppCast        xxx links to cppStatement
	Last set from /opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax/cpp.vim line 107
cppStorageClass xxx links to StorageClass
	Last set from /opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax/cpp.vim line 113
cppStructure   xxx links to Structure
	Last set from /opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax/cpp.vim line 114
cppBoolean     xxx links to Boolean
	Last set from /opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax/cpp.vim line 115
cppConstant    xxx links to Constant
	Last set from /opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax/cpp.vim line 119
cppRawStringDelimiter xxx links to Delimiter
	Last set from /opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax/cpp.vim line 120
cppRawString   xxx links to String
	Last set from /opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax/cpp.vim line 121
cppNumber      xxx links to Number
	Last set from /opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax/cpp.vim line 123
cppFloat       xxx links to Number
	Last set from /opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax/cpp.vim line 124
cppNumbers     xxx cleared
cppString      xxx links to String
	Last set from /opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax/cpp.vim line 122
cppCharacter   xxx links to cCharacter
	Last set from /opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax/cpp.vim line 116
cppSpecialError xxx links to cSpecialError
	Last set from /opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax/cpp.vim line 118
cppSpecialCharacter xxx links to cSpecialCharacter
	Last set from /opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax/cpp.vim line 117
cppModule      xxx links to Include
	Last set from /opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax/cpp.vim line 125
cppMinMax      xxx cleared
Bold           xxx cterm=bold gui=bold
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
Underline      xxx cterm=underline gui=underline
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
iCursor        xxx guifg=#2e3440 guibg=#d8dee9
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
VisualNOS      xxx ctermbg=0 guibg=#434c5e
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
healthError    xxx ctermfg=1 ctermbg=0 guifg=#bf616a guibg=#3b4252
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
healthSuccess  xxx ctermfg=2 ctermbg=0 guifg=#a3be8c guibg=#3b4252
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
healthWarning  xxx ctermfg=3 ctermbg=0 guifg=#ebcb8b guibg=#3b4252
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
LspReferenceText xxx ctermbg=8 guibg=#4c566a
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
LspReferenceRead xxx ctermbg=8 guibg=#4c566a
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
LspReferenceWrite xxx ctermbg=8 guibg=#4c566a
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
LspSignatureActiveParameter xxx cterm=underline ctermfg=6 gui=underline guifg=#88c0d0
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
StatusLineTerm xxx ctermfg=6 ctermbg=8 guifg=#88c0d0 guibg=#4c566a
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
StatusLineTermNC xxx ctermbg=0 guifg=#d8dee9 guibg=#3b4252
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
Decorator      xxx ctermfg=11 guifg=#d08770
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
Annotation     xxx links to Decorator
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 291
Variable       xxx links to Identifier
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 294
asciidocAttributeEntry xxx ctermfg=12 guifg=#5e81ac
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
asciidocAttributeList xxx ctermfg=12 guifg=#5e81ac
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
asciidocAttributeRef xxx ctermfg=12 guifg=#5e81ac
                   links to markdownH1
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 310
asciidocHLabel xxx ctermfg=4 guifg=#81a1c1
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
asciidocListingBlock xxx ctermfg=14 guifg=#8fbcbb
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
asciidocMacroAttributes xxx ctermfg=6 guifg=#88c0d0
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
asciidocOneLineTitle xxx ctermfg=6 guifg=#88c0d0
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
asciidocPassthroughBlock xxx ctermfg=4 guifg=#81a1c1
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
asciidocQuotedMonospaced xxx ctermfg=14 guifg=#8fbcbb
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
asciidocTriplePlusPassthrough xxx ctermfg=14 guifg=#8fbcbb
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
asciidocAdmonition xxx links to Keyword
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 309
markdownH1     xxx ctermfg=6 guifg=#88c0d0
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
asciidocBackslash xxx links to Keyword
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 311
asciidocMacro  xxx links to Keyword
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 312
asciidocQuotedBold xxx links to Bold
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 313
asciidocQuotedEmphasized xxx links to Italic
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 314
Italic         xxx cleared
asciidocQuotedMonospaced2 xxx links to asciidocQuotedMonospaced
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 315
asciidocQuotedUnconstrainedBold xxx links to asciidocQuotedBold
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 316
asciidocQuotedUnconstrainedEmphasized xxx links to asciidocQuotedEmphasized
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 317
asciidocURL    xxx links to markdownLinkText
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 318
markdownLinkText xxx ctermfg=6 guifg=#88c0d0
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
awkCharClass   xxx ctermfg=14 guifg=#8fbcbb
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
awkPatterns    xxx cterm=bold ctermfg=4 gui=bold guifg=#81a1c1
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
awkArrayElement xxx links to Identifier
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 322
awkBoolLogic   xxx links to Keyword
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 323
awkBrktRegExp  xxx links to SpecialChar
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 324
awkComma       xxx links to Delimiter
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 325
awkExpression  xxx links to Keyword
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 326
awkFieldVars   xxx links to Identifier
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 327
awkLineSkip    xxx links to Keyword
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 328
awkOperator    xxx links to Operator
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 329
awkRegExp      xxx links to SpecialChar
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 330
awkSearch      xxx links to Keyword
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 331
awkSemicolon   xxx links to Delimiter
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 332
awkSpecialCharacter xxx links to SpecialChar
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 333
awkSpecialPrintf xxx links to SpecialChar
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 334
awkVariables   xxx links to Identifier
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 335
cmakeGeneratorExpression xxx ctermfg=12 guifg=#5e81ac
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
csPreCondit    xxx links to PreCondit
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 344
csType         xxx links to Type
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 345
csXmlTag       xxx links to SpecialComment
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 346
cssAttributeSelector xxx ctermfg=14 guifg=#8fbcbb
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
cssDefinition  xxx ctermfg=14 guifg=#8fbcbb
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
cssIdentifier  xxx cterm=underline ctermfg=14 gui=underline guifg=#8fbcbb
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
cssStringQ     xxx ctermfg=14 guifg=#8fbcbb
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
cssAttr        xxx links to Keyword
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 352
cssBraces      xxx links to Delimiter
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 353
cssClassName   xxx links to cssDefinition
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 354
cssColor       xxx links to Number
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 355
cssProp        xxx links to cssDefinition
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 356
cssPseudoClass xxx links to cssDefinition
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 357
cssPseudoClassId xxx links to cssPseudoClass
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 358
cssVendor      xxx links to Keyword
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 359
dosiniHeader   xxx ctermfg=6 guifg=#88c0d0
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
dosiniLabel    xxx links to Type
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 362
dtBooleanKey   xxx ctermfg=14 guifg=#8fbcbb
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
dtExecKey      xxx ctermfg=14 guifg=#8fbcbb
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
dtLocaleKey    xxx ctermfg=14 guifg=#8fbcbb
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
dtNumericKey   xxx ctermfg=14 guifg=#8fbcbb
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
dtTypeKey      xxx ctermfg=14 guifg=#8fbcbb
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
dtDelim        xxx links to Delimiter
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 369
dtLocaleValue  xxx links to Keyword
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 370
dtTypeValue    xxx links to Keyword
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 371
diffAdded      xxx links to DiffAdd
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 385
diffChanged    xxx links to DiffChange
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 386
diffRemoved    xxx links to DiffDelete
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 387
gitconfigVariable xxx ctermfg=14 guifg=#8fbcbb
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
goBuiltins     xxx ctermfg=14 guifg=#8fbcbb
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
goConstants    xxx links to Keyword
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 392
helpBar        xxx ctermfg=8 guifg=#4c566a
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
helpHyperTextJump xxx cterm=underline ctermfg=6 gui=underline guifg=#88c0d0
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
htmlArg        xxx ctermfg=14 guifg=#8fbcbb
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
htmlLink       xxx guifg=#d8dee9
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
htmlBold       xxx links to Bold
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 399
htmlEndTag     xxx links to htmlTag
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 400
htmlTag        xxx links to Keyword
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 409
htmlItalic     xxx links to Italic
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 401
htmlH1         xxx links to markdownH1
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 402
htmlH2         xxx links to markdownH1
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 403
htmlH3         xxx links to markdownH1
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 404
htmlH4         xxx links to markdownH1
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 405
htmlH5         xxx links to markdownH1
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 406
htmlH6         xxx links to markdownH1
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 407
htmlSpecialChar xxx links to SpecialChar
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 408
htmlTagN       xxx links to htmlTag
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 410
javaDocTags    xxx ctermfg=14 guifg=#8fbcbb
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
javaCommentTitle xxx links to Comment
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 413
javaScriptBraces xxx links to Delimiter
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 414
javaScriptIdentifier xxx links to Keyword
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 415
javaScriptNumber xxx links to Number
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 416
jsonKeyword    xxx ctermfg=14 guifg=#8fbcbb
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
lessClass      xxx ctermfg=14 guifg=#8fbcbb
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
lessAmpersand  xxx links to Keyword
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 421
lessCssAttribute xxx links to Delimiter
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 422
lessFunction   xxx links to Function
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 423
cssSelectorOp  xxx links to Keyword
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 424
lispAtomBarSymbol xxx links to SpecialChar
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 426
lispAtomList   xxx links to SpecialChar
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 427
lispAtomMark   xxx links to Keyword
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 428
lispBarSymbol  xxx links to SpecialChar
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 429
lispFunc       xxx links to Function
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 430
luaFunc        xxx links to Function
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 432
markdownBlockquote xxx ctermfg=14 guifg=#8fbcbb
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
markdownCode   xxx ctermfg=14 guifg=#8fbcbb
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
markdownCodeDelimiter xxx ctermfg=14 guifg=#8fbcbb
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
markdownFootnote xxx ctermfg=14 guifg=#8fbcbb
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
markdownId     xxx ctermfg=14 guifg=#8fbcbb
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
markdownIdDeclaration xxx ctermfg=14 guifg=#8fbcbb
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
markdownUrl    xxx guifg=#d8dee9
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
markdownBold   xxx links to Bold
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 443
markdownBoldDelimiter xxx links to Keyword
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 444
markdownFootnoteDefinition xxx links to markdownFootnote
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 445
markdownH2     xxx links to markdownH1
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 446
markdownH3     xxx links to markdownH1
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 447
markdownH4     xxx links to markdownH1
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 448
markdownH5     xxx links to markdownH1
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 449
markdownH6     xxx links to markdownH1
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 450
markdownIdDelimiter xxx links to Keyword
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 451
markdownItalic xxx links to Italic
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 452
markdownItalicDelimiter xxx links to Keyword
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 453
markdownLinkDelimiter xxx links to Keyword
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 454
markdownLinkTextDelimiter xxx links to Keyword
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 455
markdownListMarker xxx links to Keyword
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 456
markdownRule   xxx links to Keyword
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 457
markdownHeadingDelimiter xxx links to Keyword
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 458
perlPackageDecl xxx ctermfg=14 guifg=#8fbcbb
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
phpClasses     xxx ctermfg=14 guifg=#8fbcbb
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
phpDocTags     xxx ctermfg=14 guifg=#8fbcbb
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
phpDocCustomTags xxx links to phpDocTags
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 464
phpMemberSelector xxx links to Keyword
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 465
podCmdText     xxx ctermfg=14 guifg=#8fbcbb
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
podVerbatimLine xxx guifg=#d8dee9
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
podFormat      xxx links to Keyword
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 469
pythonBuiltin  xxx links to Type
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 471
pythonEscape   xxx links to SpecialChar
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 472
rubyConstant   xxx ctermfg=14 guifg=#8fbcbb
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
rubySymbol     xxx cterm=bold ctermfg=15 gui=bold guifg=#eceff4
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
rubyAttribute  xxx links to Identifier
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 476
rubyBlockParameterList xxx links to Operator
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 477
rubyInterpolationDelimiter xxx links to Keyword
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 478
rubyKeywordAsMethod xxx links to Function
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 479
rubyLocalVariableOrMethod xxx links to Function
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 480
rubyPseudoVariable xxx links to Keyword
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 481
rubyRegexp     xxx links to SpecialChar
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 482
rustAttribute  xxx ctermfg=12 guifg=#5e81ac
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
rustEnum       xxx cterm=bold ctermfg=14 gui=bold guifg=#8fbcbb
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
rustMacro      xxx cterm=bold ctermfg=6 gui=bold guifg=#88c0d0
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
rustModPath    xxx ctermfg=14 guifg=#8fbcbb
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
rustPanic      xxx cterm=bold ctermfg=4 gui=bold guifg=#81a1c1
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
rustTrait      xxx ctermfg=14 guifg=#8fbcbb
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
rustCommentLineDoc xxx links to Comment
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 490
rustDerive     xxx links to rustAttribute
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 491
rustEnumVariant xxx links to rustEnum
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 492
rustEscape     xxx links to SpecialChar
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 493
rustQuestionMark xxx links to Keyword
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 494
sassClass      xxx ctermfg=14 guifg=#8fbcbb
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
sassId         xxx cterm=underline ctermfg=14 gui=underline guifg=#8fbcbb
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
sassAmpersand  xxx links to Keyword
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 498
sassClassChar  xxx links to Delimiter
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 499
sassControl    xxx links to Keyword
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 500
sassControlLine xxx links to Keyword
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 501
sassExtend     xxx links to Keyword
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 502
sassFor        xxx links to Keyword
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 503
sassFunctionDecl xxx links to Keyword
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 504
sassFunctionName xxx links to Function
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 505
sassidChar     xxx links to sassId
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 506
sassInclude    xxx links to SpecialChar
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 507
sassMixinName  xxx links to Function
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 508
sassMixing     xxx links to SpecialChar
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 509
sassReturn     xxx links to Keyword
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 510
shCmdParenRegion xxx links to Delimiter
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 512
shCmdSubRegion xxx links to Delimiter
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 513
shDerefSimple  xxx links to Identifier
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 514
shDerefVar     xxx links to Identifier
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 515
sqlKeyword     xxx links to Keyword
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 517
sqlSpecial     xxx links to Keyword
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 518
vimAugroup     xxx ctermfg=14 guifg=#8fbcbb
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
vimMapRhs      xxx ctermfg=14 guifg=#8fbcbb
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
vimNotation    xxx ctermfg=14 guifg=#8fbcbb
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
vimFunc        xxx links to Function
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 523
vimFunction    xxx links to Function
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 524
vimUserFunc    xxx links to Function
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 525
xmlAttrib      xxx ctermfg=14 guifg=#8fbcbb
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
xmlCdataStart  xxx cterm=bold ctermfg=8 gui=bold guifg=#616e88
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
xmlNamespace   xxx ctermfg=14 guifg=#8fbcbb
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
xmlAttribPunct xxx links to Delimiter
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 530
xmlCdata       xxx links to Comment
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 531
xmlCdataCdata  xxx links to xmlCdataStart
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 532
xmlCdataEnd    xxx links to xmlCdataStart
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 533
xmlEndTag      xxx links to xmlTagName
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 534
xmlTagName     xxx links to Keyword
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 536
xmlProcessingDelim xxx links to Keyword
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 535
yamlBlockMappingKey xxx ctermfg=14 guifg=#8fbcbb
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
yamlBool       xxx links to Keyword
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 539
yamlDocumentStart xxx links to Keyword
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 540
ALEWarningSign xxx ctermfg=3 guifg=#ebcb8b
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
ALEErrorSign   xxx ctermfg=1 guifg=#bf616a
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
ALEWarning     xxx cterm=underline ctermfg=3 gui=undercurl guifg=#ebcb8b
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
ALEError       xxx cterm=underline ctermfg=1 gui=undercurl guifg=#bf616a
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
CocWarningHighlight xxx cterm=underline ctermfg=3 gui=undercurl guifg=#ebcb8b
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
CocErrorHighlight xxx cterm=underline ctermfg=1 gui=undercurl guifg=#bf616a
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
CocWarningSign xxx ctermfg=3 guifg=#ebcb8b
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
CocErrorSign   xxx ctermfg=1 guifg=#bf616a
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
CocInfoSign    xxx ctermfg=6 guifg=#88c0d0
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
CocHintSign    xxx ctermfg=12 guifg=#5e81ac
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
LspCodeLens    xxx ctermfg=8 guifg=#616e88
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
LspDiagnosticsDefaultWarning xxx ctermfg=3 guifg=#ebcb8b
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
LspDiagnosticsDefaultError xxx ctermfg=1 guifg=#bf616a
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
LspDiagnosticsDefaultInformation xxx ctermfg=6 guifg=#88c0d0
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
LspDiagnosticsDefaultHint xxx ctermfg=12 guifg=#5e81ac
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
LspDiagnosticsUnderlineWarning xxx cterm=underline ctermfg=3 gui=undercurl guifg=#ebcb8b
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
LspDiagnosticsUnderlineError xxx cterm=underline ctermfg=1 gui=undercurl guifg=#bf616a
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
LspDiagnosticsUnderlineInformation xxx cterm=underline ctermfg=6 gui=undercurl guifg=#88c0d0
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
LspDiagnosticsUnderlineHint xxx cterm=underline ctermfg=12 gui=undercurl guifg=#5e81ac
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
GitSignsCurrentLineBlame xxx links to Comment
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 579
GitGutterAdd   xxx ctermfg=2 guifg=#a3be8c
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
GitGutterChange xxx ctermfg=3 guifg=#ebcb8b
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
GitGutterChangeDelete xxx ctermfg=1 guifg=#bf616a
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
GitGutterDelete xxx ctermfg=1 guifg=#bf616a
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
SignifySignAdd xxx ctermfg=2 guifg=#a3be8c
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
SignifySignChange xxx ctermfg=3 guifg=#ebcb8b
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
SignifySignChangeDelete xxx ctermfg=1 guifg=#bf616a
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
SignifySignDelete xxx ctermfg=1 guifg=#bf616a
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
Sneak          xxx links to Search
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 598
gitcommitDiscardedFile xxx ctermfg=1 guifg=#bf616a
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
gitcommitUntrackedFile xxx ctermfg=1 guifg=#bf616a
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
gitcommitSelectedFile xxx ctermfg=2 guifg=#a3be8c
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
jediFunction   xxx ctermbg=8 guifg=#d8dee9 guibg=#4c566a
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
jediFat        xxx cterm=bold,underline ctermfg=6 ctermbg=8 gui=bold,underline guifg=#88c0d0 guibg=#4c566a
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
NERDTreeExecFile xxx ctermfg=14 guifg=#8fbcbb
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
NERDTreeDirSlash xxx links to Keyword
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 613
NERDTreeHelp   xxx links to Comment
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 614
CtrlPMatch     xxx links to Keyword
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 618
CtrlPBufferHid xxx links to Normal
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 619
ClapDir        xxx guifg=#d8dee9
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
ClapDisplay    xxx ctermbg=0 guifg=#d8dee9 guibg=#3b4252
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
ClapFile       xxx guifg=#d8dee9
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
ClapMatches    xxx ctermfg=6 guifg=#88c0d0
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
ClapNoMatchesFound xxx ctermfg=3 guifg=#ebcb8b
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
ClapSelected   xxx cterm=bold ctermfg=14 gui=bold guifg=#8fbcbb
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
ClapSelectedSign xxx ctermfg=4 guifg=#81a1c1
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
ClapMatches1   xxx ctermfg=6 guifg=#88c0d0
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
ClapFuzzyMatches1 xxx ctermfg=6 guifg=#88c0d0
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
ClapMatches2   xxx ctermfg=4 guifg=#81a1c1
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
ClapFuzzyMatches2 xxx ctermfg=4 guifg=#81a1c1
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
ClapMatches3   xxx ctermfg=12 guifg=#5e81ac
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
ClapFuzzyMatches3 xxx ctermfg=12 guifg=#5e81ac
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
ClapMatches4   xxx ctermfg=6 guifg=#88c0d0
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
ClapFuzzyMatches4 xxx ctermfg=6 guifg=#88c0d0
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
ClapMatches5   xxx ctermfg=4 guifg=#81a1c1
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
ClapFuzzyMatches5 xxx ctermfg=4 guifg=#81a1c1
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
ClapMatches6   xxx ctermfg=12 guifg=#5e81ac
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
ClapFuzzyMatches6 xxx ctermfg=12 guifg=#5e81ac
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
ClapMatches7   xxx ctermfg=6 guifg=#88c0d0
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
ClapFuzzyMatches7 xxx ctermfg=6 guifg=#88c0d0
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
ClapMatches8   xxx ctermfg=4 guifg=#81a1c1
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
ClapFuzzyMatches8 xxx ctermfg=4 guifg=#81a1c1
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
ClapMatches9   xxx ctermfg=12 guifg=#5e81ac
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
ClapFuzzyMatches9 xxx ctermfg=12 guifg=#5e81ac
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
ClapMatches10  xxx ctermfg=6 guifg=#88c0d0
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
ClapFuzzyMatches10 xxx ctermfg=6 guifg=#88c0d0
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
ClapMatches11  xxx ctermfg=4 guifg=#81a1c1
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
ClapFuzzyMatches11 xxx ctermfg=4 guifg=#81a1c1
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
ClapMatches12  xxx ctermfg=12 guifg=#5e81ac
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
ClapFuzzyMatches12 xxx ctermfg=12 guifg=#5e81ac
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
ClapCurrentSelection xxx links to PmenuSel
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 641
ClapCurrentSelectionSign xxx links to ClapSelectedSign
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 642
ClapInput      xxx links to Pmenu
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 643
ClapPreview    xxx links to Pmenu
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 644
ClapProviderAbout xxx links to ClapDisplay
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 645
ClapProviderColon xxx links to Type
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 646
ClapProviderId xxx links to Type
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 647
IndentGuidesEven xxx ctermbg=0 guibg=#3b4252
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
IndentGuidesOdd xxx ctermbg=8 guibg=#434c5e
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
plugDeleted    xxx ctermbg=1 guifg=#bf616a
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
SignatureMarkText xxx ctermfg=6 guifg=#88c0d0
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
StartifyFile   xxx ctermfg=15 guifg=#eceff4
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
StartifyFooter xxx ctermfg=14 guifg=#8fbcbb
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
StartifyHeader xxx ctermfg=6 guifg=#88c0d0
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
StartifyNumber xxx ctermfg=14 guifg=#8fbcbb
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
StartifyPath   xxx ctermfg=6 guifg=#88c0d0
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
StartifyBracket xxx links to Delimiter
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 669
StartifySlash  xxx links to Normal
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 670
StartifySpecial xxx links to Comment
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 671
haskellPreProc xxx ctermfg=12 guifg=#5e81ac
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
haskellType    xxx ctermfg=14 guifg=#8fbcbb
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
haskellPragma  xxx links to haskellPreProc
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 678
jsGlobalNodeObjects xxx ctermfg=6 guifg=#88c0d0
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
jsBrackets     xxx links to Delimiter
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 683
jsFuncCall     xxx links to Function
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 684
jsFuncParens   xxx links to Delimiter
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 685
jsThis         xxx links to Keyword
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 686
jsNoise        xxx links to Delimiter
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 687
jsPrototype    xxx links to Keyword
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 688
jsRegexpString xxx links to SpecialChar
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 689
pandocDefinitionBlockTerm xxx ctermfg=14 guifg=#8fbcbb
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
pandocTableDelims xxx ctermfg=8 guifg=#4c566a
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
pandocAtxHeader xxx links to markdownH1
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 695
pandocBlockQuote xxx links to markdownBlockquote
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 696
pandocCiteAnchor xxx links to Operator
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 697
pandocCiteKey  xxx links to pandocReferenceLabel
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 698
pandocReferenceLabel xxx links to markdownLinkText
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 709
pandocDefinitionBlockMark xxx links to Operator
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 699
pandocEmphasis xxx links to markdownItalic
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 700
pandocFootnoteID xxx links to pandocReferenceLabel
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 701
pandocFootnoteIDHead xxx links to markdownLinkDelimiter
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 702
pandocFootnoteIDTail xxx links to pandocFootnoteIDHead
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 703
pandocGridTableDelims xxx links to pandocTableDelims
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 704
pandocGridTableHeader xxx links to pandocTableDelims
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 705
pandocOperator xxx links to Operator
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 706
pandocPipeTableDelims xxx links to pandocTableDelims
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 707
pandocReferenceDefinition xxx links to pandocReferenceLabel
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 708
pandocReferenceURL xxx links to markdownUrl
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 710
pandocSimpleTableHeader xxx links to pandocAtxHeader
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 711
pandocStrong   xxx links to markdownBold
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 712
pandocTableHeaderWord xxx links to pandocAtxHeader
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 713
pandocUListItemBullet xxx links to Operator
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 714
TSAnnotation   xxx links to Annotation
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 719
TSConstBuiltin xxx links to Constant
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 720
TSConstructor  xxx links to Function
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 721
TSEmphasis     xxx links to Italic
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 722
TSFuncBuiltin  xxx links to Function
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 723
TSFuncMacro    xxx links to Function
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 724
TSStringRegex  xxx links to SpecialChar
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 725
TSStrong       xxx links to Bold
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 726
TSStructure    xxx links to Structure
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 727
TSTagDelimiter xxx links to TSTag
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 728
TSTag          xxx links to Label
	Last set from Lua
TSUnderline    xxx cterm=underline gui=underline
	Last set from Lua
TSVariable     xxx links to Variable
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 730
TSVariableBuiltin xxx links to Keyword
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 731
typescriptBOMWindowMethod xxx ctermfg=6 guifg=#88c0d0
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
typescriptClassName xxx ctermfg=14 guifg=#8fbcbb
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
typescriptDecorator xxx ctermfg=11 guifg=#d08770
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
typescriptInterfaceName xxx cterm=bold ctermfg=14 gui=bold guifg=#8fbcbb
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
typescriptRegexpString xxx ctermfg=3 guifg=#ebcb8b
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
tsxAttrib      xxx ctermfg=14 guifg=#8fbcbb
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
typescriptOperator xxx links to Operator
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 743
typescriptBinaryOp xxx links to Operator
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 744
typescriptAssign xxx links to Operator
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 745
typescriptMember xxx links to Identifier
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 746
typescriptDOMStorageMethod xxx links to Identifier
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 747
typescriptArrowFuncArg xxx links to Identifier
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 748
typescriptGlobal xxx links to typescriptClassName
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 749
typescriptBOMWindowProp xxx links to Function
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 750
typescriptArrowFuncDef xxx links to Function
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 751
typescriptAliasDeclaration xxx links to Function
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 752
typescriptPredefinedType xxx links to Type
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 753
typescriptTypeReference xxx links to typescriptClassName
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 754
typescriptTypeAnnotation xxx links to Structure
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 755
typescriptDocNamedParamType xxx links to SpecialComment
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 756
typescriptDocNotation xxx links to Keyword
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 757
typescriptDocTags xxx links to Keyword
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 758
typescriptImport xxx links to Keyword
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 759
typescriptExport xxx links to Keyword
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 760
typescriptTry  xxx links to Keyword
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 761
typescriptVariable xxx links to Keyword
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 762
typescriptBraces xxx links to Normal
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 763
typescriptObjectLabel xxx links to Normal
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 764
typescriptCall xxx links to Normal
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 765
typescriptClassHeritage xxx links to typescriptClassName
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 766
typescriptFuncTypeArrow xxx links to Structure
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 767
typescriptMemberOptionality xxx links to Structure
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 768
typescriptNodeGlobal xxx links to typescriptGlobal
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 769
typescriptTypeBrackets xxx links to Structure
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 770
tsxEqual       xxx links to Operator
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 771
tsxIntrinsicTagName xxx links to htmlTag
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 772
tsxTagName     xxx links to tsxIntrinsicTagName
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 773
mkdCode        xxx ctermfg=14 guifg=#8fbcbb
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
mkdFootnote    xxx ctermfg=6 guifg=#88c0d0
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
mkdRule        xxx ctermfg=12 guifg=#5e81ac
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
mkdLineBreak   xxx ctermfg=4 guifg=#81a1c1
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
mkdBold        xxx links to Bold
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 781
mkdItalic      xxx links to Italic
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 782
mkdString      xxx links to Keyword
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 783
mkdCodeStart   xxx links to mkdCode
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 784
mkdCodeEnd     xxx links to mkdCode
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 785
mkdBlockquote  xxx links to Comment
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 786
mkdListItem    xxx links to Keyword
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 787
mkdListItemLine xxx links to Normal
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 788
mkdFootnotes   xxx links to mkdFootnote
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 789
mkdLink        xxx links to markdownLinkText
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 790
mkdURL         xxx links to markdownUrl
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 791
mkdInlineURL   xxx links to mkdURL
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 792
mkdID          xxx links to Identifier
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 793
mkdLinkDef     xxx links to mkdLink
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 794
mkdLinkDefTarget xxx links to mkdURL
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 795
mkdLinkTitle   xxx links to mkdInlineURL
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 796
mkdDelimiter   xxx links to Keyword
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 797
phpClass       xxx ctermfg=14 guifg=#8fbcbb
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
phpClassImplements xxx cterm=bold ctermfg=14 gui=bold guifg=#8fbcbb
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
phpClassExtends xxx links to phpClass
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 803
phpFunction    xxx links to Function
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 804
phpMethod      xxx links to Function
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 805
phpUseClass    xxx links to phpClass
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 806
VimwikiHeader1 xxx cterm=bold ctermfg=6 gui=bold guifg=#88c0d0
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
VimwikiHeader2 xxx cterm=bold ctermfg=6 gui=bold guifg=#88c0d0
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
VimwikiHeader3 xxx cterm=bold ctermfg=6 gui=bold guifg=#88c0d0
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
VimwikiHeader4 xxx cterm=bold ctermfg=6 gui=bold guifg=#88c0d0
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
VimwikiHeader5 xxx cterm=bold ctermfg=6 gui=bold guifg=#88c0d0
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
VimwikiHeader6 xxx cterm=bold ctermfg=6 gui=bold guifg=#88c0d0
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
VimwikiLink    xxx cterm=underline ctermfg=6 gui=underline guifg=#88c0d0
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
VimwikiHeaderChar xxx links to markdownHeadingDelimiter
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 822
VimwikiHR      xxx links to Keyword
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 823
VimwikiList    xxx links to markdownListMarker
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 824
yamlKey        xxx ctermfg=14 guifg=#8fbcbb
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
CocSelectedText xxx ctermfg=9 guifg=#fb4934
	Last set from ~/.cache/dein/.cache/init.vim/.dein/plugin/coc.vim line 412
CocCodeLens    xxx ctermfg=248 guifg=#999999
	Last set from ~/.cache/dein/.cache/init.vim/.dein/plugin/coc.vim line 413
CocUnderline   xxx cterm=underline gui=underline guisp=#ebdbb2
	Last set from ~/.cache/dein/.cache/init.vim/.dein/plugin/coc.vim line 414
CocBold        xxx cterm=bold gui=bold
	Last set from ~/.cache/dein/.cache/init.vim/.dein/plugin/coc.vim line 415
CocItalic      xxx cterm=italic gui=italic
	Last set from ~/.cache/dein/.cache/init.vim/.dein/plugin/coc.vim line 416
CocStrikeThrough xxx cterm=strikethrough gui=strikethrough
	Last set from ~/.cache/dein/.cache/init.vim/.dein/plugin/coc.vim line 417
CocMarkdownLink xxx ctermfg=12 guifg=#15aabf
	Last set from ~/.cache/dein/.cache/init.vim/.dein/plugin/coc.vim line 418
CocDisabled    xxx ctermfg=248 guifg=#999999
	Last set from ~/.cache/dein/.cache/init.vim/.dein/plugin/coc.vim line 419
CocSearch      xxx ctermfg=12 guifg=#15aabf
	Last set from ~/.cache/dein/.cache/init.vim/.dein/plugin/coc.vim line 420
CocFloating    xxx ctermbg=236 guibg=#383838
	Last set from ~/.cache/dein/.cache/init.vim/.dein/plugin/coc.vim line 422
CocMenuSel     xxx ctermbg=235 guibg=#303030
	Last set from ~/.cache/dein/.cache/init.vim/.dein/plugin/coc.vim line 423
CocFloatThumb  xxx ctermbg=235 guibg=#343434
	Last set from ~/.cache/dein/.cache/init.vim/.dein/plugin/coc.vim line 424
CocFloatSbar   xxx ctermbg=236 guibg=#3c3c3c
	Last set from ~/.cache/dein/.cache/init.vim/.dein/plugin/coc.vim line 425
CocFadeOut     xxx links to Conceal
	Last set from ~/.cache/dein/.cache/init.vim/.dein/plugin/coc.vim line 440
CocMarkdownCode xxx links to markdownCode
	Last set from ~/.cache/dein/.cache/init.vim/.dein/plugin/coc.vim line 441
CocMarkdownHeader xxx links to markdownH1
	Last set from ~/.cache/dein/.cache/init.vim/.dein/plugin/coc.vim line 442
CocDeprecatedHighlight xxx links to CocStrikeThrough
	Last set from ~/.cache/dein/.cache/init.vim/.dein/plugin/coc.vim line 443
CocUnusedHighlight xxx links to CocFadeOut
	Last set from ~/.cache/dein/.cache/init.vim/.dein/plugin/coc.vim line 444
CocListLine    xxx links to CursorLine
	Last set from ~/.cache/dein/.cache/init.vim/.dein/plugin/coc.vim line 445
CocListSearch  xxx links to CocSearch
	Last set from ~/.cache/dein/.cache/init.vim/.dein/plugin/coc.vim line 446
CocListMode    xxx links to ModeMsg
	Last set from ~/.cache/dein/.cache/init.vim/.dein/plugin/coc.vim line 447
CocListPath    xxx links to Comment
	Last set from ~/.cache/dein/.cache/init.vim/.dein/plugin/coc.vim line 448
CocHighlightText xxx links to CursorColumn
	Last set from ~/.cache/dein/.cache/init.vim/.dein/plugin/coc.vim line 449
CocHoverRange  xxx links to Search
	Last set from ~/.cache/dein/.cache/init.vim/.dein/plugin/coc.vim line 450
CocCursorRange xxx links to Search
	Last set from ~/.cache/dein/.cache/init.vim/.dein/plugin/coc.vim line 451
CocLinkedEditing xxx links to CocCursorRange
	Last set from ~/.cache/dein/.cache/init.vim/.dein/plugin/coc.vim line 452
CocHighlightRead xxx links to CocHighlightText
	Last set from ~/.cache/dein/.cache/init.vim/.dein/plugin/coc.vim line 453
CocHighlightWrite xxx links to CocHighlightText
	Last set from ~/.cache/dein/.cache/init.vim/.dein/plugin/coc.vim line 454
CocNotificationProgress xxx ctermfg=12 guifg=#15aabf
	Last set from ~/.cache/dein/.cache/init.vim/.dein/plugin/coc.vim line 456
CocNotificationButton xxx links to CocUnderline
	Last set from ~/.cache/dein/.cache/init.vim/.dein/plugin/coc.vim line 457
CocNotificationError xxx links to CocErrorFloat
	Last set from ~/.cache/dein/.cache/init.vim/.dein/plugin/coc.vim line 458
CocErrorFloat  xxx links to DiagnosticError
	Last set from ~/.cache/dein/.cache/init.vim/.dein/plugin/coc.vim line 517
CocNotificationWarning xxx links to CocWarningFloat
	Last set from ~/.cache/dein/.cache/init.vim/.dein/plugin/coc.vim line 459
CocWarningFloat xxx links to DiagnosticWarn
	Last set from ~/.cache/dein/.cache/init.vim/.dein/plugin/coc.vim line 517
CocNotificationInfo xxx links to CocInfoFloat
	Last set from ~/.cache/dein/.cache/init.vim/.dein/plugin/coc.vim line 460
CocInfoFloat   xxx links to DiagnosticInfo
	Last set from ~/.cache/dein/.cache/init.vim/.dein/plugin/coc.vim line 517
CocSnippetVisual xxx links to Visual
	Last set from ~/.cache/dein/.cache/init.vim/.dein/plugin/coc.vim line 462
CocTreeTitle   xxx links to Title
	Last set from ~/.cache/dein/.cache/init.vim/.dein/plugin/coc.vim line 464
CocTreeDescription xxx links to Comment
	Last set from ~/.cache/dein/.cache/init.vim/.dein/plugin/coc.vim line 465
CocTreeOpenClose xxx links to CocBold
	Last set from ~/.cache/dein/.cache/init.vim/.dein/plugin/coc.vim line 466
CocTreeSelected xxx links to CursorLine
	Last set from ~/.cache/dein/.cache/init.vim/.dein/plugin/coc.vim line 467
CocSelectedRange xxx links to CocHighlightText
	Last set from ~/.cache/dein/.cache/init.vim/.dein/plugin/coc.vim line 468
CocSymbolDefault xxx links to MoreMsg
	Last set from ~/.cache/dein/.cache/init.vim/.dein/plugin/coc.vim line 470
CocPumSearch   xxx links to CocSearch
	Last set from ~/.cache/dein/.cache/init.vim/.dein/plugin/coc.vim line 472
CocPumDetail   xxx links to Comment
	Last set from ~/.cache/dein/.cache/init.vim/.dein/plugin/coc.vim line 473
CocPumMenu     xxx links to CocFloating
	Last set from ~/.cache/dein/.cache/init.vim/.dein/plugin/coc.vim line 474
CocPumShortcut xxx links to Comment
	Last set from ~/.cache/dein/.cache/init.vim/.dein/plugin/coc.vim line 475
CocPumDeprecated xxx links to CocStrikeThrough
	Last set from ~/.cache/dein/.cache/init.vim/.dein/plugin/coc.vim line 476
CocPumVirtualText xxx links to NonText
	Last set from ~/.cache/dein/.cache/init.vim/.dein/plugin/coc.vim line 477
CocFloatDividingLine xxx links to NonText
	Last set from ~/.cache/dein/.cache/init.vim/.dein/plugin/coc.vim line 479
CocCursorTransparent xxx gui=strikethrough blend=100
	Last set from ~/.cache/dein/.cache/init.vim/.dein/plugin/coc.vim line 490
CocErrorVirtualText xxx links to DiagnosticVirtualTextError
	Last set from ~/.cache/dein/.cache/init.vim/.dein/plugin/coc.vim line 512
CocWarningVirtualText xxx links to DiagnosticVirtualTextWarn
	Last set from ~/.cache/dein/.cache/init.vim/.dein/plugin/coc.vim line 512
CocInfoHighlight xxx links to DiagnosticUnderlineInfo
	Last set from ~/.cache/dein/.cache/init.vim/.dein/plugin/coc.vim line 502
CocInfoVirtualText xxx links to DiagnosticVirtualTextInfo
	Last set from ~/.cache/dein/.cache/init.vim/.dein/plugin/coc.vim line 512
CocHintHighlight xxx links to DiagnosticUnderlineHint
	Last set from ~/.cache/dein/.cache/init.vim/.dein/plugin/coc.vim line 502
CocHintVirtualText xxx links to DiagnosticVirtualTextHint
	Last set from ~/.cache/dein/.cache/init.vim/.dein/plugin/coc.vim line 512
CocHintFloat   xxx links to DiagnosticHint
	Last set from ~/.cache/dein/.cache/init.vim/.dein/plugin/coc.vim line 517
CocInlayHint   xxx ctermfg=12 guifg=#5e81ac
	Last set from ~/.cache/dein/.cache/init.vim/.dein/plugin/coc.vim line 245
CocListBlackBlack xxx guifg=#3b4252 guibg=#3b4252
	Last set from ~/.cache/dein/.cache/init.vim/.dein/plugin/coc.vim line 232
CocListBlackBlue xxx guifg=#3b4252 guibg=#81a1c1
	Last set from ~/.cache/dein/.cache/init.vim/.dein/plugin/coc.vim line 232
CocListBlackGreen xxx guifg=#3b4252 guibg=#a3be8c
	Last set from ~/.cache/dein/.cache/init.vim/.dein/plugin/coc.vim line 232
CocListBlackGrey xxx guifg=#3b4252 guibg=#4c566a
	Last set from ~/.cache/dein/.cache/init.vim/.dein/plugin/coc.vim line 232
CocListBlackWhite xxx guifg=#3b4252 guibg=#e5e9f0
	Last set from ~/.cache/dein/.cache/init.vim/.dein/plugin/coc.vim line 232
CocListBlackCyan xxx guifg=#3b4252 guibg=#88c0d0
	Last set from ~/.cache/dein/.cache/init.vim/.dein/plugin/coc.vim line 232
CocListBlackYellow xxx guifg=#3b4252 guibg=#ebcb8b
	Last set from ~/.cache/dein/.cache/init.vim/.dein/plugin/coc.vim line 232
CocListBlackMagenta xxx guifg=#3b4252 guibg=#b48ead
	Last set from ~/.cache/dein/.cache/init.vim/.dein/plugin/coc.vim line 232
CocListBlackRed xxx guifg=#3b4252 guibg=#bf616a
	Last set from ~/.cache/dein/.cache/init.vim/.dein/plugin/coc.vim line 232
CocListFgBlack xxx ctermfg=0 guifg=#3b4252
	Last set from ~/.cache/dein/.cache/init.vim/.dein/plugin/coc.vim line 234
CocListBgBlack xxx ctermbg=0 guibg=#3b4252
	Last set from ~/.cache/dein/.cache/init.vim/.dein/plugin/coc.vim line 235
CocListBlueBlack xxx guifg=#81a1c1 guibg=#3b4252
	Last set from ~/.cache/dein/.cache/init.vim/.dein/plugin/coc.vim line 232
CocListBlueBlue xxx guifg=#81a1c1 guibg=#81a1c1
	Last set from ~/.cache/dein/.cache/init.vim/.dein/plugin/coc.vim line 232
CocListBlueGreen xxx guifg=#81a1c1 guibg=#a3be8c
	Last set from ~/.cache/dein/.cache/init.vim/.dein/plugin/coc.vim line 232
CocListBlueGrey xxx guifg=#81a1c1 guibg=#4c566a
	Last set from ~/.cache/dein/.cache/init.vim/.dein/plugin/coc.vim line 232
CocListBlueWhite xxx guifg=#81a1c1 guibg=#e5e9f0
	Last set from ~/.cache/dein/.cache/init.vim/.dein/plugin/coc.vim line 232
CocListBlueCyan xxx guifg=#81a1c1 guibg=#88c0d0
	Last set from ~/.cache/dein/.cache/init.vim/.dein/plugin/coc.vim line 232
CocListBlueYellow xxx guifg=#81a1c1 guibg=#ebcb8b
	Last set from ~/.cache/dein/.cache/init.vim/.dein/plugin/coc.vim line 232
CocListBlueMagenta xxx guifg=#81a1c1 guibg=#b48ead
	Last set from ~/.cache/dein/.cache/init.vim/.dein/plugin/coc.vim line 232
CocListBlueRed xxx guifg=#81a1c1 guibg=#bf616a
	Last set from ~/.cache/dein/.cache/init.vim/.dein/plugin/coc.vim line 232
CocListFgBlue  xxx ctermfg=12 guifg=#81a1c1
	Last set from ~/.cache/dein/.cache/init.vim/.dein/plugin/coc.vim line 234
CocListBgBlue  xxx ctermbg=12 guibg=#81a1c1
	Last set from ~/.cache/dein/.cache/init.vim/.dein/plugin/coc.vim line 235
CocListGreenBlack xxx guifg=#a3be8c guibg=#3b4252
	Last set from ~/.cache/dein/.cache/init.vim/.dein/plugin/coc.vim line 232
CocListGreenBlue xxx guifg=#a3be8c guibg=#81a1c1
	Last set from ~/.cache/dein/.cache/init.vim/.dein/plugin/coc.vim line 232
CocListGreenGreen xxx guifg=#a3be8c guibg=#a3be8c
	Last set from ~/.cache/dein/.cache/init.vim/.dein/plugin/coc.vim line 232
CocListGreenGrey xxx guifg=#a3be8c guibg=#4c566a
	Last set from ~/.cache/dein/.cache/init.vim/.dein/plugin/coc.vim line 232
CocListGreenWhite xxx guifg=#a3be8c guibg=#e5e9f0
	Last set from ~/.cache/dein/.cache/init.vim/.dein/plugin/coc.vim line 232
CocListGreenCyan xxx guifg=#a3be8c guibg=#88c0d0
	Last set from ~/.cache/dein/.cache/init.vim/.dein/plugin/coc.vim line 232
CocListGreenYellow xxx guifg=#a3be8c guibg=#ebcb8b
	Last set from ~/.cache/dein/.cache/init.vim/.dein/plugin/coc.vim line 232
CocListGreenMagenta xxx guifg=#a3be8c guibg=#b48ead
	Last set from ~/.cache/dein/.cache/init.vim/.dein/plugin/coc.vim line 232
CocListGreenRed xxx guifg=#a3be8c guibg=#bf616a
	Last set from ~/.cache/dein/.cache/init.vim/.dein/plugin/coc.vim line 232
CocListFgGreen xxx ctermfg=10 guifg=#a3be8c
	Last set from ~/.cache/dein/.cache/init.vim/.dein/plugin/coc.vim line 234
CocListBgGreen xxx ctermbg=10 guibg=#a3be8c
	Last set from ~/.cache/dein/.cache/init.vim/.dein/plugin/coc.vim line 235
CocListGreyBlack xxx guifg=#4c566a guibg=#3b4252
	Last set from ~/.cache/dein/.cache/init.vim/.dein/plugin/coc.vim line 232
CocListGreyBlue xxx guifg=#4c566a guibg=#81a1c1
	Last set from ~/.cache/dein/.cache/init.vim/.dein/plugin/coc.vim line 232
CocListGreyGreen xxx guifg=#4c566a guibg=#a3be8c
	Last set from ~/.cache/dein/.cache/init.vim/.dein/plugin/coc.vim line 232
CocListGreyGrey xxx guifg=#4c566a guibg=#4c566a
	Last set from ~/.cache/dein/.cache/init.vim/.dein/plugin/coc.vim line 232
CocListGreyWhite xxx guifg=#4c566a guibg=#e5e9f0
	Last set from ~/.cache/dein/.cache/init.vim/.dein/plugin/coc.vim line 232
CocListGreyCyan xxx guifg=#4c566a guibg=#88c0d0
	Last set from ~/.cache/dein/.cache/init.vim/.dein/plugin/coc.vim line 232
CocListGreyYellow xxx guifg=#4c566a guibg=#ebcb8b
	Last set from ~/.cache/dein/.cache/init.vim/.dein/plugin/coc.vim line 232
CocListGreyMagenta xxx guifg=#4c566a guibg=#b48ead
	Last set from ~/.cache/dein/.cache/init.vim/.dein/plugin/coc.vim line 232
CocListGreyRed xxx guifg=#4c566a guibg=#bf616a
	Last set from ~/.cache/dein/.cache/init.vim/.dein/plugin/coc.vim line 232
CocListFgGrey  xxx ctermfg=248 guifg=#4c566a
	Last set from ~/.cache/dein/.cache/init.vim/.dein/plugin/coc.vim line 234
CocListBgGrey  xxx ctermbg=248 guibg=#4c566a
	Last set from ~/.cache/dein/.cache/init.vim/.dein/plugin/coc.vim line 235
CocListWhiteBlack xxx guifg=#e5e9f0 guibg=#3b4252
	Last set from ~/.cache/dein/.cache/init.vim/.dein/plugin/coc.vim line 232
CocListWhiteBlue xxx guifg=#e5e9f0 guibg=#81a1c1
	Last set from ~/.cache/dein/.cache/init.vim/.dein/plugin/coc.vim line 232
CocListWhiteGreen xxx guifg=#e5e9f0 guibg=#a3be8c
	Last set from ~/.cache/dein/.cache/init.vim/.dein/plugin/coc.vim line 232
CocListWhiteGrey xxx guifg=#e5e9f0 guibg=#4c566a
	Last set from ~/.cache/dein/.cache/init.vim/.dein/plugin/coc.vim line 232
CocListWhiteWhite xxx guifg=#e5e9f0 guibg=#e5e9f0
	Last set from ~/.cache/dein/.cache/init.vim/.dein/plugin/coc.vim line 232
CocListWhiteCyan xxx guifg=#e5e9f0 guibg=#88c0d0
	Last set from ~/.cache/dein/.cache/init.vim/.dein/plugin/coc.vim line 232
CocListWhiteYellow xxx guifg=#e5e9f0 guibg=#ebcb8b
	Last set from ~/.cache/dein/.cache/init.vim/.dein/plugin/coc.vim line 232
CocListWhiteMagenta xxx guifg=#e5e9f0 guibg=#b48ead
	Last set from ~/.cache/dein/.cache/init.vim/.dein/plugin/coc.vim line 232
CocListWhiteRed xxx guifg=#e5e9f0 guibg=#bf616a
	Last set from ~/.cache/dein/.cache/init.vim/.dein/plugin/coc.vim line 232
CocListFgWhite xxx ctermfg=15 guifg=#e5e9f0
	Last set from ~/.cache/dein/.cache/init.vim/.dein/plugin/coc.vim line 234
CocListBgWhite xxx ctermbg=15 guibg=#e5e9f0
	Last set from ~/.cache/dein/.cache/init.vim/.dein/plugin/coc.vim line 235
CocListCyanBlack xxx guifg=#88c0d0 guibg=#3b4252
	Last set from ~/.cache/dein/.cache/init.vim/.dein/plugin/coc.vim line 232
CocListCyanBlue xxx guifg=#88c0d0 guibg=#81a1c1
	Last set from ~/.cache/dein/.cache/init.vim/.dein/plugin/coc.vim line 232
CocListCyanGreen xxx guifg=#88c0d0 guibg=#a3be8c
	Last set from ~/.cache/dein/.cache/init.vim/.dein/plugin/coc.vim line 232
CocListCyanGrey xxx guifg=#88c0d0 guibg=#4c566a
	Last set from ~/.cache/dein/.cache/init.vim/.dein/plugin/coc.vim line 232
CocListCyanWhite xxx guifg=#88c0d0 guibg=#e5e9f0
	Last set from ~/.cache/dein/.cache/init.vim/.dein/plugin/coc.vim line 232
CocListCyanCyan xxx guifg=#88c0d0 guibg=#88c0d0
	Last set from ~/.cache/dein/.cache/init.vim/.dein/plugin/coc.vim line 232
CocListCyanYellow xxx guifg=#88c0d0 guibg=#ebcb8b
	Last set from ~/.cache/dein/.cache/init.vim/.dein/plugin/coc.vim line 232
CocListCyanMagenta xxx guifg=#88c0d0 guibg=#b48ead
	Last set from ~/.cache/dein/.cache/init.vim/.dein/plugin/coc.vim line 232
CocListCyanRed xxx guifg=#88c0d0 guibg=#bf616a
	Last set from ~/.cache/dein/.cache/init.vim/.dein/plugin/coc.vim line 232
CocListFgCyan  xxx ctermfg=14 guifg=#88c0d0
	Last set from ~/.cache/dein/.cache/init.vim/.dein/plugin/coc.vim line 234
CocListBgCyan  xxx ctermbg=14 guibg=#88c0d0
	Last set from ~/.cache/dein/.cache/init.vim/.dein/plugin/coc.vim line 235
CocListYellowBlack xxx guifg=#ebcb8b guibg=#3b4252
	Last set from ~/.cache/dein/.cache/init.vim/.dein/plugin/coc.vim line 232
CocListYellowBlue xxx guifg=#ebcb8b guibg=#81a1c1
	Last set from ~/.cache/dein/.cache/init.vim/.dein/plugin/coc.vim line 232
CocListYellowGreen xxx guifg=#ebcb8b guibg=#a3be8c
	Last set from ~/.cache/dein/.cache/init.vim/.dein/plugin/coc.vim line 232
CocListYellowGrey xxx guifg=#ebcb8b guibg=#4c566a
	Last set from ~/.cache/dein/.cache/init.vim/.dein/plugin/coc.vim line 232
CocListYellowWhite xxx guifg=#ebcb8b guibg=#e5e9f0
	Last set from ~/.cache/dein/.cache/init.vim/.dein/plugin/coc.vim line 232
CocListYellowCyan xxx guifg=#ebcb8b guibg=#88c0d0
	Last set from ~/.cache/dein/.cache/init.vim/.dein/plugin/coc.vim line 232
CocListYellowYellow xxx guifg=#ebcb8b guibg=#ebcb8b
	Last set from ~/.cache/dein/.cache/init.vim/.dein/plugin/coc.vim line 232
CocListYellowMagenta xxx guifg=#ebcb8b guibg=#b48ead
	Last set from ~/.cache/dein/.cache/init.vim/.dein/plugin/coc.vim line 232
CocListYellowRed xxx guifg=#ebcb8b guibg=#bf616a
	Last set from ~/.cache/dein/.cache/init.vim/.dein/plugin/coc.vim line 232
CocListFgYellow xxx ctermfg=11 guifg=#ebcb8b
	Last set from ~/.cache/dein/.cache/init.vim/.dein/plugin/coc.vim line 234
CocListBgYellow xxx ctermbg=11 guibg=#ebcb8b
	Last set from ~/.cache/dein/.cache/init.vim/.dein/plugin/coc.vim line 235
CocListMagentaBlack xxx guifg=#b48ead guibg=#3b4252
	Last set from ~/.cache/dein/.cache/init.vim/.dein/plugin/coc.vim line 232
CocListMagentaBlue xxx guifg=#b48ead guibg=#81a1c1
	Last set from ~/.cache/dein/.cache/init.vim/.dein/plugin/coc.vim line 232
CocListMagentaGreen xxx guifg=#b48ead guibg=#a3be8c
	Last set from ~/.cache/dein/.cache/init.vim/.dein/plugin/coc.vim line 232
CocListMagentaGrey xxx guifg=#b48ead guibg=#4c566a
	Last set from ~/.cache/dein/.cache/init.vim/.dein/plugin/coc.vim line 232
CocListMagentaWhite xxx guifg=#b48ead guibg=#e5e9f0
	Last set from ~/.cache/dein/.cache/init.vim/.dein/plugin/coc.vim line 232
CocListMagentaCyan xxx guifg=#b48ead guibg=#88c0d0
	Last set from ~/.cache/dein/.cache/init.vim/.dein/plugin/coc.vim line 232
CocListMagentaYellow xxx guifg=#b48ead guibg=#ebcb8b
	Last set from ~/.cache/dein/.cache/init.vim/.dein/plugin/coc.vim line 232
CocListMagentaMagenta xxx guifg=#b48ead guibg=#b48ead
	Last set from ~/.cache/dein/.cache/init.vim/.dein/plugin/coc.vim line 232
CocListMagentaRed xxx guifg=#b48ead guibg=#bf616a
	Last set from ~/.cache/dein/.cache/init.vim/.dein/plugin/coc.vim line 232
CocListFgMagenta xxx ctermfg=13 guifg=#b48ead
	Last set from ~/.cache/dein/.cache/init.vim/.dein/plugin/coc.vim line 234
CocListBgMagenta xxx ctermbg=13 guibg=#b48ead
	Last set from ~/.cache/dein/.cache/init.vim/.dein/plugin/coc.vim line 235
CocListRedBlack xxx guifg=#bf616a guibg=#3b4252
	Last set from ~/.cache/dein/.cache/init.vim/.dein/plugin/coc.vim line 232
CocListRedBlue xxx guifg=#bf616a guibg=#81a1c1
	Last set from ~/.cache/dein/.cache/init.vim/.dein/plugin/coc.vim line 232
CocListRedGreen xxx guifg=#bf616a guibg=#a3be8c
	Last set from ~/.cache/dein/.cache/init.vim/.dein/plugin/coc.vim line 232
CocListRedGrey xxx guifg=#bf616a guibg=#4c566a
	Last set from ~/.cache/dein/.cache/init.vim/.dein/plugin/coc.vim line 232
CocListRedWhite xxx guifg=#bf616a guibg=#e5e9f0
	Last set from ~/.cache/dein/.cache/init.vim/.dein/plugin/coc.vim line 232
CocListRedCyan xxx guifg=#bf616a guibg=#88c0d0
	Last set from ~/.cache/dein/.cache/init.vim/.dein/plugin/coc.vim line 232
CocListRedYellow xxx guifg=#bf616a guibg=#ebcb8b
	Last set from ~/.cache/dein/.cache/init.vim/.dein/plugin/coc.vim line 232
CocListRedMagenta xxx guifg=#bf616a guibg=#b48ead
	Last set from ~/.cache/dein/.cache/init.vim/.dein/plugin/coc.vim line 232
CocListRedRed  xxx guifg=#bf616a guibg=#bf616a
	Last set from ~/.cache/dein/.cache/init.vim/.dein/plugin/coc.vim line 232
CocListFgRed   xxx ctermfg=9 guifg=#bf616a
	Last set from ~/.cache/dein/.cache/init.vim/.dein/plugin/coc.vim line 234
CocListBgRed   xxx ctermbg=9 guibg=#bf616a
	Last set from ~/.cache/dein/.cache/init.vim/.dein/plugin/coc.vim line 235
CocSemNumber   xxx links to Number
	Last set from ~/.cache/dein/.cache/init.vim/.dein/plugin/coc.vim line 557
CocSemFunction xxx links to Function
	Last set from ~/.cache/dein/.cache/init.vim/.dein/plugin/coc.vim line 557
CocSemKeyword  xxx links to Keyword
	Last set from ~/.cache/dein/.cache/init.vim/.dein/plugin/coc.vim line 557
CocSemParameter xxx links to Identifier
	Last set from ~/.cache/dein/.cache/init.vim/.dein/plugin/coc.vim line 557
CocSemEvent    xxx links to Keyword
	Last set from ~/.cache/dein/.cache/init.vim/.dein/plugin/coc.vim line 557
CocSemModifier xxx links to StorageClass
	Last set from ~/.cache/dein/.cache/init.vim/.dein/plugin/coc.vim line 557
CocSemMacro    xxx links to Define
	Last set from ~/.cache/dein/.cache/init.vim/.dein/plugin/coc.vim line 557
CocSemDeprecated xxx links to CocDeprecatedHighlight
	Last set from ~/.cache/dein/.cache/init.vim/.dein/plugin/coc.vim line 557
CocSemClass    xxx links to TSConstructor
	Last set from ~/.cache/dein/.cache/init.vim/.dein/plugin/coc.vim line 557
CocSemDecorator xxx links to Identifier
	Last set from ~/.cache/dein/.cache/init.vim/.dein/plugin/coc.vim line 557
CocSemOperator xxx links to Operator
	Last set from ~/.cache/dein/.cache/init.vim/.dein/plugin/coc.vim line 557
CocSemStruct   xxx links to Identifier
	Last set from ~/.cache/dein/.cache/init.vim/.dein/plugin/coc.vim line 557
CocSemRegexp   xxx links to TSStringRegex
	Last set from ~/.cache/dein/.cache/init.vim/.dein/plugin/coc.vim line 557
CocSemMethod   xxx links to Function
	Last set from ~/.cache/dein/.cache/init.vim/.dein/plugin/coc.vim line 557
CocSemComment  xxx links to Comment
	Last set from ~/.cache/dein/.cache/init.vim/.dein/plugin/coc.vim line 557
CocSemEnum     xxx links to Type
	Last set from ~/.cache/dein/.cache/init.vim/.dein/plugin/coc.vim line 557
CocSemInterface xxx links to Type
	Last set from ~/.cache/dein/.cache/init.vim/.dein/plugin/coc.vim line 557
CocSemType     xxx links to Type
	Last set from ~/.cache/dein/.cache/init.vim/.dein/plugin/coc.vim line 557
CocSemProperty xxx links to Identifier
	Last set from ~/.cache/dein/.cache/init.vim/.dein/plugin/coc.vim line 557
CocSemTypeParameter xxx links to Identifier
	Last set from ~/.cache/dein/.cache/init.vim/.dein/plugin/coc.vim line 557
CocSemEnumMember xxx links to Constant
	Last set from ~/.cache/dein/.cache/init.vim/.dein/plugin/coc.vim line 557
CocSemBoolean  xxx links to Boolean
	Last set from ~/.cache/dein/.cache/init.vim/.dein/plugin/coc.vim line 557
CocSemNamespace xxx links to Include
	Last set from ~/.cache/dein/.cache/init.vim/.dein/plugin/coc.vim line 557
CocSemString   xxx links to String
	Last set from ~/.cache/dein/.cache/init.vim/.dein/plugin/coc.vim line 557
CocSemVariable xxx links to Identifier
	Last set from ~/.cache/dein/.cache/init.vim/.dein/plugin/coc.vim line 557
CocSymbolUnit  xxx ctermfg=6 guifg=#88c0d0
	Last set from ~/.cache/dein/.cache/init.vim/.dein/plugin/coc.vim line 599
CocSymbolNumber xxx ctermfg=5 guifg=#b48ead
	Last set from ~/.cache/dein/.cache/init.vim/.dein/plugin/coc.vim line 599
CocSymbolFunction xxx ctermfg=6 guifg=#88c0d0
	Last set from ~/.cache/dein/.cache/init.vim/.dein/plugin/coc.vim line 599
CocSymbolKey   xxx ctermfg=223 guifg=#d8dee9
	Last set from ~/.cache/dein/.cache/init.vim/.dein/plugin/coc.vim line 599
CocSymbolKeyword xxx ctermfg=4 guifg=#81a1c1
	Last set from ~/.cache/dein/.cache/init.vim/.dein/plugin/coc.vim line 599
CocSymbolReference xxx ctermfg=223 guifg=#d8dee9
	Last set from ~/.cache/dein/.cache/init.vim/.dein/plugin/coc.vim line 599
CocSymbolFolder xxx ctermfg=6 guifg=#88c0d0
	Last set from ~/.cache/dein/.cache/init.vim/.dein/plugin/coc.vim line 599
CocSymbolVariable xxx ctermfg=4 guifg=#81a1c1
	Last set from ~/.cache/dein/.cache/init.vim/.dein/plugin/coc.vim line 599
CocSymbolNull  xxx ctermfg=4 guifg=#81a1c1
	Last set from ~/.cache/dein/.cache/init.vim/.dein/plugin/coc.vim line 599
CocSymbolValue xxx ctermfg=6 guifg=#88c0d0
	Last set from ~/.cache/dein/.cache/init.vim/.dein/plugin/coc.vim line 599
CocSymbolConstant xxx ctermfg=223 guifg=#d8dee9
	Last set from ~/.cache/dein/.cache/init.vim/.dein/plugin/coc.vim line 599
CocSymbolText  xxx ctermfg=6 guifg=#88c0d0
	Last set from ~/.cache/dein/.cache/init.vim/.dein/plugin/coc.vim line 599
CocSymbolModule xxx ctermfg=4 guifg=#81a1c1
	Last set from ~/.cache/dein/.cache/init.vim/.dein/plugin/coc.vim line 599
CocSymbolPackage xxx ctermfg=4 guifg=#81a1c1
	Last set from ~/.cache/dein/.cache/init.vim/.dein/plugin/coc.vim line 599
CocSymbolClass xxx ctermfg=6 guifg=#88c0d0
	Last set from ~/.cache/dein/.cache/init.vim/.dein/plugin/coc.vim line 599
CocSymbolOperator xxx ctermfg=4 guifg=#81a1c1
	Last set from ~/.cache/dein/.cache/init.vim/.dein/plugin/coc.vim line 599
CocSymbolStruct xxx ctermfg=4 guifg=#81a1c1
	Last set from ~/.cache/dein/.cache/init.vim/.dein/plugin/coc.vim line 599
CocSymbolObject xxx ctermfg=6 guifg=#88c0d0
	Last set from ~/.cache/dein/.cache/init.vim/.dein/plugin/coc.vim line 599
CocSymbolMethod xxx ctermfg=6 guifg=#88c0d0
	Last set from ~/.cache/dein/.cache/init.vim/.dein/plugin/coc.vim line 599
CocSymbolArray xxx ctermfg=6 guifg=#88c0d0
	Last set from ~/.cache/dein/.cache/init.vim/.dein/plugin/coc.vim line 599
CocSymbolEnum  xxx ctermfg=6 guifg=#88c0d0
	Last set from ~/.cache/dein/.cache/init.vim/.dein/plugin/coc.vim line 599
CocSymbolField xxx ctermfg=223 guifg=#d8dee9
	Last set from ~/.cache/dein/.cache/init.vim/.dein/plugin/coc.vim line 599
CocSymbolInterface xxx ctermfg=6 guifg=#88c0d0
	Last set from ~/.cache/dein/.cache/init.vim/.dein/plugin/coc.vim line 599
CocSymbolProperty xxx ctermfg=223 guifg=#d8dee9
	Last set from ~/.cache/dein/.cache/init.vim/.dein/plugin/coc.vim line 599
CocSymbolColor xxx ctermfg=5 guifg=#b48ead
	Last set from ~/.cache/dein/.cache/init.vim/.dein/plugin/coc.vim line 599
CocSymbolFile  xxx ctermfg=4 guifg=#81a1c1
	Last set from ~/.cache/dein/.cache/init.vim/.dein/plugin/coc.vim line 599
CocSymbolEvent xxx ctermfg=223 guifg=#d8dee9
	Last set from ~/.cache/dein/.cache/init.vim/.dein/plugin/coc.vim line 599
CocSymbolTypeParameter xxx ctermfg=223 guifg=#d8dee9
	Last set from ~/.cache/dein/.cache/init.vim/.dein/plugin/coc.vim line 599
CocSymbolConstructor xxx ctermfg=6 guifg=#88c0d0
	Last set from ~/.cache/dein/.cache/init.vim/.dein/plugin/coc.vim line 599
CocSymbolSnippet xxx ctermfg=6 guifg=#88c0d0
	Last set from ~/.cache/dein/.cache/init.vim/.dein/plugin/coc.vim line 599
CocSymbolBoolean xxx ctermfg=4 guifg=#81a1c1
	Last set from ~/.cache/dein/.cache/init.vim/.dein/plugin/coc.vim line 599
CocSymbolNamespace xxx ctermfg=4 guifg=#81a1c1
	Last set from ~/.cache/dein/.cache/init.vim/.dein/plugin/coc.vim line 599
CocSymbolString xxx ctermfg=2 guifg=#a3be8c
	Last set from ~/.cache/dein/.cache/init.vim/.dein/plugin/coc.vim line 599
CocSymbolEnumMember xxx ctermfg=223 guifg=#d8dee9
	Last set from ~/.cache/dein/.cache/init.vim/.dein/plugin/coc.vim line 599
GlyphPaletteDirectory xxx links to Directory
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/glyph_palette/defaults.vim line 78
GlyphPalette0  xxx ctermfg=0 guifg=#3b4252
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/glyph_palette/defaults.vim line 79
GlyphPalette1  xxx ctermfg=1 guifg=#bf616a
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/glyph_palette/defaults.vim line 79
GlyphPalette2  xxx ctermfg=2 guifg=#a3be8c
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/glyph_palette/defaults.vim line 79
GlyphPalette3  xxx ctermfg=3 guifg=#ebcb8b
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/glyph_palette/defaults.vim line 79
GlyphPalette4  xxx ctermfg=4 guifg=#81a1c1
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/glyph_palette/defaults.vim line 79
GlyphPalette5  xxx ctermfg=5 guifg=#b48ead
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/glyph_palette/defaults.vim line 79
GlyphPalette6  xxx ctermfg=6 guifg=#88c0d0
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/glyph_palette/defaults.vim line 79
GlyphPalette7  xxx ctermfg=7 guifg=#e5e9f0
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/glyph_palette/defaults.vim line 79
GlyphPalette8  xxx ctermfg=8 guifg=#4c566a
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/glyph_palette/defaults.vim line 79
GlyphPalette9  xxx ctermfg=9 guifg=#bf616a
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/glyph_palette/defaults.vim line 79
GlyphPalette10 xxx ctermfg=10 guifg=#a3be8c
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/glyph_palette/defaults.vim line 79
GlyphPalette11 xxx ctermfg=11 guifg=#ebcb8b
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/glyph_palette/defaults.vim line 79
GlyphPalette12 xxx ctermfg=12 guifg=#81a1c1
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/glyph_palette/defaults.vim line 79
GlyphPalette13 xxx ctermfg=13 guifg=#b48ead
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/glyph_palette/defaults.vim line 79
GlyphPalette14 xxx ctermfg=14 guifg=#8fbcbb
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/glyph_palette/defaults.vim line 79
GlyphPalette15 xxx ctermfg=15 guifg=#eceff4
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/glyph_palette/defaults.vim line 79
HighlightedyankRegion xxx links to IncSearch
	Last set from ~/.cache/dein/.cache/init.vim/.dein/plugin/highlightedyank.vim line 15
TSCharacter    xxx links to Character
	Last set from Lua
TSRepeat       xxx links to Repeat
	Last set from Lua
TSConstMacro   xxx links to Define
	Last set from Lua
TSDefine       xxx links to Define
	Last set from Lua
TSException    xxx links to Exception
	Last set from Lua
TSBoolean      xxx links to Boolean
	Last set from Lua
@function.call xxx links to TSFunctionCall
	Last set from Lua
TSFunctionCall xxx links to TSFunction
	Last set from Lua
TSInclude      xxx links to Include
	Last set from Lua
TSNumber       xxx links to Number
	Last set from Lua
TSKeyword      xxx links to Keyword
	Last set from Lua
@keyword.function xxx links to TSKeywordFunction
	Last set from Lua
TSKeywordFunction xxx links to Keyword
	Last set from Lua
@keyword.operator xxx links to TSKeywordOperator
	Last set from Lua
TSKeywordOperator xxx links to TSOperator
	Last set from Lua
@keyword.return xxx links to TSKeywordReturn
	Last set from Lua
TSKeywordReturn xxx links to TSKeyword
	Last set from Lua
TSLabel        xxx links to Label
	Last set from Lua
@method.call   xxx links to TSMethodCall
	Last set from Lua
TSMethodCall   xxx links to TSMethod
	Last set from Lua
@error         xxx links to TSError
	Last set from Lua
TSError        xxx cleared
TSOperator     xxx links to Operator
	Last set from Lua
TSParameter    xxx links to Identifier
	Last set from Lua
@parameter.reference xxx links to TSParameterReference
	Last set from Lua
TSParameterReference xxx links to TSParameter
	Last set from Lua
TSDebug        xxx links to Debug
	Last set from Lua
TSPreProc      xxx links to PreProc
	Last set from Lua
TSProperty     xxx links to Identifier
	Last set from Lua
@punctuation.delimiter xxx links to TSPunctDelimiter
	Last set from Lua
TSPunctDelimiter xxx links to Delimiter
	Last set from Lua
@punctuation.bracket xxx links to TSPunctBracket
	Last set from Lua
TSPunctBracket xxx links to Delimiter
	Last set from Lua
@punctuation.special xxx links to TSPunctSpecial
	Last set from Lua
TSPunctSpecial xxx links to Delimiter
	Last set from Lua
TSStorageClass xxx links to StorageClass
	Last set from Lua
@string.regex  xxx links to TSStringRegex
	Last set from Lua
TSStringEscape xxx links to SpecialChar
	Last set from Lua
@string.special xxx links to TSStringSpecial
	Last set from Lua
TSStringSpecial xxx links to SpecialChar
	Last set from Lua
@none          xxx links to TSNone
	Last set from Lua
TSNone         xxx cterm= gui=
	Last set from Lua
@tag           xxx links to TSTag
	Last set from Lua
@tag.attribute xxx links to TSTagAttribute
	Last set from Lua
TSTagAttribute xxx links to TSProperty
	Last set from Lua
@tag.delimiter xxx links to TSTagDelimiter
	Last set from Lua
@text.strong   xxx links to TSStrong
	Last set from Lua
@text.emphasis xxx links to TSEmphasis
	Last set from Lua
@text.strike   xxx links to TSStrike
	Last set from Lua
TSStrike       xxx cterm=strikethrough gui=strikethrough
	Last set from Lua
@text.title    xxx links to TSTitle
	Last set from Lua
TSTitle        xxx links to Title
	Last set from Lua
@text.literal  xxx links to TSLiteral
	Last set from Lua
TSLiteral      xxx links to String
	Last set from Lua
@text.uri      xxx links to TSURI
	Last set from Lua
TSURI          xxx links to Underlined
	Last set from Lua
@text.math     xxx links to TSMath
	Last set from Lua
TSMath         xxx links to Special
	Last set from Lua
@text.reference xxx links to TSTextReference
	Last set from Lua
TSTextReference xxx links to Constant
	Last set from Lua
@text.environment xxx links to TSEnvironment
	Last set from Lua
TSEnvironment  xxx links to Macro
	Last set from Lua
@text.environment.name xxx links to TSEnvironmentName
	Last set from Lua
TSEnvironmentName xxx links to Type
	Last set from Lua
@text.note     xxx links to TSNote
	Last set from Lua
TSNote         xxx links to SpecialComment
	Last set from Lua
@text.warning  xxx links to TSWarning
	Last set from Lua
TSWarning      xxx links to Todo
	Last set from Lua
@text.danger   xxx links to TSDanger
	Last set from Lua
TSDanger       xxx links to WarningMsg
	Last set from Lua
TSTodo         xxx links to Todo
	Last set from Lua
TSString       xxx links to String
	Last set from Lua
@type.builtin  xxx links to TSTypeBuiltin
	Last set from Lua
TSTypeBuiltin  xxx links to Type
	Last set from Lua
TSType         xxx links to Type
	Last set from Lua
@type.qualifier xxx links to TSTypeQualifier
	Last set from Lua
TSTypeQualifier xxx links to Type
	Last set from Lua
TSTypeDefinition xxx links to Typedef
	Last set from Lua
@symbol        xxx links to TSSymbol
	Last set from Lua
TSSymbol       xxx links to Identifier
	Last set from Lua
TSField        xxx links to Identifier
	Last set from Lua
@variable      xxx links to TSVariable
	Last set from Lua
TSText         xxx links to TSNone
	Last set from Lua
@variable.builtin xxx links to TSVariableBuiltin
	Last set from Lua
TSComment      xxx links to Comment
	Last set from Lua
TSFloat        xxx links to Float
	Last set from Lua
@namespace     xxx links to TSNamespace
	Last set from Lua
TSNamespace    xxx links to Include
	Last set from Lua
@annotation    xxx links to TSAnnotation
	Last set from Lua
TSConstant     xxx links to Constant
	Last set from Lua
@attribute     xxx links to TSAttribute
	Last set from Lua
TSAttribute    xxx links to PreProc
	Last set from Lua
TSConditional  xxx links to Conditional
	Last set from Lua
TSMethod       xxx links to Function
	Last set from Lua
TSFunction     xxx links to Function
	Last set from Lua
TSCharacterSpecial xxx links to SpecialChar
	Last set from Lua
styledDefinition xxx cleared
airline_x_inactive xxx ctermfg=7 ctermbg=0 guifg=#e5e9f0 guibg=#3b4252
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/airline/highlighter.vim line 239
airline_x_inactive_bold xxx cterm=bold ctermfg=7 ctermbg=0 gui=bold guifg=#e5e9f0 guibg=#3b4252
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/airline/highlighter.vim line 239
airline_x_inactive_red xxx ctermfg=160 ctermbg=0 guifg=#ff0000 guibg=#3b4252
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/airline/highlighter.vim line 239
airline_y_inactive xxx ctermfg=7 ctermbg=8 guifg=#e5e9f0 guibg=#4c566a
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/airline/highlighter.vim line 239
airline_y_inactive_bold xxx cterm=bold ctermfg=7 ctermbg=8 gui=bold guifg=#e5e9f0 guibg=#4c566a
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/airline/highlighter.vim line 239
airline_y_inactive_red xxx ctermfg=160 ctermbg=8 guifg=#ff0000 guibg=#4c566a
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/airline/highlighter.vim line 239
airline_z_inactive xxx ctermfg=7 ctermbg=8 guifg=#e5e9f0 guibg=#4c566a
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/airline/highlighter.vim line 239
airline_z_inactive_bold xxx cterm=bold ctermfg=7 ctermbg=8 gui=bold guifg=#e5e9f0 guibg=#4c566a
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/airline/highlighter.vim line 239
airline_z_inactive_red xxx ctermfg=160 ctermbg=8 guifg=#ff0000 guibg=#4c566a
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/airline/highlighter.vim line 239
airline_term_inactive xxx ctermfg=7 ctermbg=0 guifg=#e5e9f0 guibg=#3b4252
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/airline/highlighter.vim line 239
airline_term_inactive_bold xxx cterm=bold ctermfg=7 ctermbg=0 gui=bold guifg=#e5e9f0 guibg=#3b4252
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/airline/highlighter.vim line 239
airline_term_inactive_red xxx ctermfg=160 ctermbg=0 guifg=#ff0000 guibg=#3b4252
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/airline/highlighter.vim line 239
airline_error_inactive xxx ctermfg=0 ctermbg=1 guifg=#2e3440 guibg=#bf616a
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/airline/highlighter.vim line 239
airline_error_inactive_bold xxx cterm=bold ctermfg=0 ctermbg=1 gui=bold guifg=#2e3440 guibg=#bf616a
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/airline/highlighter.vim line 239
airline_error_inactive_red xxx ctermfg=160 ctermbg=1 guifg=#ff0000 guibg=#bf616a
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/airline/highlighter.vim line 239
airline_a_inactive xxx ctermfg=7 ctermbg=8 guifg=#e5e9f0 guibg=#4c566a
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/airline/highlighter.vim line 239
airline_a_inactive_bold xxx cterm=bold ctermfg=7 ctermbg=8 gui=bold guifg=#e5e9f0 guibg=#4c566a
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/airline/highlighter.vim line 239
airline_a_inactive_red xxx ctermfg=160 ctermbg=8 guifg=#ff0000 guibg=#4c566a
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/airline/highlighter.vim line 239
airline_b_inactive xxx ctermfg=7 ctermbg=8 guifg=#e5e9f0 guibg=#4c566a
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/airline/highlighter.vim line 239
airline_b_inactive_bold xxx cterm=bold ctermfg=7 ctermbg=8 gui=bold guifg=#e5e9f0 guibg=#4c566a
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/airline/highlighter.vim line 239
airline_b_inactive_red xxx ctermfg=160 ctermbg=8 guifg=#ff0000 guibg=#4c566a
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/airline/highlighter.vim line 239
airline_c_inactive xxx ctermfg=7 ctermbg=0 guifg=#e5e9f0 guibg=#3b4252
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/airline/highlighter.vim line 239
airline_c_inactive_bold xxx cterm=bold ctermfg=7 ctermbg=0 gui=bold guifg=#e5e9f0 guibg=#3b4252
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/airline/highlighter.vim line 239
airline_c_inactive_red xxx ctermfg=160 ctermbg=0 guifg=#ff0000 guibg=#3b4252
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/airline/highlighter.vim line 239
airline_warning_inactive xxx ctermfg=8 ctermbg=3 guifg=#3b4252 guibg=#ebcb8b
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/airline/highlighter.vim line 239
airline_warning_inactive_bold xxx cterm=bold ctermfg=8 ctermbg=3 gui=bold guifg=#3b4252 guibg=#ebcb8b
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/airline/highlighter.vim line 239
airline_warning_inactive_red xxx ctermfg=160 ctermbg=3 guifg=#ff0000 guibg=#ebcb8b
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/airline/highlighter.vim line 239
airline_x      xxx ctermfg=7 ctermbg=8 guifg=#e5e9f0 guibg=#4c566a
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/airline/highlighter.vim line 239
airline_x_bold xxx cterm=bold ctermfg=7 ctermbg=8 gui=bold guifg=#e5e9f0 guibg=#4c566a
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/airline/highlighter.vim line 239
airline_x_red  xxx ctermfg=160 ctermbg=8 guifg=#ff0000 guibg=#4c566a
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/airline/highlighter.vim line 239
airline_y      xxx ctermfg=0 ctermbg=4 guifg=#3b4252 guibg=#81a1c1
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/airline/highlighter.vim line 239
airline_y_bold xxx cterm=bold ctermfg=0 ctermbg=4 gui=bold guifg=#3b4252 guibg=#81a1c1
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/airline/highlighter.vim line 239
airline_y_red  xxx ctermfg=160 ctermbg=4 guifg=#ff0000 guibg=#81a1c1
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/airline/highlighter.vim line 239
airline_z      xxx ctermfg=0 ctermbg=6 guifg=#3b4252 guibg=#88c0d0
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/airline/highlighter.vim line 239
airline_z_bold xxx cterm=bold ctermfg=0 ctermbg=6 gui=bold guifg=#3b4252 guibg=#88c0d0
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/airline/highlighter.vim line 239
airline_z_red  xxx ctermfg=160 ctermbg=6 guifg=#ff0000 guibg=#88c0d0
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/airline/highlighter.vim line 239
airline_term   xxx ctermfg=7 ctermbg=8 guifg=#e5e9f0 guibg=#4c566a
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/airline/highlighter.vim line 239
airline_term_bold xxx cterm=bold ctermfg=7 ctermbg=8 gui=bold guifg=#e5e9f0 guibg=#4c566a
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/airline/highlighter.vim line 239
airline_term_red xxx ctermfg=160 ctermbg=8 guifg=#ff0000 guibg=#4c566a
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/airline/highlighter.vim line 239
airline_error  xxx ctermfg=0 ctermbg=1 guifg=#2e3440 guibg=#bf616a
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/airline/highlighter.vim line 239
airline_error_bold xxx cterm=bold ctermfg=0 ctermbg=1 gui=bold guifg=#2e3440 guibg=#bf616a
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/airline/highlighter.vim line 239
airline_error_red xxx ctermfg=160 ctermbg=1 guifg=#ff0000 guibg=#bf616a
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/airline/highlighter.vim line 239
airline_a      xxx ctermfg=0 ctermbg=6 guifg=#3b4252 guibg=#88c0d0
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/airline/highlighter.vim line 239
airline_a_bold xxx cterm=bold ctermfg=0 ctermbg=6 gui=bold guifg=#3b4252 guibg=#88c0d0
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/airline/highlighter.vim line 239
airline_a_red  xxx ctermfg=160 ctermbg=6 guifg=#ff0000 guibg=#88c0d0
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/airline/highlighter.vim line 239
airline_b      xxx ctermfg=0 ctermbg=4 guifg=#3b4252 guibg=#81a1c1
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/airline/highlighter.vim line 239
airline_b_bold xxx cterm=bold ctermfg=0 ctermbg=4 gui=bold guifg=#3b4252 guibg=#81a1c1
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/airline/highlighter.vim line 239
airline_b_red  xxx ctermfg=160 ctermbg=4 guifg=#ff0000 guibg=#81a1c1
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/airline/highlighter.vim line 239
airline_c      xxx ctermfg=7 ctermbg=8 guifg=#e5e9f0 guibg=#4c566a
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/airline/highlighter.vim line 239
airline_c_bold xxx cterm=bold ctermfg=7 ctermbg=8 gui=bold guifg=#e5e9f0 guibg=#4c566a
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/airline/highlighter.vim line 239
airline_c_red  xxx ctermfg=160 ctermbg=8 guifg=#ff0000 guibg=#4c566a
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/airline/highlighter.vim line 239
airline_warning xxx ctermfg=8 ctermbg=3 guifg=#3b4252 guibg=#ebcb8b
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/airline/highlighter.vim line 239
airline_warning_bold xxx cterm=bold ctermfg=8 ctermbg=3 gui=bold guifg=#3b4252 guibg=#ebcb8b
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/airline/highlighter.vim line 239
airline_warning_red xxx ctermfg=160 ctermbg=3 guifg=#ff0000 guibg=#ebcb8b
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/airline/highlighter.vim line 239
airline_a_to_airline_b xxx ctermfg=6 ctermbg=4 guifg=#88c0d0 guibg=#81a1c1
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/airline/highlighter.vim line 239
airline_b_to_airline_c xxx ctermfg=4 ctermbg=8 guifg=#81a1c1 guibg=#4c566a
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/airline/highlighter.vim line 239
airline_c_to_airline_x xxx ctermfg=8 ctermbg=8 guifg=#4c566a guibg=#4c566a
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/airline/highlighter.vim line 239
airline_x_to_airline_y xxx ctermfg=4 ctermbg=8 guifg=#81a1c1 guibg=#4c566a
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/airline/highlighter.vim line 239
airline_y_to_airline_z xxx ctermfg=6 ctermbg=4 guifg=#88c0d0 guibg=#81a1c1
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/airline/highlighter.vim line 239
airline_z_to_airline_warning xxx ctermfg=3 ctermbg=6 guifg=#ebcb8b guibg=#88c0d0
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/airline/highlighter.vim line 239
airline_warning_to_airline_error xxx ctermfg=1 ctermbg=3 guifg=#bf616a guibg=#ebcb8b
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/airline/highlighter.vim line 239
airline_c1_inactive xxx ctermfg=7 ctermbg=0 guifg=#e5e9f0 guibg=#3b4252
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/airline/highlighter.vim line 239
airline_x_to_airline_y_inactive xxx ctermfg=8 ctermbg=0 guifg=#4c566a guibg=#3b4252
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/airline/highlighter.vim line 239
airline_z_to_airline_warning_inactive xxx ctermfg=3 ctermbg=8 guifg=#ebcb8b guibg=#4c566a
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/airline/highlighter.vim line 239
airline_c_to_airline_x_inactive xxx ctermfg=0 ctermbg=0 guifg=#3b4252 guibg=#3b4252
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/airline/highlighter.vim line 239
airline_a_to_airline_b_inactive xxx ctermfg=8 ctermbg=8 guifg=#4c566a guibg=#4c566a
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/airline/highlighter.vim line 239
airline_warning_to_airline_error_inactive xxx ctermfg=1 ctermbg=3 guifg=#bf616a guibg=#ebcb8b
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/airline/highlighter.vim line 239
airline_y_to_airline_z_inactive xxx ctermfg=8 ctermbg=8 guifg=#4c566a guibg=#4c566a
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/airline/highlighter.vim line 239
airline_b_to_airline_c_inactive xxx ctermfg=8 ctermbg=0 guifg=#4c566a guibg=#3b4252
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/airline/highlighter.vim line 239
@spell         xxx cleared
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/coc)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 1: sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/coc/compat.vim"
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/coc/compat.vim
continuing in coc#util#get_editoroption
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/coc)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/coc/ui.vim"
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/coc/ui.vim
Executing User Autocommands for "CocNvimInit"
autocommand call s:doautocmd_from_coc()

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.config/coc/extensions/node_modules/coc-fzf-preview/plugin)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
sourcing "/Users/tomoya_tanaka/.config/coc/extensions/node_modules/coc-fzf-preview/plugin/fzf_preview.vim"
finished sourcing /Users/tomoya_tanaka/.config/coc/extensions/node_modules/coc-fzf-preview/plugin/fzf_preview.vim
Executing CursorHold Autocommands for "*"
autocommand silent call CocActionAsync('highlight')

autocommand silent call CocActionAsync('highlight')

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/coc)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 0: sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/coc/float.vim"
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/coc/float.vim
continuing in CursorHold Autocommands for "*"
autocommand call s:Autocmd('CursorHold', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/coc)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/coc/notify.vim"
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/coc/notify.vim
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/coc)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 12: sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/coc/dict.vim"
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/coc/dict.vim
continuing in coc#notify#create
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/coc)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 2: sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/coc/window.vim"
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/coc/window.vim
continuing in coc#float#get_related
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/coc)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 8: sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/coc/string.vim"
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/coc/string.vim
continuing in coc#float#create_border_lines
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/coc)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/coc/cursor.vim"
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/coc/cursor.vim
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/coc)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 5: sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/coc/math.vim"
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/coc/math.vim
continuing in <SNR>174_animate
Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/autoload/provider)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
sourcing "/opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/autoload/provider/python3.vim"
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/autoload/provider)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 10: sourcing "/opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/autoload/provider/pythonx.vim"
finished sourcing /opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/autoload/provider/pythonx.vim
continuing in /opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/autoload/provider/python3.vim
finished sourcing /opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/autoload/provider/python3.vim
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/autoload)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 12: sourcing "/opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/autoload/provider.vim"
finished sourcing /opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/autoload/provider.vim
continuing in provider#pythonx#Require
Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing WinClosed Autocommands for "*"
autocommand call s:HandleWinClosed(+expand('<amatch>'))

Executing BufWinLeave Autocommands for "*"
autocommand call s:Autocmd('BufWinLeave', +expand('<abuf>'), bufwinid(+expand('<abuf>')))

Executing BufHidden Autocommands for "*"
autocommand call s:Autocmd('BufHidden', +expand('<abuf>'))

Executing CursorHold Autocommands for "*"
autocommand silent call CocActionAsync('highlight')

autocommand silent call CocActionAsync('highlight')

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorHold Autocommands for "*"
autocommand silent call CocActionAsync('highlight')

autocommand silent call CocActionAsync('highlight')

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorHold Autocommands for "*"
autocommand silent call CocActionAsync('highlight')

autocommand silent call CocActionAsync('highlight')

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing InsertEnter Autocommands for "*"
autocommand call s:Autocmd('InsertEnter', +expand('<abuf>'))

Executing InsertEnter Autocommands for "*"
autocommand call lexima#init() | autocmd! lexima-init

Executing InsertEnter Autocommands for "*"
autocommand call lexima#insmode#clear_stack()

autocommand call s:setup_insmode()

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing CursorHoldI Autocommands for "*"
autocommand call s:Autocmd('CursorHoldI', +expand('<abuf>'), [line('.'), col('.')])

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing InsertLeave Autocommands for "*"
autocommand call s:Autocmd('InsertLeave', +expand('<abuf>'))

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorHold Autocommands for "*"
autocommand silent call CocActionAsync('highlight')

autocommand silent call CocActionAsync('highlight')

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()


Executing BufWritePre Autocommands for "*"
autocommand call s:SyncAutocmd('BufWritePre', +expand('<abuf>'), bufname(+expand('<abuf>')), getbufvar(+expand('<abuf>'), 'changedtick'))

"index.cpp" 
"index.cpp" 12L, 271B written
Executing BufWritePost Autocommands for "*"
autocommand call s:Autocmd('BufWritePost', +expand('<abuf>'), getbufvar(+expand('<abuf>'), 'changedtick'))

Executing BufWritePost Autocommands for "*"
autocommand call s:reset_untracked_cache(0)

Executing BufWritePost Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing BufWritePost Autocommands for "*"
autocommand call s:mru_append(expand('<amatch>'))

autocommand call s:mrw_append(expand('<amatch>'))

"index.cpp" 12L, 271B written
Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChanged Autocommands for "*"
autocommand call s:Autocmd('TextChanged', +expand('<abuf>'), getbufvar(+expand('<abuf>'), 'changedtick'))

Executing TextChanged Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing CursorHold Autocommands for "*"
autocommand silent call CocActionAsync('highlight')

autocommand silent call CocActionAsync('highlight')

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing VimResized Autocommands for "*"
autocommand call <sid>on_focus_gained()

Executing User Autocommands for "AirlineBeforeRefresh"
autocommand call s:sh_autocmd_handler()

Executing VimResized Autocommands for "*"
autocommand call s:Autocmd('VimResized', &columns, &lines)

Executing WinScrolled Autocommands for "*"
autocommand call s:HandleWinScrolled(+expand('<amatch>'))

Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing VimResized Autocommands for "*"
autocommand call <sid>on_focus_gained()

Executing User Autocommands for "AirlineBeforeRefresh"
autocommand call s:sh_autocmd_handler()

Executing VimResized Autocommands for "*"
autocommand call s:Autocmd('VimResized', &columns, &lines)

Executing WinScrolled Autocommands for "*"
autocommand call s:HandleWinScrolled(+expand('<amatch>'))

Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing VimResized Autocommands for "*"
autocommand call <sid>on_focus_gained()

Executing User Autocommands for "AirlineBeforeRefresh"
autocommand call s:sh_autocmd_handler()

Executing VimResized Autocommands for "*"
autocommand call s:Autocmd('VimResized', &columns, &lines)

Executing WinScrolled Autocommands for "*"
autocommand call s:HandleWinScrolled(+expand('<amatch>'))

Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing VimResized Autocommands for "*"
autocommand call <sid>on_focus_gained()

Executing User Autocommands for "AirlineBeforeRefresh"
autocommand call s:sh_autocmd_handler()

Executing VimResized Autocommands for "*"
autocommand call s:Autocmd('VimResized', &columns, &lines)

Executing WinScrolled Autocommands for "*"
autocommand call s:HandleWinScrolled(+expand('<amatch>'))

Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing VimResized Autocommands for "*"
autocommand call <sid>on_focus_gained()

Executing User Autocommands for "AirlineBeforeRefresh"
autocommand call s:sh_autocmd_handler()

Executing VimResized Autocommands for "*"
autocommand call s:Autocmd('VimResized', &columns, &lines)

Executing WinScrolled Autocommands for "*"
autocommand call s:HandleWinScrolled(+expand('<amatch>'))

Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing VimResized Autocommands for "*"
autocommand call <sid>on_focus_gained()

Executing User Autocommands for "AirlineBeforeRefresh"
autocommand call s:sh_autocmd_handler()

Executing VimResized Autocommands for "*"
autocommand call s:Autocmd('VimResized', &columns, &lines)

Executing WinScrolled Autocommands for "*"
autocommand call s:HandleWinScrolled(+expand('<amatch>'))

Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing VimResized Autocommands for "*"
autocommand call <sid>on_focus_gained()

Executing User Autocommands for "AirlineBeforeRefresh"
autocommand call s:sh_autocmd_handler()

Executing VimResized Autocommands for "*"
autocommand call s:Autocmd('VimResized', &columns, &lines)

Executing WinScrolled Autocommands for "*"
autocommand call s:HandleWinScrolled(+expand('<amatch>'))

Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing VimResized Autocommands for "*"
autocommand call <sid>on_focus_gained()

Executing User Autocommands for "AirlineBeforeRefresh"
autocommand call s:sh_autocmd_handler()

Executing VimResized Autocommands for "*"
autocommand call s:Autocmd('VimResized', &columns, &lines)

Executing WinScrolled Autocommands for "*"
autocommand call s:HandleWinScrolled(+expand('<amatch>'))

Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing VimResized Autocommands for "*"
autocommand call <sid>on_focus_gained()

Executing User Autocommands for "AirlineBeforeRefresh"
autocommand call s:sh_autocmd_handler()

Executing VimResized Autocommands for "*"
autocommand call s:Autocmd('VimResized', &columns, &lines)

Executing WinScrolled Autocommands for "*"
autocommand call s:HandleWinScrolled(+expand('<amatch>'))

Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing VimResized Autocommands for "*"
autocommand call <sid>on_focus_gained()

Executing User Autocommands for "AirlineBeforeRefresh"
autocommand call s:sh_autocmd_handler()

Executing VimResized Autocommands for "*"
autocommand call s:Autocmd('VimResized', &columns, &lines)

Executing WinScrolled Autocommands for "*"
autocommand call s:HandleWinScrolled(+expand('<amatch>'))

Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing VimResized Autocommands for "*"
autocommand call <sid>on_focus_gained()

Executing User Autocommands for "AirlineBeforeRefresh"
autocommand call s:sh_autocmd_handler()

Executing VimResized Autocommands for "*"
autocommand call s:Autocmd('VimResized', &columns, &lines)

Executing WinScrolled Autocommands for "*"
autocommand call s:HandleWinScrolled(+expand('<amatch>'))

Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing VimResized Autocommands for "*"
autocommand call <sid>on_focus_gained()

Executing User Autocommands for "AirlineBeforeRefresh"
autocommand call s:sh_autocmd_handler()

Executing VimResized Autocommands for "*"
autocommand call s:Autocmd('VimResized', &columns, &lines)

Executing WinScrolled Autocommands for "*"
autocommand call s:HandleWinScrolled(+expand('<amatch>'))

Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing VimResized Autocommands for "*"
autocommand call <sid>on_focus_gained()

Executing User Autocommands for "AirlineBeforeRefresh"
autocommand call s:sh_autocmd_handler()

Executing VimResized Autocommands for "*"
autocommand call s:Autocmd('VimResized', &columns, &lines)

Executing WinScrolled Autocommands for "*"
autocommand call s:HandleWinScrolled(+expand('<amatch>'))

Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing VimResized Autocommands for "*"
autocommand call <sid>on_focus_gained()

Executing User Autocommands for "AirlineBeforeRefresh"
autocommand call s:sh_autocmd_handler()

Executing VimResized Autocommands for "*"
autocommand call s:Autocmd('VimResized', &columns, &lines)

Executing WinScrolled Autocommands for "*"
autocommand call s:HandleWinScrolled(+expand('<amatch>'))

Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing VimResized Autocommands for "*"
autocommand call <sid>on_focus_gained()

Executing User Autocommands for "AirlineBeforeRefresh"
autocommand call s:sh_autocmd_handler()

Executing VimResized Autocommands for "*"
autocommand call s:Autocmd('VimResized', &columns, &lines)

Executing WinScrolled Autocommands for "*"
autocommand call s:HandleWinScrolled(+expand('<amatch>'))

Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()


Executing BufWritePre Autocommands for "*"
autocommand call s:SyncAutocmd('BufWritePre', +expand('<abuf>'), bufname(+expand('<abuf>')), getbufvar(+expand('<abuf>'), 'changedtick'))

"index.cpp" 
"index.cpp" 13L, 274B written
Executing BufWritePost Autocommands for "*"
autocommand call s:Autocmd('BufWritePost', +expand('<abuf>'), getbufvar(+expand('<abuf>'), 'changedtick'))

Executing BufWritePost Autocommands for "*"
autocommand call s:reset_untracked_cache(0)

Executing BufWritePost Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing BufWritePost Autocommands for "*"
autocommand call s:mru_append(expand('<amatch>'))

autocommand call s:mrw_append(expand('<amatch>'))

"index.cpp" 13L, 274B written
Executing CursorHold Autocommands for "*"
autocommand silent call CocActionAsync('highlight')

autocommand silent call CocActionAsync('highlight')

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorHold Autocommands for "*"
autocommand silent call CocActionAsync('highlight')

autocommand silent call CocActionAsync('highlight')

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorHold Autocommands for "*"
autocommand silent call CocActionAsync('highlight')

autocommand silent call CocActionAsync('highlight')

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing InsertEnter Autocommands for "*"
autocommand call s:Autocmd('InsertEnter', +expand('<abuf>'))

Executing InsertEnter Autocommands for "*"
autocommand call lexima#insmode#clear_stack()

autocommand call s:setup_insmode()

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing CursorHoldI Autocommands for "*"
autocommand call s:Autocmd('CursorHoldI', +expand('<abuf>'), [line('.'), col('.')])

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing InsertLeave Autocommands for "*"
autocommand call s:Autocmd('InsertLeave', +expand('<abuf>'))

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorHold Autocommands for "*"
autocommand silent call CocActionAsync('highlight')

autocommand silent call CocActionAsync('highlight')

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()


client coc stopped!
starting coc.nvim service

NVIM v0.8.0
Build type: Release
LuaJIT 2.1.0-beta3
Compiled by brew@HMBRW-A-001-M1-004.local

Features: +acl +iconv +tui
See ":help feature-compile"

   system vimrc file: "$VIM/sysinit.vim"
  fall-back for $VIM: "/opt/homebrew/Cellar/neovim/0.8.0/share/nvim"

Run :checkhealth for more info
SpecialKey     xxx ctermfg=8 guifg=#4c566a
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
EndOfBuffer    xxx ctermfg=0 guifg=#3b4252
	Last set from ~/dotfiles/.config/nvim/settings/user/appearance.vim line 11
TermCursor     xxx cterm=reverse gui=reverse
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 11
TermCursorNC   xxx ctermbg=0 guibg=#3b4252
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
NonText        xxx ctermfg=8 gui=bold guifg=#434c5e
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
Directory      xxx ctermfg=6 guifg=#88c0d0
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
ErrorMsg       xxx ctermbg=1 guifg=#d8dee9 guibg=#bf616a
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
IncSearch      xxx cterm=underline ctermfg=15 ctermbg=12 gui=underline guifg=#eceff4 guibg=#5e81ac
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
Search         xxx ctermfg=0 ctermbg=6 guifg=#3b4252 guibg=#88c0d0
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
CurSearch      xxx cleared
MoreMsg        xxx ctermfg=6 gui=bold guifg=#88c0d0
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
ModeMsg        xxx cterm=bold gui=bold guifg=#d8dee9
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
LineNr         xxx ctermfg=8 guifg=#4c566a
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
LineNrAbove    xxx links to LineNr
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 9
LineNrBelow    xxx links to LineNr
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 9
CursorLineNr   xxx guifg=#d8dee9
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
CursorLineSign xxx links to SignColumn
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 9
CursorLineFold xxx links to FoldColumn
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 9
Question       xxx gui=bold guifg=#d8dee9
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
StatusLine     xxx ctermfg=6 ctermbg=8 guifg=#88c0d0 guibg=#4c566a
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
StatusLineNC   xxx ctermbg=0 guifg=#d8dee9 guibg=#3b4252
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
WinSeparator   xxx links to VertSplit
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 9
VertSplit      xxx ctermfg=8 guifg=#434c5e guibg=#2e3440
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
Title          xxx guifg=#d8dee9
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
Visual         xxx ctermbg=0 guibg=Grey30
	Last set from ~/dotfiles/.config/nvim/settings/user/appearance.vim line 8
VisualNC       xxx cleared
WarningMsg     xxx ctermfg=0 ctermbg=3 guifg=#2e3440 guibg=#ebcb8b
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
WildMenu       xxx ctermfg=6 ctermbg=0 guifg=#88c0d0 guibg=#3b4252
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
Folded         xxx cterm=bold ctermfg=8 ctermbg=0 gui=bold guifg=#4c566a guibg=#3b4252
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
FoldColumn     xxx ctermfg=8 guifg=#4c566a guibg=#2e3440
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
DiffAdd        xxx cterm=reverse ctermfg=2 gui=reverse guifg=#a3be8c guibg=#2e3440
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
DiffChange     xxx cterm=reverse ctermfg=3 gui=reverse guifg=#ebcb8b guibg=#2e3440
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
DiffDelete     xxx cterm=reverse ctermfg=1 gui=reverse guifg=#bf616a guibg=#2e3440
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
DiffText       xxx cterm=reverse ctermfg=4 gui=reverse guifg=#81a1c1 guibg=#2e3440
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
SignColumn     xxx ctermfg=0 guifg=#3b4252
	Last set from ~/dotfiles/.config/nvim/settings/user/appearance.vim line 10
Conceal        xxx ctermfg=7 guifg=LightGrey
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
SpellBad       xxx cterm=underline ctermfg=1 gui=undercurl guifg=#bf616a guibg=#2e3440 guisp=#bf616a
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
SpellCap       xxx cterm=underline ctermfg=3 gui=undercurl guifg=#ebcb8b guibg=#2e3440 guisp=#ebcb8b
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
SpellRare      xxx cterm=underline ctermfg=15 gui=undercurl guifg=#eceff4 guibg=#2e3440 guisp=#eceff4
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
SpellLocal     xxx cterm=underline ctermfg=7 gui=undercurl guifg=#e5e9f0 guibg=#2e3440 guisp=#e5e9f0
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
Pmenu          xxx ctermbg=0 guifg=#d8dee9 guibg=#434c5e
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
PmenuSel       xxx ctermfg=6 ctermbg=8 guifg=#88c0d0 guibg=#4c566a
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
PmenuSbar      xxx ctermbg=0 guifg=#d8dee9 guibg=#434c5e
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
PmenuThumb     xxx ctermbg=8 guifg=#88c0d0 guibg=#4c566a
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
TabLine        xxx ctermbg=0 guifg=#d8dee9 guibg=#3b4252
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
TabLineSel     xxx ctermfg=6 ctermbg=8 guifg=#88c0d0 guibg=#4c566a
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
TabLineFill    xxx ctermbg=0 guifg=#d8dee9 guibg=#3b4252
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
CursorColumn   xxx ctermbg=0 guibg=#3b4252
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
CursorLine     xxx ctermbg=0 guibg=#3b4252
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
ColorColumn    xxx ctermbg=0 guibg=#3b4252
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
QuickFixLine   xxx links to Search
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 9
Whitespace     xxx links to NonText
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 9
NormalNC       xxx cleared
MsgSeparator   xxx links to StatusLine
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 9
NormalFloat    xxx links to Pmenu
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 9
MsgArea        xxx cleared
FloatBorder    xxx links to WinSeparator
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 9
WinBar         xxx cterm=bold gui=bold
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 11
WinBarNC       xxx links to WinBar
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 9
Cursor         xxx guifg=#2e3440 guibg=#d8dee9
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
lCursor        xxx guifg=bg guibg=fg
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 11
Normal         xxx guifg=#d8dee9
	Last set from ~/dotfiles/.config/nvim/settings/user/appearance.vim line 9
Substitute     xxx links to Search
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 9
FloatShadow    xxx guibg=Black blend=80
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 9
FloatShadowThrough xxx guibg=Black blend=100
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 9
RedrawDebugNormal xxx cterm=reverse gui=reverse
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 11
RedrawDebugClear xxx ctermbg=11 guibg=Yellow
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 11
RedrawDebugComposed xxx ctermbg=10 guibg=Green
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 11
RedrawDebugRecompose xxx ctermbg=9 guibg=Red
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 11
Error          xxx ctermfg=15 ctermbg=1 guifg=#d8dee9 guibg=#bf616a
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
Todo           xxx ctermfg=3 guifg=#ebcb8b
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
String         xxx ctermfg=2 guifg=#a3be8c
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
Constant       xxx guifg=#d8dee9
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
Character      xxx ctermfg=2 guifg=#a3be8c
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
Number         xxx ctermfg=5 guifg=#b48ead
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
Boolean        xxx ctermfg=4 guifg=#81a1c1
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
Float          xxx ctermfg=5 guifg=#b48ead
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
Function       xxx ctermfg=6 guifg=#88c0d0
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
Identifier     xxx guifg=#d8dee9
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
Conditional    xxx ctermfg=4 guifg=#81a1c1
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
Statement      xxx ctermfg=4 gui=bold guifg=#81a1c1
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
Repeat         xxx ctermfg=4 guifg=#81a1c1
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
Label          xxx ctermfg=4 guifg=#81a1c1
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
Operator       xxx ctermfg=4 guifg=#81a1c1
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
Keyword        xxx ctermfg=4 guifg=#81a1c1
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
Exception      xxx ctermfg=4 guifg=#81a1c1
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
Include        xxx ctermfg=4 guifg=#81a1c1
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
PreProc        xxx ctermfg=4 guifg=#81a1c1
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
Define         xxx ctermfg=4 guifg=#81a1c1
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
Macro          xxx links to Define
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 292
PreCondit      xxx links to PreProc
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 9
StorageClass   xxx ctermfg=4 guifg=#81a1c1
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
Type           xxx ctermfg=4 guifg=#81a1c1
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
Structure      xxx ctermfg=4 guifg=#81a1c1
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
Typedef        xxx ctermfg=4 guifg=#81a1c1
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
Tag            xxx guifg=#d8dee9
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
Special        xxx guifg=#d8dee9
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
SpecialChar    xxx ctermfg=3 guifg=#ebcb8b
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
Delimiter      xxx ctermfg=15 guifg=#eceff4
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
SpecialComment xxx ctermfg=6 guifg=#88c0d0
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
Debug          xxx links to Special
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 9
DiagnosticError xxx ctermfg=1 guifg=#bf616a
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
DiagnosticWarn xxx ctermfg=3 guifg=#ebcb8b
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
DiagnosticInfo xxx ctermfg=6 guifg=#88c0d0
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
DiagnosticHint xxx ctermfg=12 guifg=#5e81ac
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
DiagnosticUnderlineError xxx cterm=underline ctermfg=1 gui=undercurl guifg=#bf616a guisp=Red
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
DiagnosticUnderlineWarn xxx cterm=underline ctermfg=3 gui=undercurl guifg=#ebcb8b guisp=Orange
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
DiagnosticUnderlineInfo xxx cterm=underline ctermfg=6 gui=undercurl guifg=#88c0d0 guisp=LightBlue
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
DiagnosticUnderlineHint xxx cterm=underline ctermfg=12 gui=undercurl guifg=#5e81ac guisp=LightGrey
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
DiagnosticVirtualTextError xxx links to DiagnosticError
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 9
DiagnosticVirtualTextWarn xxx links to DiagnosticWarn
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 9
DiagnosticVirtualTextInfo xxx links to DiagnosticInfo
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 9
DiagnosticVirtualTextHint xxx links to DiagnosticHint
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 9
DiagnosticFloatingError xxx links to DiagnosticError
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 9
DiagnosticFloatingWarn xxx links to DiagnosticWarn
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 9
DiagnosticFloatingInfo xxx links to DiagnosticInfo
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 9
DiagnosticFloatingHint xxx links to DiagnosticHint
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 9
DiagnosticSignError xxx links to DiagnosticError
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 9
DiagnosticSignWarn xxx links to DiagnosticWarn
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 9
DiagnosticSignInfo xxx links to DiagnosticInfo
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 9
DiagnosticSignHint xxx links to DiagnosticHint
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 9
@text          xxx links to TSText
	Last set from Lua
@text.underline xxx links to TSUnderline
	Last set from Lua
Underlined     xxx cterm=underline ctermfg=81 gui=underline guifg=#80a0ff
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 11
@todo          xxx links to TSTodo
	Last set from Lua
@debug         xxx links to TSDebug
	Last set from Lua
@comment       xxx links to TSComment
	Last set from Lua
Comment        xxx ctermfg=8 guifg=#616e88
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
@punctuation   xxx links to Delimiter
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 9
@constant      xxx links to TSConstant
	Last set from Lua
@constant.builtin xxx links to TSConstBuiltin
	Last set from Lua
@constant.macro xxx links to TSConstMacro
	Last set from Lua
@define        xxx links to TSDefine
	Last set from Lua
@macro         xxx links to Macro
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 9
@string        xxx links to TSString
	Last set from Lua
@string.escape xxx links to TSStringEscape
	Last set from Lua
@character     xxx links to TSCharacter
	Last set from Lua
@character.special xxx links to TSCharacterSpecial
	Last set from Lua
@number        xxx links to TSNumber
	Last set from Lua
@boolean       xxx links to TSBoolean
	Last set from Lua
@float         xxx links to TSFloat
	Last set from Lua
@function      xxx links to TSFunction
	Last set from Lua
@function.builtin xxx links to TSFuncBuiltin
	Last set from Lua
@function.macro xxx links to TSFuncMacro
	Last set from Lua
@parameter     xxx links to TSParameter
	Last set from Lua
@method        xxx links to TSMethod
	Last set from Lua
@field         xxx links to TSField
	Last set from Lua
@property      xxx links to TSProperty
	Last set from Lua
@constructor   xxx links to TSConstructor
	Last set from Lua
@conditional   xxx links to TSConditional
	Last set from Lua
@repeat        xxx links to TSRepeat
	Last set from Lua
@label         xxx links to TSLabel
	Last set from Lua
@operator      xxx links to TSOperator
	Last set from Lua
@keyword       xxx links to TSKeyword
	Last set from Lua
@exception     xxx links to TSException
	Last set from Lua
@type          xxx links to TSType
	Last set from Lua
@type.definition xxx links to TSTypeDefinition
	Last set from Lua
@storageclass  xxx links to TSStorageClass
	Last set from Lua
@structure     xxx links to Structure
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 9
@include       xxx links to TSInclude
	Last set from Lua
@preproc       xxx links to TSPreProc
	Last set from Lua
MatchParen     xxx ctermfg=6 ctermbg=8 guifg=#88c0d0 guibg=#4c566a
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
Ignore         xxx ctermfg=0 guifg=bg
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 11
NvimInternalError xxx ctermfg=9 ctermbg=9 guifg=Red guibg=Red
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 11
NvimAssignment xxx links to Operator
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 9
NvimPlainAssignment xxx links to NvimAssignment
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 9
NvimAugmentedAssignment xxx links to NvimAssignment
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 9
NvimAssignmentWithAddition xxx links to NvimAugmentedAssignment
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 9
NvimAssignmentWithSubtraction xxx links to NvimAugmentedAssignment
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 9
NvimAssignmentWithConcatenation xxx links to NvimAugmentedAssignment
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 9
NvimOperator   xxx links to Operator
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 9
NvimUnaryOperator xxx links to NvimOperator
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 9
NvimUnaryPlus  xxx links to NvimUnaryOperator
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 9
NvimUnaryMinus xxx links to NvimUnaryOperator
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 9
NvimNot        xxx links to NvimUnaryOperator
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 9
NvimBinaryOperator xxx links to NvimOperator
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 9
NvimComparison xxx links to NvimBinaryOperator
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 9
NvimComparisonModifier xxx links to NvimComparison
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 9
NvimBinaryPlus xxx links to NvimBinaryOperator
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 9
NvimBinaryMinus xxx links to NvimBinaryOperator
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 9
NvimConcat     xxx links to NvimBinaryOperator
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 9
NvimConcatOrSubscript xxx links to NvimConcat
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 9
NvimOr         xxx links to NvimBinaryOperator
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 9
NvimAnd        xxx links to NvimBinaryOperator
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 9
NvimMultiplication xxx links to NvimBinaryOperator
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 9
NvimDivision   xxx links to NvimBinaryOperator
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 9
NvimMod        xxx links to NvimBinaryOperator
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 9
NvimTernary    xxx links to NvimOperator
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 9
NvimTernaryColon xxx links to NvimTernary
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 9
NvimParenthesis xxx links to Delimiter
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 9
NvimLambda     xxx links to NvimParenthesis
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 9
NvimNestingParenthesis xxx links to NvimParenthesis
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 9
NvimCallingParenthesis xxx links to NvimParenthesis
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 9
NvimSubscript  xxx links to NvimParenthesis
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 9
NvimSubscriptBracket xxx links to NvimSubscript
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 9
NvimSubscriptColon xxx links to NvimSubscript
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 9
NvimCurly      xxx links to NvimSubscript
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 9
NvimContainer  xxx links to NvimParenthesis
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 9
NvimDict       xxx links to NvimContainer
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 9
NvimList       xxx links to NvimContainer
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 9
NvimIdentifier xxx links to Identifier
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 9
NvimIdentifierScope xxx links to NvimIdentifier
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 9
NvimIdentifierScopeDelimiter xxx links to NvimIdentifier
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 9
NvimIdentifierName xxx links to NvimIdentifier
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 9
NvimIdentifierKey xxx links to NvimIdentifier
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 9
NvimColon      xxx links to Delimiter
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 9
NvimComma      xxx links to Delimiter
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 9
NvimArrow      xxx links to Delimiter
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 9
NvimRegister   xxx links to SpecialChar
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 9
NvimNumber     xxx links to Number
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 9
NvimFloat      xxx links to NvimNumber
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 9
NvimNumberPrefix xxx links to Type
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 9
NvimOptionSigil xxx links to Type
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 9
NvimOptionName xxx links to NvimIdentifier
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 9
NvimOptionScope xxx links to NvimIdentifierScope
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 9
NvimOptionScopeDelimiter xxx links to NvimIdentifierScopeDelimiter
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 9
NvimEnvironmentSigil xxx links to NvimOptionSigil
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 9
NvimEnvironmentName xxx links to NvimIdentifier
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 9
NvimString     xxx links to String
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 9
NvimStringBody xxx links to NvimString
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 9
NvimStringQuote xxx links to NvimString
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 9
NvimStringSpecial xxx links to SpecialChar
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 9
NvimSingleQuote xxx links to NvimStringQuote
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 9
NvimSingleQuotedBody xxx links to NvimStringBody
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 9
NvimSingleQuotedQuote xxx links to NvimStringSpecial
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 9
NvimDoubleQuote xxx links to NvimStringQuote
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 9
NvimDoubleQuotedBody xxx links to NvimStringBody
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 9
NvimDoubleQuotedEscape xxx links to NvimStringSpecial
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 9
NvimFigureBrace xxx links to NvimInternalError
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 9
NvimSingleQuotedUnknownEscape xxx links to NvimInternalError
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 9
NvimSpacing    xxx links to Normal
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 9
NvimInvalidSingleQuotedUnknownEscape xxx links to NvimInternalError
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 9
NvimInvalid    xxx links to Error
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 9
NvimInvalidAssignment xxx links to NvimInvalid
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 9
NvimInvalidPlainAssignment xxx links to NvimInvalidAssignment
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 9
NvimInvalidAugmentedAssignment xxx links to NvimInvalidAssignment
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 9
NvimInvalidAssignmentWithAddition xxx links to NvimInvalidAugmentedAssignment
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 9
NvimInvalidAssignmentWithSubtraction xxx links to NvimInvalidAugmentedAssignment
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 9
NvimInvalidAssignmentWithConcatenation xxx links to NvimInvalidAugmentedAssignment
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 9
NvimInvalidOperator xxx links to NvimInvalid
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 9
NvimInvalidUnaryOperator xxx links to NvimInvalidOperator
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 9
NvimInvalidUnaryPlus xxx links to NvimInvalidUnaryOperator
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 9
NvimInvalidUnaryMinus xxx links to NvimInvalidUnaryOperator
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 9
NvimInvalidNot xxx links to NvimInvalidUnaryOperator
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 9
NvimInvalidBinaryOperator xxx links to NvimInvalidOperator
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 9
NvimInvalidComparison xxx links to NvimInvalidBinaryOperator
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 9
NvimInvalidComparisonModifier xxx links to NvimInvalidComparison
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 9
NvimInvalidBinaryPlus xxx links to NvimInvalidBinaryOperator
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 9
NvimInvalidBinaryMinus xxx links to NvimInvalidBinaryOperator
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 9
NvimInvalidConcat xxx links to NvimInvalidBinaryOperator
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 9
NvimInvalidConcatOrSubscript xxx links to NvimInvalidConcat
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 9
NvimInvalidOr  xxx links to NvimInvalidBinaryOperator
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 9
NvimInvalidAnd xxx links to NvimInvalidBinaryOperator
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 9
NvimInvalidMultiplication xxx links to NvimInvalidBinaryOperator
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 9
NvimInvalidDivision xxx links to NvimInvalidBinaryOperator
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 9
NvimInvalidMod xxx links to NvimInvalidBinaryOperator
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 9
NvimInvalidTernary xxx links to NvimInvalidOperator
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 9
NvimInvalidTernaryColon xxx links to NvimInvalidTernary
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 9
NvimInvalidDelimiter xxx links to NvimInvalid
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 9
NvimInvalidParenthesis xxx links to NvimInvalidDelimiter
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 9
NvimInvalidLambda xxx links to NvimInvalidParenthesis
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 9
NvimInvalidNestingParenthesis xxx links to NvimInvalidParenthesis
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 9
NvimInvalidCallingParenthesis xxx links to NvimInvalidParenthesis
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 9
NvimInvalidSubscript xxx links to NvimInvalidParenthesis
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 9
NvimInvalidSubscriptBracket xxx links to NvimInvalidSubscript
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 9
NvimInvalidSubscriptColon xxx links to NvimInvalidSubscript
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 9
NvimInvalidCurly xxx links to NvimInvalidSubscript
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 9
NvimInvalidContainer xxx links to NvimInvalidParenthesis
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 9
NvimInvalidDict xxx links to NvimInvalidContainer
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 9
NvimInvalidList xxx links to NvimInvalidContainer
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 9
NvimInvalidValue xxx links to NvimInvalid
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 9
NvimInvalidIdentifier xxx links to NvimInvalidValue
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 9
NvimInvalidIdentifierScope xxx links to NvimInvalidIdentifier
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 9
NvimInvalidIdentifierScopeDelimiter xxx links to NvimInvalidIdentifier
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 9
NvimInvalidIdentifierName xxx links to NvimInvalidIdentifier
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 9
NvimInvalidIdentifierKey xxx links to NvimInvalidIdentifier
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 9
NvimInvalidColon xxx links to NvimInvalidDelimiter
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 9
NvimInvalidComma xxx links to NvimInvalidDelimiter
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 9
NvimInvalidArrow xxx links to NvimInvalidDelimiter
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 9
NvimInvalidRegister xxx links to NvimInvalidValue
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 9
NvimInvalidNumber xxx links to NvimInvalidValue
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 9
NvimInvalidFloat xxx links to NvimInvalidNumber
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 9
NvimInvalidNumberPrefix xxx links to NvimInvalidNumber
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 9
NvimInvalidOptionSigil xxx links to NvimInvalidIdentifier
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 9
NvimInvalidOptionName xxx links to NvimInvalidIdentifier
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 9
NvimInvalidOptionScope xxx links to NvimInvalidIdentifierScope
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 9
NvimInvalidOptionScopeDelimiter xxx links to NvimInvalidIdentifierScopeDelimiter
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 9
NvimInvalidEnvironmentSigil xxx links to NvimInvalidOptionSigil
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 9
NvimInvalidEnvironmentName xxx links to NvimInvalidIdentifier
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 9
NvimInvalidString xxx links to NvimInvalidValue
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 9
NvimInvalidStringBody xxx links to NvimStringBody
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 9
NvimInvalidStringQuote xxx links to NvimInvalidString
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 9
NvimInvalidStringSpecial xxx links to NvimStringSpecial
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 9
NvimInvalidSingleQuote xxx links to NvimInvalidStringQuote
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 9
NvimInvalidSingleQuotedBody xxx links to NvimInvalidStringBody
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 9
NvimInvalidSingleQuotedQuote xxx links to NvimInvalidStringSpecial
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 9
NvimInvalidDoubleQuote xxx links to NvimInvalidStringQuote
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 9
NvimInvalidDoubleQuotedBody xxx links to NvimInvalidStringBody
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 9
NvimInvalidDoubleQuotedEscape xxx links to NvimInvalidStringSpecial
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 9
NvimInvalidDoubleQuotedUnknownEscape xxx links to NvimInvalidValue
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 9
NvimInvalidFigureBrace xxx links to NvimInvalidDelimiter
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 9
NvimInvalidSpacing xxx links to ErrorMsg
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 9
NvimDoubleQuotedUnknownEscape xxx links to NvimInvalidValue
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 9
ConflictMarkerBegin xxx cleared
ConflictMarkerOurs xxx cleared
ConflictMarkerTheirs xxx cleared
ConflictMarkerEnd xxx cleared
ConflictMarkerCommonAncestorsHunk xxx cleared
cStatement     xxx links to Statement
	Last set from /opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax/c.vim line 493
cLabel         xxx links to Label
	Last set from /opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax/c.vim line 464
cConditional   xxx links to Conditional
	Last set from /opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax/c.vim line 466
cRepeat        xxx links to Repeat
	Last set from /opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax/c.vim line 467
cTodo          xxx links to Todo
	Last set from /opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax/c.vim line 506
cBadContinuation xxx links to Error
	Last set from /opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax/c.vim line 507
cSpecial       xxx links to SpecialChar
	Last set from /opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax/c.vim line 505
cFormat        xxx links to cSpecial
	Last set from /opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax/c.vim line 460
cString        xxx links to String
	Last set from /opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax/c.vim line 503
cCppString     xxx links to cString
	Last set from /opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax/c.vim line 461
cSpaceError    xxx links to cError
	Last set from /opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax/c.vim line 480
cCppSkip       xxx cleared
cCharacter     xxx links to Character
	Last set from /opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax/c.vim line 468
cSpecialError  xxx links to cError
	Last set from /opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax/c.vim line 482
cSpecialCharacter xxx links to cSpecial
	Last set from /opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax/c.vim line 469
cBadBlock      xxx cleared
cCurlyError    xxx links to cError
	Last set from /opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax/c.vim line 483
cErrInParen    xxx links to cError
	Last set from /opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax/c.vim line 476
cCppParen      xxx cleared
cErrInBracket  xxx links to cError
	Last set from /opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax/c.vim line 477
cCppBracket    xxx cleared
cBlock         xxx cleared
cParenError    xxx links to cError
	Last set from /opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax/c.vim line 475
cIncluded      xxx ctermfg=14 guifg=#8fbcbb
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
cCommentSkip   xxx links to cComment
	Last set from /opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax/c.vim line 502
cCommentString xxx links to cString
	Last set from /opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax/c.vim line 500
cComment2String xxx links to cString
	Last set from /opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax/c.vim line 501
cCommentStartError xxx links to cError
	Last set from /opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax/c.vim line 479
cUserLabel     xxx links to Label
	Last set from /opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax/c.vim line 465
cBitField      xxx cleared
cOctalZero     xxx links to PreProc
	Last set from /opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax/c.vim line 472
cNumber        xxx links to Number
	Last set from /opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax/c.vim line 470
cFloat         xxx links to Float
	Last set from /opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax/c.vim line 473
cOctal         xxx links to Number
	Last set from /opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax/c.vim line 471
cOctalError    xxx links to cError
	Last set from /opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax/c.vim line 474
cNumbersCom    xxx cleared
cParen         xxx cleared
cBracket       xxx cleared
cNumbers       xxx cleared
cWrongComTail  xxx links to cError
	Last set from /opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax/c.vim line 481
cCommentL      xxx links to cComment
	Last set from /opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax/c.vim line 462
cCommentStart  xxx links to cComment
	Last set from /opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax/c.vim line 463
cComment       xxx links to Comment
	Last set from /opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax/c.vim line 504
cCommentError  xxx links to cError
	Last set from /opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax/c.vim line 478
cOperator      xxx links to Operator
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 338
cType          xxx links to Type
	Last set from /opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax/c.vim line 498
cTypedef       xxx links to Structure
	Last set from /opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax/c.vim line 486
cStructure     xxx links to Structure
	Last set from /opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax/c.vim line 485
cStorageClass  xxx links to StorageClass
	Last set from /opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax/c.vim line 487
cConstant      xxx links to Type
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 340
cPreCondit     xxx links to PreCondit
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 339
cPreConditMatch xxx links to cPreCondit
	Last set from /opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax/c.vim line 496
cCppInIf       xxx cleared
cCppInElse     xxx cleared
cCppInElse2    xxx links to cCppOutIf2
	Last set from /opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax/c.vim line 509
cCppOutIf      xxx cleared
cCppOutIf2     xxx links to cCppOut
	Last set from /opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax/c.vim line 510
cCppOutElse    xxx cleared
cCppInSkip     xxx cleared
cCppOutSkip    xxx links to cCppOutIf2
	Last set from /opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax/c.vim line 508
cCppOutWrapper xxx links to cPreCondit
	Last set from /opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax/c.vim line 495
cCppInWrapper  xxx links to cCppOutWrapper
	Last set from /opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax/c.vim line 494
cPreProc       xxx links to PreProc
	Last set from /opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax/c.vim line 489
cInclude       xxx links to Include
	Last set from /opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax/c.vim line 488
cDefine        xxx links to Macro
	Last set from /opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax/c.vim line 490
cMulti         xxx cleared
cPragma        xxx cleared
cUserCont      xxx cleared
cError         xxx links to Error
	Last set from /opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax/c.vim line 492
cCppOut        xxx links to Comment
	Last set from /opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax/c.vim line 511
cppStatement   xxx links to Statement
	Last set from /opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax/cpp.vim line 110
cppAccess      xxx links to cppStatement
	Last set from /opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax/cpp.vim line 106
cppModifier    xxx links to Type
	Last set from /opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax/cpp.vim line 111
cppType        xxx links to Type
	Last set from /opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax/cpp.vim line 112
cppExceptions  xxx links to Exception
	Last set from /opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax/cpp.vim line 108
cppOperator    xxx links to Operator
	Last set from /opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax/cpp.vim line 109
cppCast        xxx links to cppStatement
	Last set from /opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax/cpp.vim line 107
cppStorageClass xxx links to StorageClass
	Last set from /opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax/cpp.vim line 113
cppStructure   xxx links to Structure
	Last set from /opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax/cpp.vim line 114
cppBoolean     xxx links to Boolean
	Last set from /opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax/cpp.vim line 115
cppConstant    xxx links to Constant
	Last set from /opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax/cpp.vim line 119
cppRawStringDelimiter xxx links to Delimiter
	Last set from /opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax/cpp.vim line 120
cppRawString   xxx links to String
	Last set from /opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax/cpp.vim line 121
cppNumber      xxx links to Number
	Last set from /opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax/cpp.vim line 123
cppFloat       xxx links to Number
	Last set from /opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax/cpp.vim line 124
cppNumbers     xxx cleared
cppString      xxx links to String
	Last set from /opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax/cpp.vim line 122
cppCharacter   xxx links to cCharacter
	Last set from /opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax/cpp.vim line 116
cppSpecialError xxx links to cSpecialError
	Last set from /opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax/cpp.vim line 118
cppSpecialCharacter xxx links to cSpecialCharacter
	Last set from /opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax/cpp.vim line 117
cppModule      xxx links to Include
	Last set from /opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax/cpp.vim line 125
cppMinMax      xxx cleared
Bold           xxx cterm=bold gui=bold
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
Underline      xxx cterm=underline gui=underline
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
iCursor        xxx guifg=#2e3440 guibg=#d8dee9
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
VisualNOS      xxx ctermbg=0 guibg=#434c5e
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
healthError    xxx ctermfg=1 ctermbg=0 guifg=#bf616a guibg=#3b4252
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
healthSuccess  xxx ctermfg=2 ctermbg=0 guifg=#a3be8c guibg=#3b4252
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
healthWarning  xxx ctermfg=3 ctermbg=0 guifg=#ebcb8b guibg=#3b4252
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
LspReferenceText xxx ctermbg=8 guibg=#4c566a
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
LspReferenceRead xxx ctermbg=8 guibg=#4c566a
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
LspReferenceWrite xxx ctermbg=8 guibg=#4c566a
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
LspSignatureActiveParameter xxx cterm=underline ctermfg=6 gui=underline guifg=#88c0d0
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
StatusLineTerm xxx ctermfg=6 ctermbg=8 guifg=#88c0d0 guibg=#4c566a
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
StatusLineTermNC xxx ctermbg=0 guifg=#d8dee9 guibg=#3b4252
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
Decorator      xxx ctermfg=11 guifg=#d08770
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
Annotation     xxx links to Decorator
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 291
Variable       xxx links to Identifier
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 294
asciidocAttributeEntry xxx ctermfg=12 guifg=#5e81ac
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
asciidocAttributeList xxx ctermfg=12 guifg=#5e81ac
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
asciidocAttributeRef xxx ctermfg=12 guifg=#5e81ac
                   links to markdownH1
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 310
asciidocHLabel xxx ctermfg=4 guifg=#81a1c1
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
asciidocListingBlock xxx ctermfg=14 guifg=#8fbcbb
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
asciidocMacroAttributes xxx ctermfg=6 guifg=#88c0d0
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
asciidocOneLineTitle xxx ctermfg=6 guifg=#88c0d0
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
asciidocPassthroughBlock xxx ctermfg=4 guifg=#81a1c1
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
asciidocQuotedMonospaced xxx ctermfg=14 guifg=#8fbcbb
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
asciidocTriplePlusPassthrough xxx ctermfg=14 guifg=#8fbcbb
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
asciidocAdmonition xxx links to Keyword
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 309
markdownH1     xxx ctermfg=6 guifg=#88c0d0
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
asciidocBackslash xxx links to Keyword
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 311
asciidocMacro  xxx links to Keyword
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 312
asciidocQuotedBold xxx links to Bold
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 313
asciidocQuotedEmphasized xxx links to Italic
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 314
Italic         xxx cleared
asciidocQuotedMonospaced2 xxx links to asciidocQuotedMonospaced
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 315
asciidocQuotedUnconstrainedBold xxx links to asciidocQuotedBold
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 316
asciidocQuotedUnconstrainedEmphasized xxx links to asciidocQuotedEmphasized
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 317
asciidocURL    xxx links to markdownLinkText
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 318
markdownLinkText xxx ctermfg=6 guifg=#88c0d0
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
awkCharClass   xxx ctermfg=14 guifg=#8fbcbb
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
awkPatterns    xxx cterm=bold ctermfg=4 gui=bold guifg=#81a1c1
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
awkArrayElement xxx links to Identifier
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 322
awkBoolLogic   xxx links to Keyword
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 323
awkBrktRegExp  xxx links to SpecialChar
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 324
awkComma       xxx links to Delimiter
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 325
awkExpression  xxx links to Keyword
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 326
awkFieldVars   xxx links to Identifier
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 327
awkLineSkip    xxx links to Keyword
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 328
awkOperator    xxx links to Operator
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 329
awkRegExp      xxx links to SpecialChar
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 330
awkSearch      xxx links to Keyword
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 331
awkSemicolon   xxx links to Delimiter
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 332
awkSpecialCharacter xxx links to SpecialChar
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 333
awkSpecialPrintf xxx links to SpecialChar
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 334
awkVariables   xxx links to Identifier
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 335
cmakeGeneratorExpression xxx ctermfg=12 guifg=#5e81ac
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
csPreCondit    xxx links to PreCondit
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 344
csType         xxx links to Type
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 345
csXmlTag       xxx links to SpecialComment
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 346
cssAttributeSelector xxx ctermfg=14 guifg=#8fbcbb
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
cssDefinition  xxx ctermfg=14 guifg=#8fbcbb
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
cssIdentifier  xxx cterm=underline ctermfg=14 gui=underline guifg=#8fbcbb
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
cssStringQ     xxx ctermfg=14 guifg=#8fbcbb
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
cssAttr        xxx links to Keyword
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 352
cssBraces      xxx links to Delimiter
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 353
cssClassName   xxx links to cssDefinition
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 354
cssColor       xxx links to Number
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 355
cssProp        xxx links to cssDefinition
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 356
cssPseudoClass xxx links to cssDefinition
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 357
cssPseudoClassId xxx links to cssPseudoClass
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 358
cssVendor      xxx links to Keyword
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 359
dosiniHeader   xxx ctermfg=6 guifg=#88c0d0
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
dosiniLabel    xxx links to Type
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 362
dtBooleanKey   xxx ctermfg=14 guifg=#8fbcbb
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
dtExecKey      xxx ctermfg=14 guifg=#8fbcbb
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
dtLocaleKey    xxx ctermfg=14 guifg=#8fbcbb
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
dtNumericKey   xxx ctermfg=14 guifg=#8fbcbb
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
dtTypeKey      xxx ctermfg=14 guifg=#8fbcbb
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
dtDelim        xxx links to Delimiter
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 369
dtLocaleValue  xxx links to Keyword
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 370
dtTypeValue    xxx links to Keyword
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 371
diffAdded      xxx links to DiffAdd
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 385
diffChanged    xxx links to DiffChange
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 386
diffRemoved    xxx links to DiffDelete
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 387
gitconfigVariable xxx ctermfg=14 guifg=#8fbcbb
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
goBuiltins     xxx ctermfg=14 guifg=#8fbcbb
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
goConstants    xxx links to Keyword
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 392
helpBar        xxx ctermfg=8 guifg=#4c566a
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
helpHyperTextJump xxx cterm=underline ctermfg=6 gui=underline guifg=#88c0d0
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
htmlArg        xxx ctermfg=14 guifg=#8fbcbb
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
htmlLink       xxx guifg=#d8dee9
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
htmlBold       xxx links to Bold
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 399
htmlEndTag     xxx links to htmlTag
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 400
htmlTag        xxx links to Keyword
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 409
htmlItalic     xxx links to Italic
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 401
htmlH1         xxx links to markdownH1
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 402
htmlH2         xxx links to markdownH1
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 403
htmlH3         xxx links to markdownH1
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 404
htmlH4         xxx links to markdownH1
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 405
htmlH5         xxx links to markdownH1
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 406
htmlH6         xxx links to markdownH1
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 407
htmlSpecialChar xxx links to SpecialChar
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 408
htmlTagN       xxx links to htmlTag
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 410
javaDocTags    xxx ctermfg=14 guifg=#8fbcbb
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
javaCommentTitle xxx links to Comment
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 413
javaScriptBraces xxx links to Delimiter
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 414
javaScriptIdentifier xxx links to Keyword
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 415
javaScriptNumber xxx links to Number
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 416
jsonKeyword    xxx ctermfg=14 guifg=#8fbcbb
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
lessClass      xxx ctermfg=14 guifg=#8fbcbb
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
lessAmpersand  xxx links to Keyword
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 421
lessCssAttribute xxx links to Delimiter
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 422
lessFunction   xxx links to Function
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 423
cssSelectorOp  xxx links to Keyword
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 424
lispAtomBarSymbol xxx links to SpecialChar
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 426
lispAtomList   xxx links to SpecialChar
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 427
lispAtomMark   xxx links to Keyword
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 428
lispBarSymbol  xxx links to SpecialChar
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 429
lispFunc       xxx links to Function
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 430
luaFunc        xxx links to Function
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 432
markdownBlockquote xxx ctermfg=14 guifg=#8fbcbb
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
markdownCode   xxx ctermfg=14 guifg=#8fbcbb
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
markdownCodeDelimiter xxx ctermfg=14 guifg=#8fbcbb
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
markdownFootnote xxx ctermfg=14 guifg=#8fbcbb
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
markdownId     xxx ctermfg=14 guifg=#8fbcbb
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
markdownIdDeclaration xxx ctermfg=14 guifg=#8fbcbb
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
markdownUrl    xxx guifg=#d8dee9
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
markdownBold   xxx links to Bold
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 443
markdownBoldDelimiter xxx links to Keyword
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 444
markdownFootnoteDefinition xxx links to markdownFootnote
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 445
markdownH2     xxx links to markdownH1
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 446
markdownH3     xxx links to markdownH1
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 447
markdownH4     xxx links to markdownH1
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 448
markdownH5     xxx links to markdownH1
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 449
markdownH6     xxx links to markdownH1
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 450
markdownIdDelimiter xxx links to Keyword
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 451
markdownItalic xxx links to Italic
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 452
markdownItalicDelimiter xxx links to Keyword
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 453
markdownLinkDelimiter xxx links to Keyword
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 454
markdownLinkTextDelimiter xxx links to Keyword
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 455
markdownListMarker xxx links to Keyword
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 456
markdownRule   xxx links to Keyword
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 457
markdownHeadingDelimiter xxx links to Keyword
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 458
perlPackageDecl xxx ctermfg=14 guifg=#8fbcbb
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
phpClasses     xxx ctermfg=14 guifg=#8fbcbb
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
phpDocTags     xxx ctermfg=14 guifg=#8fbcbb
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
phpDocCustomTags xxx links to phpDocTags
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 464
phpMemberSelector xxx links to Keyword
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 465
podCmdText     xxx ctermfg=14 guifg=#8fbcbb
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
podVerbatimLine xxx guifg=#d8dee9
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
podFormat      xxx links to Keyword
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 469
pythonBuiltin  xxx links to Type
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 471
pythonEscape   xxx links to SpecialChar
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 472
rubyConstant   xxx ctermfg=14 guifg=#8fbcbb
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
rubySymbol     xxx cterm=bold ctermfg=15 gui=bold guifg=#eceff4
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
rubyAttribute  xxx links to Identifier
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 476
rubyBlockParameterList xxx links to Operator
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 477
rubyInterpolationDelimiter xxx links to Keyword
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 478
rubyKeywordAsMethod xxx links to Function
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 479
rubyLocalVariableOrMethod xxx links to Function
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 480
rubyPseudoVariable xxx links to Keyword
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 481
rubyRegexp     xxx links to SpecialChar
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 482
rustAttribute  xxx ctermfg=12 guifg=#5e81ac
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
rustEnum       xxx cterm=bold ctermfg=14 gui=bold guifg=#8fbcbb
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
rustMacro      xxx cterm=bold ctermfg=6 gui=bold guifg=#88c0d0
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
rustModPath    xxx ctermfg=14 guifg=#8fbcbb
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
rustPanic      xxx cterm=bold ctermfg=4 gui=bold guifg=#81a1c1
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
rustTrait      xxx ctermfg=14 guifg=#8fbcbb
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
rustCommentLineDoc xxx links to Comment
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 490
rustDerive     xxx links to rustAttribute
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 491
rustEnumVariant xxx links to rustEnum
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 492
rustEscape     xxx links to SpecialChar
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 493
rustQuestionMark xxx links to Keyword
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 494
sassClass      xxx ctermfg=14 guifg=#8fbcbb
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
sassId         xxx cterm=underline ctermfg=14 gui=underline guifg=#8fbcbb
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
sassAmpersand  xxx links to Keyword
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 498
sassClassChar  xxx links to Delimiter
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 499
sassControl    xxx links to Keyword
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 500
sassControlLine xxx links to Keyword
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 501
sassExtend     xxx links to Keyword
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 502
sassFor        xxx links to Keyword
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 503
sassFunctionDecl xxx links to Keyword
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 504
sassFunctionName xxx links to Function
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 505
sassidChar     xxx links to sassId
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 506
sassInclude    xxx links to SpecialChar
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 507
sassMixinName  xxx links to Function
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 508
sassMixing     xxx links to SpecialChar
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 509
sassReturn     xxx links to Keyword
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 510
shCmdParenRegion xxx links to Delimiter
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 512
shCmdSubRegion xxx links to Delimiter
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 513
shDerefSimple  xxx links to Identifier
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 514
shDerefVar     xxx links to Identifier
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 515
sqlKeyword     xxx links to Keyword
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 517
sqlSpecial     xxx links to Keyword
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 518
vimAugroup     xxx ctermfg=14 guifg=#8fbcbb
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
vimMapRhs      xxx ctermfg=14 guifg=#8fbcbb
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
vimNotation    xxx ctermfg=14 guifg=#8fbcbb
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
vimFunc        xxx links to Function
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 523
vimFunction    xxx links to Function
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 524
vimUserFunc    xxx links to Function
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 525
xmlAttrib      xxx ctermfg=14 guifg=#8fbcbb
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
xmlCdataStart  xxx cterm=bold ctermfg=8 gui=bold guifg=#616e88
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
xmlNamespace   xxx ctermfg=14 guifg=#8fbcbb
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
xmlAttribPunct xxx links to Delimiter
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 530
xmlCdata       xxx links to Comment
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 531
xmlCdataCdata  xxx links to xmlCdataStart
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 532
xmlCdataEnd    xxx links to xmlCdataStart
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 533
xmlEndTag      xxx links to xmlTagName
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 534
xmlTagName     xxx links to Keyword
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 536
xmlProcessingDelim xxx links to Keyword
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 535
yamlBlockMappingKey xxx ctermfg=14 guifg=#8fbcbb
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
yamlBool       xxx links to Keyword
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 539
yamlDocumentStart xxx links to Keyword
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 540
ALEWarningSign xxx ctermfg=3 guifg=#ebcb8b
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
ALEErrorSign   xxx ctermfg=1 guifg=#bf616a
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
ALEWarning     xxx cterm=underline ctermfg=3 gui=undercurl guifg=#ebcb8b
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
ALEError       xxx cterm=underline ctermfg=1 gui=undercurl guifg=#bf616a
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
CocWarningHighlight xxx cterm=underline ctermfg=3 gui=undercurl guifg=#ebcb8b
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
CocErrorHighlight xxx cterm=underline ctermfg=1 gui=undercurl guifg=#bf616a
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
CocWarningSign xxx ctermfg=3 guifg=#ebcb8b
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
CocErrorSign   xxx ctermfg=1 guifg=#bf616a
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
CocInfoSign    xxx ctermfg=6 guifg=#88c0d0
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
CocHintSign    xxx ctermfg=12 guifg=#5e81ac
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
LspCodeLens    xxx ctermfg=8 guifg=#616e88
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
LspDiagnosticsDefaultWarning xxx ctermfg=3 guifg=#ebcb8b
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
LspDiagnosticsDefaultError xxx ctermfg=1 guifg=#bf616a
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
LspDiagnosticsDefaultInformation xxx ctermfg=6 guifg=#88c0d0
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
LspDiagnosticsDefaultHint xxx ctermfg=12 guifg=#5e81ac
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
LspDiagnosticsUnderlineWarning xxx cterm=underline ctermfg=3 gui=undercurl guifg=#ebcb8b
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
LspDiagnosticsUnderlineError xxx cterm=underline ctermfg=1 gui=undercurl guifg=#bf616a
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
LspDiagnosticsUnderlineInformation xxx cterm=underline ctermfg=6 gui=undercurl guifg=#88c0d0
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
LspDiagnosticsUnderlineHint xxx cterm=underline ctermfg=12 gui=undercurl guifg=#5e81ac
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
GitSignsCurrentLineBlame xxx links to Comment
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 579
GitGutterAdd   xxx ctermfg=2 guifg=#a3be8c
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
GitGutterChange xxx ctermfg=3 guifg=#ebcb8b
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
GitGutterChangeDelete xxx ctermfg=1 guifg=#bf616a
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
GitGutterDelete xxx ctermfg=1 guifg=#bf616a
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
SignifySignAdd xxx ctermfg=2 guifg=#a3be8c
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
SignifySignChange xxx ctermfg=3 guifg=#ebcb8b
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
SignifySignChangeDelete xxx ctermfg=1 guifg=#bf616a
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
SignifySignDelete xxx ctermfg=1 guifg=#bf616a
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
Sneak          xxx links to Search
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 598
gitcommitDiscardedFile xxx ctermfg=1 guifg=#bf616a
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
gitcommitUntrackedFile xxx ctermfg=1 guifg=#bf616a
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
gitcommitSelectedFile xxx ctermfg=2 guifg=#a3be8c
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
jediFunction   xxx ctermbg=8 guifg=#d8dee9 guibg=#4c566a
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
jediFat        xxx cterm=bold,underline ctermfg=6 ctermbg=8 gui=bold,underline guifg=#88c0d0 guibg=#4c566a
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
NERDTreeExecFile xxx ctermfg=14 guifg=#8fbcbb
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
NERDTreeDirSlash xxx links to Keyword
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 613
NERDTreeHelp   xxx links to Comment
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 614
CtrlPMatch     xxx links to Keyword
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 618
CtrlPBufferHid xxx links to Normal
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 619
ClapDir        xxx guifg=#d8dee9
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
ClapDisplay    xxx ctermbg=0 guifg=#d8dee9 guibg=#3b4252
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
ClapFile       xxx guifg=#d8dee9
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
ClapMatches    xxx ctermfg=6 guifg=#88c0d0
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
ClapNoMatchesFound xxx ctermfg=3 guifg=#ebcb8b
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
ClapSelected   xxx cterm=bold ctermfg=14 gui=bold guifg=#8fbcbb
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
ClapSelectedSign xxx ctermfg=4 guifg=#81a1c1
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
ClapMatches1   xxx ctermfg=6 guifg=#88c0d0
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
ClapFuzzyMatches1 xxx ctermfg=6 guifg=#88c0d0
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
ClapMatches2   xxx ctermfg=4 guifg=#81a1c1
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
ClapFuzzyMatches2 xxx ctermfg=4 guifg=#81a1c1
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
ClapMatches3   xxx ctermfg=12 guifg=#5e81ac
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
ClapFuzzyMatches3 xxx ctermfg=12 guifg=#5e81ac
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
ClapMatches4   xxx ctermfg=6 guifg=#88c0d0
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
ClapFuzzyMatches4 xxx ctermfg=6 guifg=#88c0d0
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
ClapMatches5   xxx ctermfg=4 guifg=#81a1c1
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
ClapFuzzyMatches5 xxx ctermfg=4 guifg=#81a1c1
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
ClapMatches6   xxx ctermfg=12 guifg=#5e81ac
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
ClapFuzzyMatches6 xxx ctermfg=12 guifg=#5e81ac
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
ClapMatches7   xxx ctermfg=6 guifg=#88c0d0
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
ClapFuzzyMatches7 xxx ctermfg=6 guifg=#88c0d0
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
ClapMatches8   xxx ctermfg=4 guifg=#81a1c1
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
ClapFuzzyMatches8 xxx ctermfg=4 guifg=#81a1c1
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
ClapMatches9   xxx ctermfg=12 guifg=#5e81ac
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
ClapFuzzyMatches9 xxx ctermfg=12 guifg=#5e81ac
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
ClapMatches10  xxx ctermfg=6 guifg=#88c0d0
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
ClapFuzzyMatches10 xxx ctermfg=6 guifg=#88c0d0
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
ClapMatches11  xxx ctermfg=4 guifg=#81a1c1
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
ClapFuzzyMatches11 xxx ctermfg=4 guifg=#81a1c1
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
ClapMatches12  xxx ctermfg=12 guifg=#5e81ac
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
ClapFuzzyMatches12 xxx ctermfg=12 guifg=#5e81ac
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
ClapCurrentSelection xxx links to PmenuSel
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 641
ClapCurrentSelectionSign xxx links to ClapSelectedSign
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 642
ClapInput      xxx links to Pmenu
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 643
ClapPreview    xxx links to Pmenu
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 644
ClapProviderAbout xxx links to ClapDisplay
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 645
ClapProviderColon xxx links to Type
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 646
ClapProviderId xxx links to Type
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 647
IndentGuidesEven xxx ctermbg=0 guibg=#3b4252
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
IndentGuidesOdd xxx ctermbg=8 guibg=#434c5e
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
plugDeleted    xxx ctermbg=1 guifg=#bf616a
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
SignatureMarkText xxx ctermfg=6 guifg=#88c0d0
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
StartifyFile   xxx ctermfg=15 guifg=#eceff4
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
StartifyFooter xxx ctermfg=14 guifg=#8fbcbb
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
StartifyHeader xxx ctermfg=6 guifg=#88c0d0
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
StartifyNumber xxx ctermfg=14 guifg=#8fbcbb
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
StartifyPath   xxx ctermfg=6 guifg=#88c0d0
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
StartifyBracket xxx links to Delimiter
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 669
StartifySlash  xxx links to Normal
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 670
StartifySpecial xxx links to Comment
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 671
haskellPreProc xxx ctermfg=12 guifg=#5e81ac
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
haskellType    xxx ctermfg=14 guifg=#8fbcbb
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
haskellPragma  xxx links to haskellPreProc
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 678
jsGlobalNodeObjects xxx ctermfg=6 guifg=#88c0d0
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
jsBrackets     xxx links to Delimiter
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 683
jsFuncCall     xxx links to Function
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 684
jsFuncParens   xxx links to Delimiter
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 685
jsThis         xxx links to Keyword
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 686
jsNoise        xxx links to Delimiter
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 687
jsPrototype    xxx links to Keyword
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 688
jsRegexpString xxx links to SpecialChar
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 689
pandocDefinitionBlockTerm xxx ctermfg=14 guifg=#8fbcbb
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
pandocTableDelims xxx ctermfg=8 guifg=#4c566a
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
pandocAtxHeader xxx links to markdownH1
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 695
pandocBlockQuote xxx links to markdownBlockquote
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 696
pandocCiteAnchor xxx links to Operator
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 697
pandocCiteKey  xxx links to pandocReferenceLabel
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 698
pandocReferenceLabel xxx links to markdownLinkText
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 709
pandocDefinitionBlockMark xxx links to Operator
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 699
pandocEmphasis xxx links to markdownItalic
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 700
pandocFootnoteID xxx links to pandocReferenceLabel
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 701
pandocFootnoteIDHead xxx links to markdownLinkDelimiter
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 702
pandocFootnoteIDTail xxx links to pandocFootnoteIDHead
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 703
pandocGridTableDelims xxx links to pandocTableDelims
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 704
pandocGridTableHeader xxx links to pandocTableDelims
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 705
pandocOperator xxx links to Operator
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 706
pandocPipeTableDelims xxx links to pandocTableDelims
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 707
pandocReferenceDefinition xxx links to pandocReferenceLabel
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 708
pandocReferenceURL xxx links to markdownUrl
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 710
pandocSimpleTableHeader xxx links to pandocAtxHeader
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 711
pandocStrong   xxx links to markdownBold
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 712
pandocTableHeaderWord xxx links to pandocAtxHeader
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 713
pandocUListItemBullet xxx links to Operator
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 714
TSAnnotation   xxx links to Annotation
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 719
TSConstBuiltin xxx links to Constant
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 720
TSConstructor  xxx links to Function
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 721
TSEmphasis     xxx links to Italic
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 722
TSFuncBuiltin  xxx links to Function
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 723
TSFuncMacro    xxx links to Function
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 724
TSStringRegex  xxx links to SpecialChar
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 725
TSStrong       xxx links to Bold
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 726
TSStructure    xxx links to Structure
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 727
TSTagDelimiter xxx links to TSTag
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 728
TSTag          xxx links to Label
	Last set from Lua
TSUnderline    xxx cterm=underline gui=underline
	Last set from Lua
TSVariable     xxx links to Variable
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 730
TSVariableBuiltin xxx links to Keyword
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 731
typescriptBOMWindowMethod xxx ctermfg=6 guifg=#88c0d0
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
typescriptClassName xxx ctermfg=14 guifg=#8fbcbb
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
typescriptDecorator xxx ctermfg=11 guifg=#d08770
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
typescriptInterfaceName xxx cterm=bold ctermfg=14 gui=bold guifg=#8fbcbb
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
typescriptRegexpString xxx ctermfg=3 guifg=#ebcb8b
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
tsxAttrib      xxx ctermfg=14 guifg=#8fbcbb
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
typescriptOperator xxx links to Operator
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 743
typescriptBinaryOp xxx links to Operator
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 744
typescriptAssign xxx links to Operator
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 745
typescriptMember xxx links to Identifier
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 746
typescriptDOMStorageMethod xxx links to Identifier
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 747
typescriptArrowFuncArg xxx links to Identifier
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 748
typescriptGlobal xxx links to typescriptClassName
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 749
typescriptBOMWindowProp xxx links to Function
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 750
typescriptArrowFuncDef xxx links to Function
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 751
typescriptAliasDeclaration xxx links to Function
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 752
typescriptPredefinedType xxx links to Type
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 753
typescriptTypeReference xxx links to typescriptClassName
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 754
typescriptTypeAnnotation xxx links to Structure
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 755
typescriptDocNamedParamType xxx links to SpecialComment
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 756
typescriptDocNotation xxx links to Keyword
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 757
typescriptDocTags xxx links to Keyword
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 758
typescriptImport xxx links to Keyword
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 759
typescriptExport xxx links to Keyword
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 760
typescriptTry  xxx links to Keyword
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 761
typescriptVariable xxx links to Keyword
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 762
typescriptBraces xxx links to Normal
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 763
typescriptObjectLabel xxx links to Normal
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 764
typescriptCall xxx links to Normal
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 765
typescriptClassHeritage xxx links to typescriptClassName
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 766
typescriptFuncTypeArrow xxx links to Structure
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 767
typescriptMemberOptionality xxx links to Structure
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 768
typescriptNodeGlobal xxx links to typescriptGlobal
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 769
typescriptTypeBrackets xxx links to Structure
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 770
tsxEqual       xxx links to Operator
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 771
tsxIntrinsicTagName xxx links to htmlTag
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 772
tsxTagName     xxx links to tsxIntrinsicTagName
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 773
mkdCode        xxx ctermfg=14 guifg=#8fbcbb
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
mkdFootnote    xxx ctermfg=6 guifg=#88c0d0
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
mkdRule        xxx ctermfg=12 guifg=#5e81ac
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
mkdLineBreak   xxx ctermfg=4 guifg=#81a1c1
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
mkdBold        xxx links to Bold
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 781
mkdItalic      xxx links to Italic
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 782
mkdString      xxx links to Keyword
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 783
mkdCodeStart   xxx links to mkdCode
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 784
mkdCodeEnd     xxx links to mkdCode
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 785
mkdBlockquote  xxx links to Comment
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 786
mkdListItem    xxx links to Keyword
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 787
mkdListItemLine xxx links to Normal
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 788
mkdFootnotes   xxx links to mkdFootnote
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 789
mkdLink        xxx links to markdownLinkText
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 790
mkdURL         xxx links to markdownUrl
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 791
mkdInlineURL   xxx links to mkdURL
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 792
mkdID          xxx links to Identifier
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 793
mkdLinkDef     xxx links to mkdLink
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 794
mkdLinkDefTarget xxx links to mkdURL
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 795
mkdLinkTitle   xxx links to mkdInlineURL
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 796
mkdDelimiter   xxx links to Keyword
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 797
phpClass       xxx ctermfg=14 guifg=#8fbcbb
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
phpClassImplements xxx cterm=bold ctermfg=14 gui=bold guifg=#8fbcbb
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
phpClassExtends xxx links to phpClass
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 803
phpFunction    xxx links to Function
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 804
phpMethod      xxx links to Function
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 805
phpUseClass    xxx links to phpClass
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 806
VimwikiHeader1 xxx cterm=bold ctermfg=6 gui=bold guifg=#88c0d0
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
VimwikiHeader2 xxx cterm=bold ctermfg=6 gui=bold guifg=#88c0d0
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
VimwikiHeader3 xxx cterm=bold ctermfg=6 gui=bold guifg=#88c0d0
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
VimwikiHeader4 xxx cterm=bold ctermfg=6 gui=bold guifg=#88c0d0
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
VimwikiHeader5 xxx cterm=bold ctermfg=6 gui=bold guifg=#88c0d0
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
VimwikiHeader6 xxx cterm=bold ctermfg=6 gui=bold guifg=#88c0d0
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
VimwikiLink    xxx cterm=underline ctermfg=6 gui=underline guifg=#88c0d0
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
VimwikiHeaderChar xxx links to markdownHeadingDelimiter
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 822
VimwikiHR      xxx links to Keyword
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 823
VimwikiList    xxx links to markdownListMarker
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 824
yamlKey        xxx ctermfg=14 guifg=#8fbcbb
	Last set from ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim line 122
CocSelectedText xxx ctermfg=9 guifg=#fb4934
	Last set from ~/.cache/dein/.cache/init.vim/.dein/plugin/coc.vim line 412
CocCodeLens    xxx ctermfg=248 guifg=#999999
	Last set from ~/.cache/dein/.cache/init.vim/.dein/plugin/coc.vim line 413
CocUnderline   xxx cterm=underline gui=underline guisp=#ebdbb2
	Last set from ~/.cache/dein/.cache/init.vim/.dein/plugin/coc.vim line 414
CocBold        xxx cterm=bold gui=bold
	Last set from ~/.cache/dein/.cache/init.vim/.dein/plugin/coc.vim line 415
CocItalic      xxx cterm=italic gui=italic
	Last set from ~/.cache/dein/.cache/init.vim/.dein/plugin/coc.vim line 416
CocStrikeThrough xxx cterm=strikethrough gui=strikethrough
	Last set from ~/.cache/dein/.cache/init.vim/.dein/plugin/coc.vim line 417
CocMarkdownLink xxx ctermfg=12 guifg=#15aabf
	Last set from ~/.cache/dein/.cache/init.vim/.dein/plugin/coc.vim line 418
CocDisabled    xxx ctermfg=248 guifg=#999999
	Last set from ~/.cache/dein/.cache/init.vim/.dein/plugin/coc.vim line 419
CocSearch      xxx ctermfg=12 guifg=#15aabf
	Last set from ~/.cache/dein/.cache/init.vim/.dein/plugin/coc.vim line 420
CocFloating    xxx ctermbg=236 guibg=#383838
	Last set from ~/.cache/dein/.cache/init.vim/.dein/plugin/coc.vim line 422
CocMenuSel     xxx ctermbg=235 guibg=#303030
	Last set from ~/.cache/dein/.cache/init.vim/.dein/plugin/coc.vim line 423
CocFloatThumb  xxx ctermbg=235 guibg=#343434
	Last set from ~/.cache/dein/.cache/init.vim/.dein/plugin/coc.vim line 424
CocFloatSbar   xxx ctermbg=236 guibg=#3c3c3c
	Last set from ~/.cache/dein/.cache/init.vim/.dein/plugin/coc.vim line 425
CocFadeOut     xxx links to Conceal
	Last set from ~/.cache/dein/.cache/init.vim/.dein/plugin/coc.vim line 440
CocMarkdownCode xxx links to markdownCode
	Last set from ~/.cache/dein/.cache/init.vim/.dein/plugin/coc.vim line 441
CocMarkdownHeader xxx links to markdownH1
	Last set from ~/.cache/dein/.cache/init.vim/.dein/plugin/coc.vim line 442
CocDeprecatedHighlight xxx links to CocStrikeThrough
	Last set from ~/.cache/dein/.cache/init.vim/.dein/plugin/coc.vim line 443
CocUnusedHighlight xxx links to CocFadeOut
	Last set from ~/.cache/dein/.cache/init.vim/.dein/plugin/coc.vim line 444
CocListLine    xxx links to CursorLine
	Last set from ~/.cache/dein/.cache/init.vim/.dein/plugin/coc.vim line 445
CocListSearch  xxx links to CocSearch
	Last set from ~/.cache/dein/.cache/init.vim/.dein/plugin/coc.vim line 446
CocListMode    xxx links to ModeMsg
	Last set from ~/.cache/dein/.cache/init.vim/.dein/plugin/coc.vim line 447
CocListPath    xxx links to Comment
	Last set from ~/.cache/dein/.cache/init.vim/.dein/plugin/coc.vim line 448
CocHighlightText xxx links to CursorColumn
	Last set from ~/.cache/dein/.cache/init.vim/.dein/plugin/coc.vim line 449
CocHoverRange  xxx links to Search
	Last set from ~/.cache/dein/.cache/init.vim/.dein/plugin/coc.vim line 450
CocCursorRange xxx links to Search
	Last set from ~/.cache/dein/.cache/init.vim/.dein/plugin/coc.vim line 451
CocLinkedEditing xxx links to CocCursorRange
	Last set from ~/.cache/dein/.cache/init.vim/.dein/plugin/coc.vim line 452
CocHighlightRead xxx links to CocHighlightText
	Last set from ~/.cache/dein/.cache/init.vim/.dein/plugin/coc.vim line 453
CocHighlightWrite xxx links to CocHighlightText
	Last set from ~/.cache/dein/.cache/init.vim/.dein/plugin/coc.vim line 454
CocNotificationProgress xxx ctermfg=12 guifg=#15aabf
	Last set from ~/.cache/dein/.cache/init.vim/.dein/plugin/coc.vim line 456
CocNotificationButton xxx links to CocUnderline
	Last set from ~/.cache/dein/.cache/init.vim/.dein/plugin/coc.vim line 457
CocNotificationError xxx links to CocErrorFloat
	Last set from ~/.cache/dein/.cache/init.vim/.dein/plugin/coc.vim line 458
CocErrorFloat  xxx links to DiagnosticError
	Last set from ~/.cache/dein/.cache/init.vim/.dein/plugin/coc.vim line 517
CocNotificationWarning xxx links to CocWarningFloat
	Last set from ~/.cache/dein/.cache/init.vim/.dein/plugin/coc.vim line 459
CocWarningFloat xxx links to DiagnosticWarn
	Last set from ~/.cache/dein/.cache/init.vim/.dein/plugin/coc.vim line 517
CocNotificationInfo xxx links to CocInfoFloat
	Last set from ~/.cache/dein/.cache/init.vim/.dein/plugin/coc.vim line 460
CocInfoFloat   xxx links to DiagnosticInfo
	Last set from ~/.cache/dein/.cache/init.vim/.dein/plugin/coc.vim line 517
CocSnippetVisual xxx links to Visual
	Last set from ~/.cache/dein/.cache/init.vim/.dein/plugin/coc.vim line 462
CocTreeTitle   xxx links to Title
	Last set from ~/.cache/dein/.cache/init.vim/.dein/plugin/coc.vim line 464
CocTreeDescription xxx links to Comment
	Last set from ~/.cache/dein/.cache/init.vim/.dein/plugin/coc.vim line 465
CocTreeOpenClose xxx links to CocBold
	Last set from ~/.cache/dein/.cache/init.vim/.dein/plugin/coc.vim line 466
CocTreeSelected xxx links to CursorLine
	Last set from ~/.cache/dein/.cache/init.vim/.dein/plugin/coc.vim line 467
CocSelectedRange xxx links to CocHighlightText
	Last set from ~/.cache/dein/.cache/init.vim/.dein/plugin/coc.vim line 468
CocSymbolDefault xxx links to MoreMsg
	Last set from ~/.cache/dein/.cache/init.vim/.dein/plugin/coc.vim line 470
CocPumSearch   xxx links to CocSearch
	Last set from ~/.cache/dein/.cache/init.vim/.dein/plugin/coc.vim line 472
CocPumDetail   xxx links to Comment
	Last set from ~/.cache/dein/.cache/init.vim/.dein/plugin/coc.vim line 473
CocPumMenu     xxx links to CocFloating
	Last set from ~/.cache/dein/.cache/init.vim/.dein/plugin/coc.vim line 474
CocPumShortcut xxx links to Comment
	Last set from ~/.cache/dein/.cache/init.vim/.dein/plugin/coc.vim line 475
CocPumDeprecated xxx links to CocStrikeThrough
	Last set from ~/.cache/dein/.cache/init.vim/.dein/plugin/coc.vim line 476
CocPumVirtualText xxx links to NonText
	Last set from ~/.cache/dein/.cache/init.vim/.dein/plugin/coc.vim line 477
CocFloatDividingLine xxx links to NonText
	Last set from ~/.cache/dein/.cache/init.vim/.dein/plugin/coc.vim line 479
CocCursorTransparent xxx gui=strikethrough blend=100
	Last set from ~/.cache/dein/.cache/init.vim/.dein/plugin/coc.vim line 490
CocErrorVirtualText xxx links to DiagnosticVirtualTextError
	Last set from ~/.cache/dein/.cache/init.vim/.dein/plugin/coc.vim line 512
CocWarningVirtualText xxx links to DiagnosticVirtualTextWarn
	Last set from ~/.cache/dein/.cache/init.vim/.dein/plugin/coc.vim line 512
CocInfoHighlight xxx links to DiagnosticUnderlineInfo
	Last set from ~/.cache/dein/.cache/init.vim/.dein/plugin/coc.vim line 502
CocInfoVirtualText xxx links to DiagnosticVirtualTextInfo
	Last set from ~/.cache/dein/.cache/init.vim/.dein/plugin/coc.vim line 512
CocHintHighlight xxx links to DiagnosticUnderlineHint
	Last set from ~/.cache/dein/.cache/init.vim/.dein/plugin/coc.vim line 502
CocHintVirtualText xxx links to DiagnosticVirtualTextHint
	Last set from ~/.cache/dein/.cache/init.vim/.dein/plugin/coc.vim line 512
CocHintFloat   xxx links to DiagnosticHint
	Last set from ~/.cache/dein/.cache/init.vim/.dein/plugin/coc.vim line 517
CocInlayHint   xxx ctermfg=12 guifg=#5e81ac
	Last set from ~/.cache/dein/.cache/init.vim/.dein/plugin/coc.vim line 245
CocListBlackBlack xxx guifg=#3b4252 guibg=#3b4252
	Last set from ~/.cache/dein/.cache/init.vim/.dein/plugin/coc.vim line 232
CocListBlackBlue xxx guifg=#3b4252 guibg=#81a1c1
	Last set from ~/.cache/dein/.cache/init.vim/.dein/plugin/coc.vim line 232
CocListBlackGreen xxx guifg=#3b4252 guibg=#a3be8c
	Last set from ~/.cache/dein/.cache/init.vim/.dein/plugin/coc.vim line 232
CocListBlackGrey xxx guifg=#3b4252 guibg=#4c566a
	Last set from ~/.cache/dein/.cache/init.vim/.dein/plugin/coc.vim line 232
CocListBlackWhite xxx guifg=#3b4252 guibg=#e5e9f0
	Last set from ~/.cache/dein/.cache/init.vim/.dein/plugin/coc.vim line 232
CocListBlackCyan xxx guifg=#3b4252 guibg=#88c0d0
	Last set from ~/.cache/dein/.cache/init.vim/.dein/plugin/coc.vim line 232
CocListBlackYellow xxx guifg=#3b4252 guibg=#ebcb8b
	Last set from ~/.cache/dein/.cache/init.vim/.dein/plugin/coc.vim line 232
CocListBlackMagenta xxx guifg=#3b4252 guibg=#b48ead
	Last set from ~/.cache/dein/.cache/init.vim/.dein/plugin/coc.vim line 232
CocListBlackRed xxx guifg=#3b4252 guibg=#bf616a
	Last set from ~/.cache/dein/.cache/init.vim/.dein/plugin/coc.vim line 232
CocListFgBlack xxx ctermfg=0 guifg=#3b4252
	Last set from ~/.cache/dein/.cache/init.vim/.dein/plugin/coc.vim line 234
CocListBgBlack xxx ctermbg=0 guibg=#3b4252
	Last set from ~/.cache/dein/.cache/init.vim/.dein/plugin/coc.vim line 235
CocListBlueBlack xxx guifg=#81a1c1 guibg=#3b4252
	Last set from ~/.cache/dein/.cache/init.vim/.dein/plugin/coc.vim line 232
CocListBlueBlue xxx guifg=#81a1c1 guibg=#81a1c1
	Last set from ~/.cache/dein/.cache/init.vim/.dein/plugin/coc.vim line 232
CocListBlueGreen xxx guifg=#81a1c1 guibg=#a3be8c
	Last set from ~/.cache/dein/.cache/init.vim/.dein/plugin/coc.vim line 232
CocListBlueGrey xxx guifg=#81a1c1 guibg=#4c566a
	Last set from ~/.cache/dein/.cache/init.vim/.dein/plugin/coc.vim line 232
CocListBlueWhite xxx guifg=#81a1c1 guibg=#e5e9f0
	Last set from ~/.cache/dein/.cache/init.vim/.dein/plugin/coc.vim line 232
CocListBlueCyan xxx guifg=#81a1c1 guibg=#88c0d0
	Last set from ~/.cache/dein/.cache/init.vim/.dein/plugin/coc.vim line 232
CocListBlueYellow xxx guifg=#81a1c1 guibg=#ebcb8b
	Last set from ~/.cache/dein/.cache/init.vim/.dein/plugin/coc.vim line 232
CocListBlueMagenta xxx guifg=#81a1c1 guibg=#b48ead
	Last set from ~/.cache/dein/.cache/init.vim/.dein/plugin/coc.vim line 232
CocListBlueRed xxx guifg=#81a1c1 guibg=#bf616a
	Last set from ~/.cache/dein/.cache/init.vim/.dein/plugin/coc.vim line 232
CocListFgBlue  xxx ctermfg=12 guifg=#81a1c1
	Last set from ~/.cache/dein/.cache/init.vim/.dein/plugin/coc.vim line 234
CocListBgBlue  xxx ctermbg=12 guibg=#81a1c1
	Last set from ~/.cache/dein/.cache/init.vim/.dein/plugin/coc.vim line 235
CocListGreenBlack xxx guifg=#a3be8c guibg=#3b4252
	Last set from ~/.cache/dein/.cache/init.vim/.dein/plugin/coc.vim line 232
CocListGreenBlue xxx guifg=#a3be8c guibg=#81a1c1
	Last set from ~/.cache/dein/.cache/init.vim/.dein/plugin/coc.vim line 232
CocListGreenGreen xxx guifg=#a3be8c guibg=#a3be8c
	Last set from ~/.cache/dein/.cache/init.vim/.dein/plugin/coc.vim line 232
CocListGreenGrey xxx guifg=#a3be8c guibg=#4c566a
	Last set from ~/.cache/dein/.cache/init.vim/.dein/plugin/coc.vim line 232
CocListGreenWhite xxx guifg=#a3be8c guibg=#e5e9f0
	Last set from ~/.cache/dein/.cache/init.vim/.dein/plugin/coc.vim line 232
CocListGreenCyan xxx guifg=#a3be8c guibg=#88c0d0
	Last set from ~/.cache/dein/.cache/init.vim/.dein/plugin/coc.vim line 232
CocListGreenYellow xxx guifg=#a3be8c guibg=#ebcb8b
	Last set from ~/.cache/dein/.cache/init.vim/.dein/plugin/coc.vim line 232
CocListGreenMagenta xxx guifg=#a3be8c guibg=#b48ead
	Last set from ~/.cache/dein/.cache/init.vim/.dein/plugin/coc.vim line 232
CocListGreenRed xxx guifg=#a3be8c guibg=#bf616a
	Last set from ~/.cache/dein/.cache/init.vim/.dein/plugin/coc.vim line 232
CocListFgGreen xxx ctermfg=10 guifg=#a3be8c
	Last set from ~/.cache/dein/.cache/init.vim/.dein/plugin/coc.vim line 234
CocListBgGreen xxx ctermbg=10 guibg=#a3be8c
	Last set from ~/.cache/dein/.cache/init.vim/.dein/plugin/coc.vim line 235
CocListGreyBlack xxx guifg=#4c566a guibg=#3b4252
	Last set from ~/.cache/dein/.cache/init.vim/.dein/plugin/coc.vim line 232
CocListGreyBlue xxx guifg=#4c566a guibg=#81a1c1
	Last set from ~/.cache/dein/.cache/init.vim/.dein/plugin/coc.vim line 232
CocListGreyGreen xxx guifg=#4c566a guibg=#a3be8c
	Last set from ~/.cache/dein/.cache/init.vim/.dein/plugin/coc.vim line 232
CocListGreyGrey xxx guifg=#4c566a guibg=#4c566a
	Last set from ~/.cache/dein/.cache/init.vim/.dein/plugin/coc.vim line 232
CocListGreyWhite xxx guifg=#4c566a guibg=#e5e9f0
	Last set from ~/.cache/dein/.cache/init.vim/.dein/plugin/coc.vim line 232
CocListGreyCyan xxx guifg=#4c566a guibg=#88c0d0
	Last set from ~/.cache/dein/.cache/init.vim/.dein/plugin/coc.vim line 232
CocListGreyYellow xxx guifg=#4c566a guibg=#ebcb8b
	Last set from ~/.cache/dein/.cache/init.vim/.dein/plugin/coc.vim line 232
CocListGreyMagenta xxx guifg=#4c566a guibg=#b48ead
	Last set from ~/.cache/dein/.cache/init.vim/.dein/plugin/coc.vim line 232
CocListGreyRed xxx guifg=#4c566a guibg=#bf616a
	Last set from ~/.cache/dein/.cache/init.vim/.dein/plugin/coc.vim line 232
CocListFgGrey  xxx ctermfg=248 guifg=#4c566a
	Last set from ~/.cache/dein/.cache/init.vim/.dein/plugin/coc.vim line 234
CocListBgGrey  xxx ctermbg=248 guibg=#4c566a
	Last set from ~/.cache/dein/.cache/init.vim/.dein/plugin/coc.vim line 235
CocListWhiteBlack xxx guifg=#e5e9f0 guibg=#3b4252
	Last set from ~/.cache/dein/.cache/init.vim/.dein/plugin/coc.vim line 232
CocListWhiteBlue xxx guifg=#e5e9f0 guibg=#81a1c1
	Last set from ~/.cache/dein/.cache/init.vim/.dein/plugin/coc.vim line 232
CocListWhiteGreen xxx guifg=#e5e9f0 guibg=#a3be8c
	Last set from ~/.cache/dein/.cache/init.vim/.dein/plugin/coc.vim line 232
CocListWhiteGrey xxx guifg=#e5e9f0 guibg=#4c566a
	Last set from ~/.cache/dein/.cache/init.vim/.dein/plugin/coc.vim line 232
CocListWhiteWhite xxx guifg=#e5e9f0 guibg=#e5e9f0
	Last set from ~/.cache/dein/.cache/init.vim/.dein/plugin/coc.vim line 232
CocListWhiteCyan xxx guifg=#e5e9f0 guibg=#88c0d0
	Last set from ~/.cache/dein/.cache/init.vim/.dein/plugin/coc.vim line 232
CocListWhiteYellow xxx guifg=#e5e9f0 guibg=#ebcb8b
	Last set from ~/.cache/dein/.cache/init.vim/.dein/plugin/coc.vim line 232
CocListWhiteMagenta xxx guifg=#e5e9f0 guibg=#b48ead
	Last set from ~/.cache/dein/.cache/init.vim/.dein/plugin/coc.vim line 232
CocListWhiteRed xxx guifg=#e5e9f0 guibg=#bf616a
	Last set from ~/.cache/dein/.cache/init.vim/.dein/plugin/coc.vim line 232
CocListFgWhite xxx ctermfg=15 guifg=#e5e9f0
	Last set from ~/.cache/dein/.cache/init.vim/.dein/plugin/coc.vim line 234
CocListBgWhite xxx ctermbg=15 guibg=#e5e9f0
	Last set from ~/.cache/dein/.cache/init.vim/.dein/plugin/coc.vim line 235
CocListCyanBlack xxx guifg=#88c0d0 guibg=#3b4252
	Last set from ~/.cache/dein/.cache/init.vim/.dein/plugin/coc.vim line 232
CocListCyanBlue xxx guifg=#88c0d0 guibg=#81a1c1
	Last set from ~/.cache/dein/.cache/init.vim/.dein/plugin/coc.vim line 232
CocListCyanGreen xxx guifg=#88c0d0 guibg=#a3be8c
	Last set from ~/.cache/dein/.cache/init.vim/.dein/plugin/coc.vim line 232
CocListCyanGrey xxx guifg=#88c0d0 guibg=#4c566a
	Last set from ~/.cache/dein/.cache/init.vim/.dein/plugin/coc.vim line 232
CocListCyanWhite xxx guifg=#88c0d0 guibg=#e5e9f0
	Last set from ~/.cache/dein/.cache/init.vim/.dein/plugin/coc.vim line 232
CocListCyanCyan xxx guifg=#88c0d0 guibg=#88c0d0
	Last set from ~/.cache/dein/.cache/init.vim/.dein/plugin/coc.vim line 232
CocListCyanYellow xxx guifg=#88c0d0 guibg=#ebcb8b
	Last set from ~/.cache/dein/.cache/init.vim/.dein/plugin/coc.vim line 232
CocListCyanMagenta xxx guifg=#88c0d0 guibg=#b48ead
	Last set from ~/.cache/dein/.cache/init.vim/.dein/plugin/coc.vim line 232
CocListCyanRed xxx guifg=#88c0d0 guibg=#bf616a
	Last set from ~/.cache/dein/.cache/init.vim/.dein/plugin/coc.vim line 232
CocListFgCyan  xxx ctermfg=14 guifg=#88c0d0
	Last set from ~/.cache/dein/.cache/init.vim/.dein/plugin/coc.vim line 234
CocListBgCyan  xxx ctermbg=14 guibg=#88c0d0
	Last set from ~/.cache/dein/.cache/init.vim/.dein/plugin/coc.vim line 235
CocListYellowBlack xxx guifg=#ebcb8b guibg=#3b4252
	Last set from ~/.cache/dein/.cache/init.vim/.dein/plugin/coc.vim line 232
CocListYellowBlue xxx guifg=#ebcb8b guibg=#81a1c1
	Last set from ~/.cache/dein/.cache/init.vim/.dein/plugin/coc.vim line 232
CocListYellowGreen xxx guifg=#ebcb8b guibg=#a3be8c
	Last set from ~/.cache/dein/.cache/init.vim/.dein/plugin/coc.vim line 232
CocListYellowGrey xxx guifg=#ebcb8b guibg=#4c566a
	Last set from ~/.cache/dein/.cache/init.vim/.dein/plugin/coc.vim line 232
CocListYellowWhite xxx guifg=#ebcb8b guibg=#e5e9f0
	Last set from ~/.cache/dein/.cache/init.vim/.dein/plugin/coc.vim line 232
CocListYellowCyan xxx guifg=#ebcb8b guibg=#88c0d0
	Last set from ~/.cache/dein/.cache/init.vim/.dein/plugin/coc.vim line 232
CocListYellowYellow xxx guifg=#ebcb8b guibg=#ebcb8b
	Last set from ~/.cache/dein/.cache/init.vim/.dein/plugin/coc.vim line 232
CocListYellowMagenta xxx guifg=#ebcb8b guibg=#b48ead
	Last set from ~/.cache/dein/.cache/init.vim/.dein/plugin/coc.vim line 232
CocListYellowRed xxx guifg=#ebcb8b guibg=#bf616a
	Last set from ~/.cache/dein/.cache/init.vim/.dein/plugin/coc.vim line 232
CocListFgYellow xxx ctermfg=11 guifg=#ebcb8b
	Last set from ~/.cache/dein/.cache/init.vim/.dein/plugin/coc.vim line 234
CocListBgYellow xxx ctermbg=11 guibg=#ebcb8b
	Last set from ~/.cache/dein/.cache/init.vim/.dein/plugin/coc.vim line 235
CocListMagentaBlack xxx guifg=#b48ead guibg=#3b4252
	Last set from ~/.cache/dein/.cache/init.vim/.dein/plugin/coc.vim line 232
CocListMagentaBlue xxx guifg=#b48ead guibg=#81a1c1
	Last set from ~/.cache/dein/.cache/init.vim/.dein/plugin/coc.vim line 232
CocListMagentaGreen xxx guifg=#b48ead guibg=#a3be8c
	Last set from ~/.cache/dein/.cache/init.vim/.dein/plugin/coc.vim line 232
CocListMagentaGrey xxx guifg=#b48ead guibg=#4c566a
	Last set from ~/.cache/dein/.cache/init.vim/.dein/plugin/coc.vim line 232
CocListMagentaWhite xxx guifg=#b48ead guibg=#e5e9f0
	Last set from ~/.cache/dein/.cache/init.vim/.dein/plugin/coc.vim line 232
CocListMagentaCyan xxx guifg=#b48ead guibg=#88c0d0
	Last set from ~/.cache/dein/.cache/init.vim/.dein/plugin/coc.vim line 232
CocListMagentaYellow xxx guifg=#b48ead guibg=#ebcb8b
	Last set from ~/.cache/dein/.cache/init.vim/.dein/plugin/coc.vim line 232
CocListMagentaMagenta xxx guifg=#b48ead guibg=#b48ead
	Last set from ~/.cache/dein/.cache/init.vim/.dein/plugin/coc.vim line 232
CocListMagentaRed xxx guifg=#b48ead guibg=#bf616a
	Last set from ~/.cache/dein/.cache/init.vim/.dein/plugin/coc.vim line 232
CocListFgMagenta xxx ctermfg=13 guifg=#b48ead
	Last set from ~/.cache/dein/.cache/init.vim/.dein/plugin/coc.vim line 234
CocListBgMagenta xxx ctermbg=13 guibg=#b48ead
	Last set from ~/.cache/dein/.cache/init.vim/.dein/plugin/coc.vim line 235
CocListRedBlack xxx guifg=#bf616a guibg=#3b4252
	Last set from ~/.cache/dein/.cache/init.vim/.dein/plugin/coc.vim line 232
CocListRedBlue xxx guifg=#bf616a guibg=#81a1c1
	Last set from ~/.cache/dein/.cache/init.vim/.dein/plugin/coc.vim line 232
CocListRedGreen xxx guifg=#bf616a guibg=#a3be8c
	Last set from ~/.cache/dein/.cache/init.vim/.dein/plugin/coc.vim line 232
CocListRedGrey xxx guifg=#bf616a guibg=#4c566a
	Last set from ~/.cache/dein/.cache/init.vim/.dein/plugin/coc.vim line 232
CocListRedWhite xxx guifg=#bf616a guibg=#e5e9f0
	Last set from ~/.cache/dein/.cache/init.vim/.dein/plugin/coc.vim line 232
CocListRedCyan xxx guifg=#bf616a guibg=#88c0d0
	Last set from ~/.cache/dein/.cache/init.vim/.dein/plugin/coc.vim line 232
CocListRedYellow xxx guifg=#bf616a guibg=#ebcb8b
	Last set from ~/.cache/dein/.cache/init.vim/.dein/plugin/coc.vim line 232
CocListRedMagenta xxx guifg=#bf616a guibg=#b48ead
	Last set from ~/.cache/dein/.cache/init.vim/.dein/plugin/coc.vim line 232
CocListRedRed  xxx guifg=#bf616a guibg=#bf616a
	Last set from ~/.cache/dein/.cache/init.vim/.dein/plugin/coc.vim line 232
CocListFgRed   xxx ctermfg=9 guifg=#bf616a
	Last set from ~/.cache/dein/.cache/init.vim/.dein/plugin/coc.vim line 234
CocListBgRed   xxx ctermbg=9 guibg=#bf616a
	Last set from ~/.cache/dein/.cache/init.vim/.dein/plugin/coc.vim line 235
CocSemNumber   xxx links to Number
	Last set from ~/.cache/dein/.cache/init.vim/.dein/plugin/coc.vim line 557
CocSemFunction xxx links to Function
	Last set from ~/.cache/dein/.cache/init.vim/.dein/plugin/coc.vim line 557
CocSemKeyword  xxx links to Keyword
	Last set from ~/.cache/dein/.cache/init.vim/.dein/plugin/coc.vim line 557
CocSemParameter xxx links to Identifier
	Last set from ~/.cache/dein/.cache/init.vim/.dein/plugin/coc.vim line 557
CocSemEvent    xxx links to Keyword
	Last set from ~/.cache/dein/.cache/init.vim/.dein/plugin/coc.vim line 557
CocSemModifier xxx links to StorageClass
	Last set from ~/.cache/dein/.cache/init.vim/.dein/plugin/coc.vim line 557
CocSemMacro    xxx links to Define
	Last set from ~/.cache/dein/.cache/init.vim/.dein/plugin/coc.vim line 557
CocSemDeprecated xxx links to CocDeprecatedHighlight
	Last set from ~/.cache/dein/.cache/init.vim/.dein/plugin/coc.vim line 557
CocSemClass    xxx links to TSConstructor
	Last set from ~/.cache/dein/.cache/init.vim/.dein/plugin/coc.vim line 557
CocSemDecorator xxx links to Identifier
	Last set from ~/.cache/dein/.cache/init.vim/.dein/plugin/coc.vim line 557
CocSemOperator xxx links to Operator
	Last set from ~/.cache/dein/.cache/init.vim/.dein/plugin/coc.vim line 557
CocSemStruct   xxx links to Identifier
	Last set from ~/.cache/dein/.cache/init.vim/.dein/plugin/coc.vim line 557
CocSemRegexp   xxx links to TSStringRegex
	Last set from ~/.cache/dein/.cache/init.vim/.dein/plugin/coc.vim line 557
CocSemMethod   xxx links to Function
	Last set from ~/.cache/dein/.cache/init.vim/.dein/plugin/coc.vim line 557
CocSemComment  xxx links to Comment
	Last set from ~/.cache/dein/.cache/init.vim/.dein/plugin/coc.vim line 557
CocSemEnum     xxx links to Type
	Last set from ~/.cache/dein/.cache/init.vim/.dein/plugin/coc.vim line 557
CocSemInterface xxx links to Type
	Last set from ~/.cache/dein/.cache/init.vim/.dein/plugin/coc.vim line 557
CocSemType     xxx links to Type
	Last set from ~/.cache/dein/.cache/init.vim/.dein/plugin/coc.vim line 557
CocSemProperty xxx links to Identifier
	Last set from ~/.cache/dein/.cache/init.vim/.dein/plugin/coc.vim line 557
CocSemTypeParameter xxx links to Identifier
	Last set from ~/.cache/dein/.cache/init.vim/.dein/plugin/coc.vim line 557
CocSemEnumMember xxx links to Constant
	Last set from ~/.cache/dein/.cache/init.vim/.dein/plugin/coc.vim line 557
CocSemBoolean  xxx links to Boolean
	Last set from ~/.cache/dein/.cache/init.vim/.dein/plugin/coc.vim line 557
CocSemNamespace xxx links to Include
	Last set from ~/.cache/dein/.cache/init.vim/.dein/plugin/coc.vim line 557
CocSemString   xxx links to String
	Last set from ~/.cache/dein/.cache/init.vim/.dein/plugin/coc.vim line 557
CocSemVariable xxx links to Identifier
	Last set from ~/.cache/dein/.cache/init.vim/.dein/plugin/coc.vim line 557
CocSymbolUnit  xxx ctermfg=6 guifg=#88c0d0
	Last set from ~/.cache/dein/.cache/init.vim/.dein/plugin/coc.vim line 599
CocSymbolNumber xxx ctermfg=5 guifg=#b48ead
	Last set from ~/.cache/dein/.cache/init.vim/.dein/plugin/coc.vim line 599
CocSymbolFunction xxx ctermfg=6 guifg=#88c0d0
	Last set from ~/.cache/dein/.cache/init.vim/.dein/plugin/coc.vim line 599
CocSymbolKey   xxx ctermfg=223 guifg=#d8dee9
	Last set from ~/.cache/dein/.cache/init.vim/.dein/plugin/coc.vim line 599
CocSymbolKeyword xxx ctermfg=4 guifg=#81a1c1
	Last set from ~/.cache/dein/.cache/init.vim/.dein/plugin/coc.vim line 599
CocSymbolReference xxx ctermfg=223 guifg=#d8dee9
	Last set from ~/.cache/dein/.cache/init.vim/.dein/plugin/coc.vim line 599
CocSymbolFolder xxx ctermfg=6 guifg=#88c0d0
	Last set from ~/.cache/dein/.cache/init.vim/.dein/plugin/coc.vim line 599
CocSymbolVariable xxx ctermfg=4 guifg=#81a1c1
	Last set from ~/.cache/dein/.cache/init.vim/.dein/plugin/coc.vim line 599
CocSymbolNull  xxx ctermfg=4 guifg=#81a1c1
	Last set from ~/.cache/dein/.cache/init.vim/.dein/plugin/coc.vim line 599
CocSymbolValue xxx ctermfg=6 guifg=#88c0d0
	Last set from ~/.cache/dein/.cache/init.vim/.dein/plugin/coc.vim line 599
CocSymbolConstant xxx ctermfg=223 guifg=#d8dee9
	Last set from ~/.cache/dein/.cache/init.vim/.dein/plugin/coc.vim line 599
CocSymbolText  xxx ctermfg=6 guifg=#88c0d0
	Last set from ~/.cache/dein/.cache/init.vim/.dein/plugin/coc.vim line 599
CocSymbolModule xxx ctermfg=4 guifg=#81a1c1
	Last set from ~/.cache/dein/.cache/init.vim/.dein/plugin/coc.vim line 599
CocSymbolPackage xxx ctermfg=4 guifg=#81a1c1
	Last set from ~/.cache/dein/.cache/init.vim/.dein/plugin/coc.vim line 599
CocSymbolClass xxx ctermfg=6 guifg=#88c0d0
	Last set from ~/.cache/dein/.cache/init.vim/.dein/plugin/coc.vim line 599
CocSymbolOperator xxx ctermfg=4 guifg=#81a1c1
	Last set from ~/.cache/dein/.cache/init.vim/.dein/plugin/coc.vim line 599
CocSymbolStruct xxx ctermfg=4 guifg=#81a1c1
	Last set from ~/.cache/dein/.cache/init.vim/.dein/plugin/coc.vim line 599
CocSymbolObject xxx ctermfg=6 guifg=#88c0d0
	Last set from ~/.cache/dein/.cache/init.vim/.dein/plugin/coc.vim line 599
CocSymbolMethod xxx ctermfg=6 guifg=#88c0d0
	Last set from ~/.cache/dein/.cache/init.vim/.dein/plugin/coc.vim line 599
CocSymbolArray xxx ctermfg=6 guifg=#88c0d0
	Last set from ~/.cache/dein/.cache/init.vim/.dein/plugin/coc.vim line 599
CocSymbolEnum  xxx ctermfg=6 guifg=#88c0d0
	Last set from ~/.cache/dein/.cache/init.vim/.dein/plugin/coc.vim line 599
CocSymbolField xxx ctermfg=223 guifg=#d8dee9
	Last set from ~/.cache/dein/.cache/init.vim/.dein/plugin/coc.vim line 599
CocSymbolInterface xxx ctermfg=6 guifg=#88c0d0
	Last set from ~/.cache/dein/.cache/init.vim/.dein/plugin/coc.vim line 599
CocSymbolProperty xxx ctermfg=223 guifg=#d8dee9
	Last set from ~/.cache/dein/.cache/init.vim/.dein/plugin/coc.vim line 599
CocSymbolColor xxx ctermfg=5 guifg=#b48ead
	Last set from ~/.cache/dein/.cache/init.vim/.dein/plugin/coc.vim line 599
CocSymbolFile  xxx ctermfg=4 guifg=#81a1c1
	Last set from ~/.cache/dein/.cache/init.vim/.dein/plugin/coc.vim line 599
CocSymbolEvent xxx ctermfg=223 guifg=#d8dee9
	Last set from ~/.cache/dein/.cache/init.vim/.dein/plugin/coc.vim line 599
CocSymbolTypeParameter xxx ctermfg=223 guifg=#d8dee9
	Last set from ~/.cache/dein/.cache/init.vim/.dein/plugin/coc.vim line 599
CocSymbolConstructor xxx ctermfg=6 guifg=#88c0d0
	Last set from ~/.cache/dein/.cache/init.vim/.dein/plugin/coc.vim line 599
CocSymbolSnippet xxx ctermfg=6 guifg=#88c0d0
	Last set from ~/.cache/dein/.cache/init.vim/.dein/plugin/coc.vim line 599
CocSymbolBoolean xxx ctermfg=4 guifg=#81a1c1
	Last set from ~/.cache/dein/.cache/init.vim/.dein/plugin/coc.vim line 599
CocSymbolNamespace xxx ctermfg=4 guifg=#81a1c1
	Last set from ~/.cache/dein/.cache/init.vim/.dein/plugin/coc.vim line 599
CocSymbolString xxx ctermfg=2 guifg=#a3be8c
	Last set from ~/.cache/dein/.cache/init.vim/.dein/plugin/coc.vim line 599
CocSymbolEnumMember xxx ctermfg=223 guifg=#d8dee9
	Last set from ~/.cache/dein/.cache/init.vim/.dein/plugin/coc.vim line 599
GlyphPaletteDirectory xxx links to Directory
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/glyph_palette/defaults.vim line 78
GlyphPalette0  xxx ctermfg=0 guifg=#3b4252
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/glyph_palette/defaults.vim line 79
GlyphPalette1  xxx ctermfg=1 guifg=#bf616a
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/glyph_palette/defaults.vim line 79
GlyphPalette2  xxx ctermfg=2 guifg=#a3be8c
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/glyph_palette/defaults.vim line 79
GlyphPalette3  xxx ctermfg=3 guifg=#ebcb8b
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/glyph_palette/defaults.vim line 79
GlyphPalette4  xxx ctermfg=4 guifg=#81a1c1
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/glyph_palette/defaults.vim line 79
GlyphPalette5  xxx ctermfg=5 guifg=#b48ead
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/glyph_palette/defaults.vim line 79
GlyphPalette6  xxx ctermfg=6 guifg=#88c0d0
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/glyph_palette/defaults.vim line 79
GlyphPalette7  xxx ctermfg=7 guifg=#e5e9f0
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/glyph_palette/defaults.vim line 79
GlyphPalette8  xxx ctermfg=8 guifg=#4c566a
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/glyph_palette/defaults.vim line 79
GlyphPalette9  xxx ctermfg=9 guifg=#bf616a
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/glyph_palette/defaults.vim line 79
GlyphPalette10 xxx ctermfg=10 guifg=#a3be8c
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/glyph_palette/defaults.vim line 79
GlyphPalette11 xxx ctermfg=11 guifg=#ebcb8b
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/glyph_palette/defaults.vim line 79
GlyphPalette12 xxx ctermfg=12 guifg=#81a1c1
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/glyph_palette/defaults.vim line 79
GlyphPalette13 xxx ctermfg=13 guifg=#b48ead
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/glyph_palette/defaults.vim line 79
GlyphPalette14 xxx ctermfg=14 guifg=#8fbcbb
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/glyph_palette/defaults.vim line 79
GlyphPalette15 xxx ctermfg=15 guifg=#eceff4
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/glyph_palette/defaults.vim line 79
HighlightedyankRegion xxx links to IncSearch
	Last set from ~/.cache/dein/.cache/init.vim/.dein/plugin/highlightedyank.vim line 15
TSCharacter    xxx links to Character
	Last set from Lua
TSRepeat       xxx links to Repeat
	Last set from Lua
TSConstMacro   xxx links to Define
	Last set from Lua
TSDefine       xxx links to Define
	Last set from Lua
TSException    xxx links to Exception
	Last set from Lua
TSBoolean      xxx links to Boolean
	Last set from Lua
@function.call xxx links to TSFunctionCall
	Last set from Lua
TSFunctionCall xxx links to TSFunction
	Last set from Lua
TSInclude      xxx links to Include
	Last set from Lua
TSNumber       xxx links to Number
	Last set from Lua
TSKeyword      xxx links to Keyword
	Last set from Lua
@keyword.function xxx links to TSKeywordFunction
	Last set from Lua
TSKeywordFunction xxx links to Keyword
	Last set from Lua
@keyword.operator xxx links to TSKeywordOperator
	Last set from Lua
TSKeywordOperator xxx links to TSOperator
	Last set from Lua
@keyword.return xxx links to TSKeywordReturn
	Last set from Lua
TSKeywordReturn xxx links to TSKeyword
	Last set from Lua
TSLabel        xxx links to Label
	Last set from Lua
@method.call   xxx links to TSMethodCall
	Last set from Lua
TSMethodCall   xxx links to TSMethod
	Last set from Lua
@error         xxx links to TSError
	Last set from Lua
TSError        xxx cleared
TSOperator     xxx links to Operator
	Last set from Lua
TSParameter    xxx links to Identifier
	Last set from Lua
@parameter.reference xxx links to TSParameterReference
	Last set from Lua
TSParameterReference xxx links to TSParameter
	Last set from Lua
TSDebug        xxx links to Debug
	Last set from Lua
TSPreProc      xxx links to PreProc
	Last set from Lua
TSProperty     xxx links to Identifier
	Last set from Lua
@punctuation.delimiter xxx links to TSPunctDelimiter
	Last set from Lua
TSPunctDelimiter xxx links to Delimiter
	Last set from Lua
@punctuation.bracket xxx links to TSPunctBracket
	Last set from Lua
TSPunctBracket xxx links to Delimiter
	Last set from Lua
@punctuation.special xxx links to TSPunctSpecial
	Last set from Lua
TSPunctSpecial xxx links to Delimiter
	Last set from Lua
TSStorageClass xxx links to StorageClass
	Last set from Lua
@string.regex  xxx links to TSStringRegex
	Last set from Lua
TSStringEscape xxx links to SpecialChar
	Last set from Lua
@string.special xxx links to TSStringSpecial
	Last set from Lua
TSStringSpecial xxx links to SpecialChar
	Last set from Lua
@none          xxx links to TSNone
	Last set from Lua
TSNone         xxx cterm= gui=
	Last set from Lua
@tag           xxx links to TSTag
	Last set from Lua
@tag.attribute xxx links to TSTagAttribute
	Last set from Lua
TSTagAttribute xxx links to TSProperty
	Last set from Lua
@tag.delimiter xxx links to TSTagDelimiter
	Last set from Lua
@text.strong   xxx links to TSStrong
	Last set from Lua
@text.emphasis xxx links to TSEmphasis
	Last set from Lua
@text.strike   xxx links to TSStrike
	Last set from Lua
TSStrike       xxx cterm=strikethrough gui=strikethrough
	Last set from Lua
@text.title    xxx links to TSTitle
	Last set from Lua
TSTitle        xxx links to Title
	Last set from Lua
@text.literal  xxx links to TSLiteral
	Last set from Lua
TSLiteral      xxx links to String
	Last set from Lua
@text.uri      xxx links to TSURI
	Last set from Lua
TSURI          xxx links to Underlined
	Last set from Lua
@text.math     xxx links to TSMath
	Last set from Lua
TSMath         xxx links to Special
	Last set from Lua
@text.reference xxx links to TSTextReference
	Last set from Lua
TSTextReference xxx links to Constant
	Last set from Lua
@text.environment xxx links to TSEnvironment
	Last set from Lua
TSEnvironment  xxx links to Macro
	Last set from Lua
@text.environment.name xxx links to TSEnvironmentName
	Last set from Lua
TSEnvironmentName xxx links to Type
	Last set from Lua
@text.note     xxx links to TSNote
	Last set from Lua
TSNote         xxx links to SpecialComment
	Last set from Lua
@text.warning  xxx links to TSWarning
	Last set from Lua
TSWarning      xxx links to Todo
	Last set from Lua
@text.danger   xxx links to TSDanger
	Last set from Lua
TSDanger       xxx links to WarningMsg
	Last set from Lua
TSTodo         xxx links to Todo
	Last set from Lua
TSString       xxx links to String
	Last set from Lua
@type.builtin  xxx links to TSTypeBuiltin
	Last set from Lua
TSTypeBuiltin  xxx links to Type
	Last set from Lua
TSType         xxx links to Type
	Last set from Lua
@type.qualifier xxx links to TSTypeQualifier
	Last set from Lua
TSTypeQualifier xxx links to Type
	Last set from Lua
TSTypeDefinition xxx links to Typedef
	Last set from Lua
@symbol        xxx links to TSSymbol
	Last set from Lua
TSSymbol       xxx links to Identifier
	Last set from Lua
TSField        xxx links to Identifier
	Last set from Lua
@variable      xxx links to TSVariable
	Last set from Lua
TSText         xxx links to TSNone
	Last set from Lua
@variable.builtin xxx links to TSVariableBuiltin
	Last set from Lua
TSComment      xxx links to Comment
	Last set from Lua
TSFloat        xxx links to Float
	Last set from Lua
@namespace     xxx links to TSNamespace
	Last set from Lua
TSNamespace    xxx links to Include
	Last set from Lua
@annotation    xxx links to TSAnnotation
	Last set from Lua
TSConstant     xxx links to Constant
	Last set from Lua
@attribute     xxx links to TSAttribute
	Last set from Lua
TSAttribute    xxx links to PreProc
	Last set from Lua
TSConditional  xxx links to Conditional
	Last set from Lua
TSMethod       xxx links to Function
	Last set from Lua
TSFunction     xxx links to Function
	Last set from Lua
TSCharacterSpecial xxx links to SpecialChar
	Last set from Lua
styledDefinition xxx cleared
airline_x_inactive xxx ctermfg=7 ctermbg=0 guifg=#e5e9f0 guibg=#3b4252
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/airline/highlighter.vim line 239
airline_x_inactive_bold xxx cterm=bold ctermfg=7 ctermbg=0 gui=bold guifg=#e5e9f0 guibg=#3b4252
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/airline/highlighter.vim line 239
airline_x_inactive_red xxx ctermfg=160 ctermbg=0 guifg=#ff0000 guibg=#3b4252
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/airline/highlighter.vim line 239
airline_y_inactive xxx ctermfg=7 ctermbg=8 guifg=#e5e9f0 guibg=#4c566a
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/airline/highlighter.vim line 239
airline_y_inactive_bold xxx cterm=bold ctermfg=7 ctermbg=8 gui=bold guifg=#e5e9f0 guibg=#4c566a
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/airline/highlighter.vim line 239
airline_y_inactive_red xxx ctermfg=160 ctermbg=8 guifg=#ff0000 guibg=#4c566a
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/airline/highlighter.vim line 239
airline_z_inactive xxx ctermfg=7 ctermbg=8 guifg=#e5e9f0 guibg=#4c566a
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/airline/highlighter.vim line 239
airline_z_inactive_bold xxx cterm=bold ctermfg=7 ctermbg=8 gui=bold guifg=#e5e9f0 guibg=#4c566a
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/airline/highlighter.vim line 239
airline_z_inactive_red xxx ctermfg=160 ctermbg=8 guifg=#ff0000 guibg=#4c566a
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/airline/highlighter.vim line 239
airline_term_inactive xxx ctermfg=7 ctermbg=0 guifg=#e5e9f0 guibg=#3b4252
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/airline/highlighter.vim line 239
airline_term_inactive_bold xxx cterm=bold ctermfg=7 ctermbg=0 gui=bold guifg=#e5e9f0 guibg=#3b4252
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/airline/highlighter.vim line 239
airline_term_inactive_red xxx ctermfg=160 ctermbg=0 guifg=#ff0000 guibg=#3b4252
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/airline/highlighter.vim line 239
airline_error_inactive xxx ctermfg=0 ctermbg=1 guifg=#2e3440 guibg=#bf616a
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/airline/highlighter.vim line 239
airline_error_inactive_bold xxx cterm=bold ctermfg=0 ctermbg=1 gui=bold guifg=#2e3440 guibg=#bf616a
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/airline/highlighter.vim line 239
airline_error_inactive_red xxx ctermfg=160 ctermbg=1 guifg=#ff0000 guibg=#bf616a
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/airline/highlighter.vim line 239
airline_a_inactive xxx ctermfg=7 ctermbg=8 guifg=#e5e9f0 guibg=#4c566a
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/airline/highlighter.vim line 239
airline_a_inactive_bold xxx cterm=bold ctermfg=7 ctermbg=8 gui=bold guifg=#e5e9f0 guibg=#4c566a
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/airline/highlighter.vim line 239
airline_a_inactive_red xxx ctermfg=160 ctermbg=8 guifg=#ff0000 guibg=#4c566a
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/airline/highlighter.vim line 239
airline_b_inactive xxx ctermfg=7 ctermbg=8 guifg=#e5e9f0 guibg=#4c566a
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/airline/highlighter.vim line 239
airline_b_inactive_bold xxx cterm=bold ctermfg=7 ctermbg=8 gui=bold guifg=#e5e9f0 guibg=#4c566a
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/airline/highlighter.vim line 239
airline_b_inactive_red xxx ctermfg=160 ctermbg=8 guifg=#ff0000 guibg=#4c566a
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/airline/highlighter.vim line 239
airline_c_inactive xxx ctermfg=7 ctermbg=0 guifg=#e5e9f0 guibg=#3b4252
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/airline/highlighter.vim line 239
airline_c_inactive_bold xxx cterm=bold ctermfg=7 ctermbg=0 gui=bold guifg=#e5e9f0 guibg=#3b4252
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/airline/highlighter.vim line 239
airline_c_inactive_red xxx ctermfg=160 ctermbg=0 guifg=#ff0000 guibg=#3b4252
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/airline/highlighter.vim line 239
airline_warning_inactive xxx ctermfg=8 ctermbg=3 guifg=#3b4252 guibg=#ebcb8b
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/airline/highlighter.vim line 239
airline_warning_inactive_bold xxx cterm=bold ctermfg=8 ctermbg=3 gui=bold guifg=#3b4252 guibg=#ebcb8b
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/airline/highlighter.vim line 239
airline_warning_inactive_red xxx ctermfg=160 ctermbg=3 guifg=#ff0000 guibg=#ebcb8b
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/airline/highlighter.vim line 239
airline_x      xxx ctermfg=7 ctermbg=8 guifg=#e5e9f0 guibg=#4c566a
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/airline/highlighter.vim line 239
airline_x_bold xxx cterm=bold ctermfg=7 ctermbg=8 gui=bold guifg=#e5e9f0 guibg=#4c566a
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/airline/highlighter.vim line 239
airline_x_red  xxx ctermfg=160 ctermbg=8 guifg=#ff0000 guibg=#4c566a
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/airline/highlighter.vim line 239
airline_y      xxx ctermfg=0 ctermbg=4 guifg=#3b4252 guibg=#81a1c1
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/airline/highlighter.vim line 239
airline_y_bold xxx cterm=bold ctermfg=0 ctermbg=4 gui=bold guifg=#3b4252 guibg=#81a1c1
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/airline/highlighter.vim line 239
airline_y_red  xxx ctermfg=160 ctermbg=4 guifg=#ff0000 guibg=#81a1c1
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/airline/highlighter.vim line 239
airline_z      xxx ctermfg=0 ctermbg=6 guifg=#3b4252 guibg=#88c0d0
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/airline/highlighter.vim line 239
airline_z_bold xxx cterm=bold ctermfg=0 ctermbg=6 gui=bold guifg=#3b4252 guibg=#88c0d0
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/airline/highlighter.vim line 239
airline_z_red  xxx ctermfg=160 ctermbg=6 guifg=#ff0000 guibg=#88c0d0
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/airline/highlighter.vim line 239
airline_term   xxx ctermfg=7 ctermbg=8 guifg=#e5e9f0 guibg=#4c566a
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/airline/highlighter.vim line 239
airline_term_bold xxx cterm=bold ctermfg=7 ctermbg=8 gui=bold guifg=#e5e9f0 guibg=#4c566a
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/airline/highlighter.vim line 239
airline_term_red xxx ctermfg=160 ctermbg=8 guifg=#ff0000 guibg=#4c566a
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/airline/highlighter.vim line 239
airline_error  xxx ctermfg=0 ctermbg=1 guifg=#2e3440 guibg=#bf616a
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/airline/highlighter.vim line 239
airline_error_bold xxx cterm=bold ctermfg=0 ctermbg=1 gui=bold guifg=#2e3440 guibg=#bf616a
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/airline/highlighter.vim line 239
airline_error_red xxx ctermfg=160 ctermbg=1 guifg=#ff0000 guibg=#bf616a
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/airline/highlighter.vim line 239
airline_a      xxx ctermfg=0 ctermbg=6 guifg=#3b4252 guibg=#88c0d0
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/airline/highlighter.vim line 239
airline_a_bold xxx cterm=bold ctermfg=0 ctermbg=6 gui=bold guifg=#3b4252 guibg=#88c0d0
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/airline/highlighter.vim line 239
airline_a_red  xxx ctermfg=160 ctermbg=6 guifg=#ff0000 guibg=#88c0d0
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/airline/highlighter.vim line 239
airline_b      xxx ctermfg=0 ctermbg=4 guifg=#3b4252 guibg=#81a1c1
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/airline/highlighter.vim line 239
airline_b_bold xxx cterm=bold ctermfg=0 ctermbg=4 gui=bold guifg=#3b4252 guibg=#81a1c1
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/airline/highlighter.vim line 239
airline_b_red  xxx ctermfg=160 ctermbg=4 guifg=#ff0000 guibg=#81a1c1
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/airline/highlighter.vim line 239
airline_c      xxx ctermfg=7 ctermbg=8 guifg=#e5e9f0 guibg=#4c566a
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/airline/highlighter.vim line 239
airline_c_bold xxx cterm=bold ctermfg=7 ctermbg=8 gui=bold guifg=#e5e9f0 guibg=#4c566a
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/airline/highlighter.vim line 239
airline_c_red  xxx ctermfg=160 ctermbg=8 guifg=#ff0000 guibg=#4c566a
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/airline/highlighter.vim line 239
airline_warning xxx ctermfg=8 ctermbg=3 guifg=#3b4252 guibg=#ebcb8b
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/airline/highlighter.vim line 239
airline_warning_bold xxx cterm=bold ctermfg=8 ctermbg=3 gui=bold guifg=#3b4252 guibg=#ebcb8b
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/airline/highlighter.vim line 239
airline_warning_red xxx ctermfg=160 ctermbg=3 guifg=#ff0000 guibg=#ebcb8b
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/airline/highlighter.vim line 239
airline_a_to_airline_b xxx ctermfg=6 ctermbg=4 guifg=#88c0d0 guibg=#81a1c1
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/airline/highlighter.vim line 239
airline_b_to_airline_c xxx ctermfg=4 ctermbg=8 guifg=#81a1c1 guibg=#4c566a
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/airline/highlighter.vim line 239
airline_c_to_airline_x xxx ctermfg=8 ctermbg=8 guifg=#4c566a guibg=#4c566a
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/airline/highlighter.vim line 239
airline_x_to_airline_y xxx ctermfg=4 ctermbg=8 guifg=#81a1c1 guibg=#4c566a
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/airline/highlighter.vim line 239
airline_y_to_airline_z xxx ctermfg=6 ctermbg=4 guifg=#88c0d0 guibg=#81a1c1
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/airline/highlighter.vim line 239
airline_z_to_airline_warning xxx ctermfg=3 ctermbg=6 guifg=#ebcb8b guibg=#88c0d0
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/airline/highlighter.vim line 239
airline_warning_to_airline_error xxx ctermfg=1 ctermbg=3 guifg=#bf616a guibg=#ebcb8b
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/airline/highlighter.vim line 239
airline_c1_inactive xxx ctermfg=7 ctermbg=0 guifg=#e5e9f0 guibg=#3b4252
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/airline/highlighter.vim line 239
airline_x_to_airline_y_inactive xxx ctermfg=8 ctermbg=0 guifg=#4c566a guibg=#3b4252
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/airline/highlighter.vim line 239
airline_z_to_airline_warning_inactive xxx ctermfg=3 ctermbg=8 guifg=#ebcb8b guibg=#4c566a
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/airline/highlighter.vim line 239
airline_c_to_airline_x_inactive xxx ctermfg=0 ctermbg=0 guifg=#3b4252 guibg=#3b4252
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/airline/highlighter.vim line 239
airline_a_to_airline_b_inactive xxx ctermfg=8 ctermbg=8 guifg=#4c566a guibg=#4c566a
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/airline/highlighter.vim line 239
airline_warning_to_airline_error_inactive xxx ctermfg=1 ctermbg=3 guifg=#bf616a guibg=#ebcb8b
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/airline/highlighter.vim line 239
airline_y_to_airline_z_inactive xxx ctermfg=8 ctermbg=8 guifg=#4c566a guibg=#4c566a
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/airline/highlighter.vim line 239
airline_b_to_airline_c_inactive xxx ctermfg=8 ctermbg=0 guifg=#4c566a guibg=#3b4252
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/airline/highlighter.vim line 239
@spell         xxx cleared
CocErrorLine   xxx cleared
CocWarningLine xxx cleared
CocInfoLine    xxx cleared
CocHintLine    xxx cleared
CocSelectedLine xxx cleared
CocGitChangedSign xxx links to DiffChange
CocGitAddedSign xxx links to DiffAdd
CocGitRemovedSign xxx links to DiffDelete
CocGitTopRemovedSign xxx links to DiffDelete
CocGitChangeRemovedSign xxx links to DiffChange
FgCocNotificationProgressBgNormal xxx ctermfg=12 guifg=#15aabf
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/coc/highlight.vim line 473
Executing User Autocommands for "CocNvimInit"
autocommand call s:doautocmd_from_coc()

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.config/coc/extensions/node_modules/coc-fzf-preview/plugin)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
sourcing "/Users/tomoya_tanaka/.config/coc/extensions/node_modules/coc-fzf-preview/plugin/fzf_preview.vim"
finished sourcing /Users/tomoya_tanaka/.config/coc/extensions/node_modules/coc-fzf-preview/plugin/fzf_preview.vim
FgCocNotificationProgressBgNormal xxx ctermfg=12 guifg=#15aabf
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/coc/highlight.vim line 473
Executing CursorHold Autocommands for "*"
autocommand silent call CocActionAsync('highlight')

autocommand silent call CocActionAsync('highlight')

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing InsertEnter Autocommands for "*"
autocommand call s:Autocmd('InsertEnter', +expand('<abuf>'))

Executing InsertEnter Autocommands for "*"
autocommand call lexima#insmode#clear_stack()

autocommand call s:setup_insmode()

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing WinClosed Autocommands for "*"
autocommand call s:HandleWinClosed(+expand('<amatch>'))

Executing BufWinLeave Autocommands for "*"
autocommand call s:Autocmd('BufWinLeave', +expand('<abuf>'), bufwinid(+expand('<abuf>')))

Executing BufHidden Autocommands for "*"
autocommand call s:Autocmd('BufHidden', +expand('<abuf>'))

Executing CursorHoldI Autocommands for "*"
autocommand call s:Autocmd('CursorHoldI', +expand('<abuf>'), [line('.'), col('.')])

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing InsertLeave Autocommands for "*"
autocommand call s:Autocmd('InsertLeave', +expand('<abuf>'))

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()


Executing BufWritePre Autocommands for "*"
autocommand call s:SyncAutocmd('BufWritePre', +expand('<abuf>'), bufname(+expand('<abuf>')), getbufvar(+expand('<abuf>'), 'changedtick'))

"index.cpp" 
"index.cpp" 12L, 271B written
Executing BufWritePost Autocommands for "*"
autocommand call s:Autocmd('BufWritePost', +expand('<abuf>'), getbufvar(+expand('<abuf>'), 'changedtick'))

Executing BufWritePost Autocommands for "*"
autocommand call s:reset_untracked_cache(0)

Executing BufWritePost Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing BufWritePost Autocommands for "*"
autocommand call s:mru_append(expand('<amatch>'))

autocommand call s:mrw_append(expand('<amatch>'))

"index.cpp" 12L, 271B written
Executing CursorHold Autocommands for "*"
autocommand silent call CocActionAsync('highlight')

autocommand silent call CocActionAsync('highlight')

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing InsertEnter Autocommands for "*"
autocommand call s:Autocmd('InsertEnter', +expand('<abuf>'))

Executing InsertEnter Autocommands for "*"
autocommand call lexima#insmode#clear_stack()

autocommand call s:setup_insmode()

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing InsertLeave Autocommands for "*"
autocommand call s:Autocmd('InsertLeave', +expand('<abuf>'))

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()


Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.config/coc/extensions/node_modules/coc-fzf-preview/autoload/fzf_preview/remote)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
sourcing "/Users/tomoya_tanaka/.config/coc/extensions/node_modules/coc-fzf-preview/autoload/fzf_preview/remote/variable.vim"
finished sourcing /Users/tomoya_tanaka/.config/coc/extensions/node_modules/coc-fzf-preview/autoload/fzf_preview/remote/variable.vim
Executing command: "'/bin/zsh' '-c' 'git rev-parse --show-toplevel 2>/dev/null'"


Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.config/coc/extensions/node_modules/coc-fzf-preview/autoload/fzf_preview/remote/resource)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
sourcing "/Users/tomoya_tanaka/.config/coc/extensions/node_modules/coc-fzf-preview/autoload/fzf_preview/remote/resource/project_files.vim"
finished sourcing /Users/tomoya_tanaka/.config/coc/extensions/node_modules/coc-fzf-preview/autoload/fzf_preview/remote/resource/project_files.vim
Executing command: "'/bin/zsh' '-c' 'rg --files --hidden --no-messages --glob '!.git/*' --glob !'* *''"


Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.config/coc/extensions/node_modules/coc-fzf-preview/autoload/fzf_preview/remote)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
sourcing "/Users/tomoya_tanaka/.config/coc/extensions/node_modules/coc-fzf-preview/autoload/fzf_preview/remote/window.vim"
finished sourcing /Users/tomoya_tanaka/.config/coc/extensions/node_modules/coc-fzf-preview/autoload/fzf_preview/remote/window.vim
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.config/coc/extensions/node_modules/coc-fzf-preview/autoload/fzf_preview/remote)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
sourcing "/Users/tomoya_tanaka/.config/coc/extensions/node_modules/coc-fzf-preview/autoload/fzf_preview/remote/runner.vim"
finished sourcing /Users/tomoya_tanaka/.config/coc/extensions/node_modules/coc-fzf-preview/autoload/fzf_preview/remote/runner.vim
Executing command: "'sh' '-c' ''fzf' --version --no-height'"


Executing WinLeave Autocommands for "*"
autocommand call s:Autocmd('WinLeave', win_getid())

Executing WinLeave Autocommands for "*"
autocommand call s:Remove_Matches()

Executing WinEnter Autocommands for "*"
autocommand call s:dopopd()

Executing WinEnter Autocommands for "*"
autocommand call <sid>on_window_changed('WinEnter')

Executing WinEnter Autocommands for "*"
autocommand call coc#float#nvim_win_enter(win_getid())

autocommand call s:Autocmd('WinEnter', win_getid())

Executing WinEnter Autocommands for "*"
autocommand let g:fzf#vim#buffers[bufnr('')] = reltimefloat(reltime())

Executing WinEnter Autocommands for "*"
autocommand let s:tmux_is_last_pane = 0

Executing WinEnter Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing BufEnter Autocommands for "*"
autocommand set fo-=c fo-=r fo-=o

Executing BufEnter Autocommands for "*"
autocommand call s:Autocmd('BufEnter', +expand('<abuf>'))

Executing BufEnter Autocommands for "*"
autocommand if conflict_marker#detect#markers() | call s:on_detected() | endif

Executing BufEnter Autocommands for "*"
autocommand call s:mru_append(expand('<amatch>'))

Executing BufWinEnter Autocommands for "*"
autocommand call <sid>on_window_changed('BufWinEnter')

Executing BufWinEnter Autocommands for "*"
autocommand call s:Autocmd('BufWinEnter', +expand('<abuf>'), win_getid())

Executing BufWinEnter Autocommands for "*"
autocommand let g:fzf#vim#buffers[bufnr('')] = reltimefloat(reltime())

Executing BufWinEnter Autocommands for "*"
autocommand call s:mru_append(expand('<amatch>'))

[window] /Users/tomoya_tanaka/projects/git...om/txxxxc/competitive-programming/ABC_207/c
Executing BufFilePost Autocommands for "*"
autocommand call s:UseConfigFiles()

Executing TermOpen Autocommands for "*"
autocommand startinsert

Executing TermOpen Autocommands for "term://*"
autocommand <Lua 12: ~/.cache/dein/.cache/init.vim/.dein/lua/toggleterm.lua:25>

Executing TermOpen Autocommands for "*"
autocommand call s:Autocmd('TermOpen', +expand('<abuf>'))

[global] /Users/tomoya_tanaka/projects/git...om/txxxxc/competitive-programming/ABC_207/c
Executing FileType Autocommands for "*"
autocommand call s:LoadFTPlugin()

not found in runtime path: "ftplugin/fzf.vim ftplugin/fzf_*.vim ftplugin/fzf/*.vim"
not found in runtime path: "ftplugin/fzf.lua ftplugin/fzf_*.lua ftplugin/fzf/*.lua"
Executing FileType Autocommands for "*"
autocommand call s:LoadIndent()

not found in runtime path: "indent/fzf.vim"
not found in runtime path: "indent/fzf.lua"
Executing FileType Autocommands for "*?"
autocommand call dein#autoload#_on_default_event('FileType')

Executing FileType Autocommands for "*"
autocommand if !exists('b:ts_highlight') | 0verbose exe "set syntax=" . expand("<amatch>") | endif

Executing FileType Autocommands for "*"
autocommand set fo-=c fo-=r fo-=o

autocommand set fo-=c fo-=r fo-=o " 改行時の自動コメントアウトを無効化する 

autocommand <Lua 22: ~/.cache/dein/repos/github.com/nvim-treesitter/nvim-treesitter/lua/nvim-treesitter/install.lua:431>

Executing FileType Autocommands for "*"
autocommand call <sid>on_window_changed('FileType')

Executing FileType Autocommands for "*"
autocommand call s:Autocmd('FileType', expand('<amatch>'), +expand('<abuf>'))

Executing FileType Autocommands for "*"
autocommand <Lua 23: ~/.cache/dein/repos/github.com/nvim-treesitter/nvim-treesitter/lua/nvim-treesitter/configs.lua:107>

Executing FileType Autocommands for "fzf"
autocommand tnoremap <silent> <buffer> <Esc> <C-g>

autocommand nnoremap <silent> <buffer> <C-g> i<C-g>

autocommand vnoremap <silent> <buffer> <C-g> <Esc>i<C-g>

Executing FileType Autocommands for "fzf"
autocommand call fzf_preview#remote#window#set_fzf_last_query()

Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/coc)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/coc/highlight.vim"
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/coc/highlight.vim
Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

Executing FuncUndefined Autocommands for "FzfPreviewDispatchResumeQuery"
autocommand call remote#define#FunctionBootstrap("node", "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/rplugin/node/fzf-preview.vim:function:FzfPreviewDispatchResumeQuery", v:false, "FzfPreviewDispatchResumeQuery", {}, "RPC_DEFINE_AUTOCMD_GROUP_68")

Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/autoload/provider)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 10: sourcing "/opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/autoload/provider/node.vim"
Executing command: "'/Users/tomoya_tanaka/.asdf/shims/node' '-v'"


finished sourcing /opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/autoload/provider/node.vim
continuing in remote#host#Require
Executing WinLeave Autocommands for "*"
autocommand call s:Autocmd('WinLeave', win_getid())

Executing WinLeave Autocommands for "*"
autocommand call s:Remove_Matches()

Executing WinClosed Autocommands for "*"
autocommand call s:HandleWinClosed(+expand('<amatch>'))

Executing BufWinLeave Autocommands for "*"
autocommand call s:Autocmd('BufWinLeave', +expand('<abuf>'), bufwinid(+expand('<abuf>')))

Executing BufUnload Autocommands for "*"
autocommand call <sid>on_window_changed('BufUnload')

Executing BufUnload Autocommands for "*"
autocommand call s:Autocmd('BufUnload', +expand('<abuf>'))

Executing WinEnter Autocommands for "*"
autocommand call s:dopopd()

Executing WinEnter Autocommands for "*"
autocommand call <sid>on_window_changed('WinEnter')

Executing WinEnter Autocommands for "*"
autocommand call coc#float#nvim_win_enter(win_getid())

autocommand call s:Autocmd('WinEnter', win_getid())

Executing WinEnter Autocommands for "*"
autocommand let g:fzf#vim#buffers[bufnr('')] = reltimefloat(reltime())

Executing WinEnter Autocommands for "*"
autocommand let s:tmux_is_last_pane = 0

Executing WinEnter Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing BufEnter Autocommands for "*"
autocommand set fo-=c fo-=r fo-=o

Executing BufEnter Autocommands for "*"
autocommand call s:Autocmd('BufEnter', +expand('<abuf>'))

Executing BufEnter Autocommands for "*"
autocommand if conflict_marker#detect#markers() | call s:on_detected() | endif

Executing BufEnter Autocommands for "*"
autocommand call s:mru_append(expand('<amatch>'))

[window] /Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c
Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing InsertEnter Autocommands for "*"
autocommand call s:Autocmd('InsertEnter', +expand('<abuf>'))

Executing InsertEnter Autocommands for "*"
autocommand call lexima#insmode#clear_stack()

autocommand call s:setup_insmode()

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing InsertLeave Autocommands for "*"
autocommand call s:Autocmd('InsertLeave', +expand('<abuf>'))

Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/coc)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 16: sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/coc/highlight.vim"
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/coc/highlight.vim
continuing in <SNR>61_request
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.config/coc/extensions/node_modules/coc-fzf-preview/autoload/fzf_preview/remote)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 16: sourcing "/Users/tomoya_tanaka/.config/coc/extensions/node_modules/coc-fzf-preview/autoload/fzf_preview/remote/handler_to_process.vim"
finished sourcing /Users/tomoya_tanaka/.config/coc/extensions/node_modules/coc-fzf-preview/autoload/fzf_preview/remote/handler_to_process.vim
continuing in <SNR>61_request
Error on request (runCommand): Vim(return):Error invoking 'runCommand' on channel 7 (coc):
Vim(edit):E37: No write since last change (add ! to override)
[global] /Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c
Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorHold Autocommands for "*"
autocommand silent call CocActionAsync('highlight')

autocommand silent call CocActionAsync('highlight')

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorHold Autocommands for "*"
autocommand silent call CocActionAsync('highlight')

autocommand silent call CocActionAsync('highlight')

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()


Executing BufWritePre Autocommands for "*"
autocommand call s:SyncAutocmd('BufWritePre', +expand('<abuf>'), bufname(+expand('<abuf>')), getbufvar(+expand('<abuf>'), 'changedtick'))

"index.cpp" 
"index.cpp" 12L, 272B written
Executing BufWritePost Autocommands for "*"
autocommand call s:Autocmd('BufWritePost', +expand('<abuf>'), getbufvar(+expand('<abuf>'), 'changedtick'))

Executing BufWritePost Autocommands for "*"
autocommand call s:reset_untracked_cache(0)

Executing BufWritePost Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing BufWritePost Autocommands for "*"
autocommand call s:mru_append(expand('<amatch>'))

autocommand call s:mrw_append(expand('<amatch>'))

"index.cpp" 12L, 272B written
Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()


Executing BufWritePre Autocommands for "*"
autocommand call s:SyncAutocmd('BufWritePre', +expand('<abuf>'), bufname(+expand('<abuf>')), getbufvar(+expand('<abuf>'), 'changedtick'))

"index.cpp" 
"index.cpp" 12L, 272B written
Executing BufWritePost Autocommands for "*"
autocommand call s:Autocmd('BufWritePost', +expand('<abuf>'), getbufvar(+expand('<abuf>'), 'changedtick'))

Executing BufWritePost Autocommands for "*"
autocommand call s:reset_untracked_cache(0)

Executing BufWritePost Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing BufWritePost Autocommands for "*"
autocommand call s:mru_append(expand('<amatch>'))

autocommand call s:mrw_append(expand('<amatch>'))

"index.cpp" 12L, 272B written
Executing CursorHold Autocommands for "*"
autocommand silent call CocActionAsync('highlight')

autocommand silent call CocActionAsync('highlight')

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorHold Autocommands for "*"
autocommand silent call CocActionAsync('highlight')

autocommand silent call CocActionAsync('highlight')

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing InsertEnter Autocommands for "*"
autocommand call s:Autocmd('InsertEnter', +expand('<abuf>'))

Executing InsertEnter Autocommands for "*"
autocommand call lexima#insmode#clear_stack()

autocommand call s:setup_insmode()

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing CursorHoldI Autocommands for "*"
autocommand call s:Autocmd('CursorHoldI', +expand('<abuf>'), [line('.'), col('.')])

Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/coc)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/coc/pum.vim"
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/coc/pum.vim
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/coc)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 52: sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/coc/dialog.vim"
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/coc/dialog.vim
continuing in coc#pum#create
Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing WinClosed Autocommands for "*"
autocommand call s:HandleWinClosed(+expand('<amatch>'))

Executing BufWinLeave Autocommands for "*"
autocommand call s:Autocmd('BufWinLeave', +expand('<abuf>'), bufwinid(+expand('<abuf>')))

Executing BufHidden Autocommands for "*"
autocommand call s:Autocmd('BufHidden', +expand('<abuf>'))

Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing CursorHoldI Autocommands for "*"
autocommand call s:Autocmd('CursorHoldI', +expand('<abuf>'), [line('.'), col('.')])

Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
[coc.nvim] Ultisnips not loaded
[coc.nvim] Ultisnips not loaded
Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing CursorHoldI Autocommands for "*"
autocommand call s:Autocmd('CursorHoldI', +expand('<abuf>'), [line('.'), col('.')])

Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing CursorHoldI Autocommands for "*"
autocommand call s:Autocmd('CursorHoldI', +expand('<abuf>'), [line('.'), col('.')])

Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing CursorHoldI Autocommands for "*"
autocommand call s:Autocmd('CursorHoldI', +expand('<abuf>'), [line('.'), col('.')])

Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing CursorHoldI Autocommands for "*"
autocommand call s:Autocmd('CursorHoldI', +expand('<abuf>'), [line('.'), col('.')])

Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing CursorHoldI Autocommands for "*"
autocommand call s:Autocmd('CursorHoldI', +expand('<abuf>'), [line('.'), col('.')])

Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing CursorHoldI Autocommands for "*"
autocommand call s:Autocmd('CursorHoldI', +expand('<abuf>'), [line('.'), col('.')])

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing InsertLeave Autocommands for "*"
autocommand call s:Autocmd('InsertLeave', +expand('<abuf>'))

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()


Executing BufWritePre Autocommands for "*"
autocommand call s:SyncAutocmd('BufWritePre', +expand('<abuf>'), bufname(+expand('<abuf>')), getbufvar(+expand('<abuf>'), 'changedtick'))

"index.cpp" 
"index.cpp" 13L, 296B written
Executing BufWritePost Autocommands for "*"
autocommand call s:Autocmd('BufWritePost', +expand('<abuf>'), getbufvar(+expand('<abuf>'), 'changedtick'))

Executing BufWritePost Autocommands for "*"
autocommand call s:reset_untracked_cache(0)

Executing BufWritePost Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing BufWritePost Autocommands for "*"
autocommand call s:mru_append(expand('<amatch>'))

autocommand call s:mrw_append(expand('<amatch>'))

"index.cpp" 13L, 296B written
Executing CursorHold Autocommands for "*"
autocommand silent call CocActionAsync('highlight')

autocommand silent call CocActionAsync('highlight')

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorHold Autocommands for "*"
autocommand silent call CocActionAsync('highlight')

autocommand silent call CocActionAsync('highlight')

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorHold Autocommands for "*"
autocommand silent call CocActionAsync('highlight')

autocommand silent call CocActionAsync('highlight')

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorHold Autocommands for "*"
autocommand silent call CocActionAsync('highlight')

autocommand silent call CocActionAsync('highlight')

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorHold Autocommands for "*"
autocommand silent call CocActionAsync('highlight')

autocommand silent call CocActionAsync('highlight')

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorHold Autocommands for "*"
autocommand silent call CocActionAsync('highlight')

autocommand silent call CocActionAsync('highlight')

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorHold Autocommands for "*"
autocommand silent call CocActionAsync('highlight')

autocommand silent call CocActionAsync('highlight')

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing InsertEnter Autocommands for "*"
autocommand call s:Autocmd('InsertEnter', +expand('<abuf>'))

Executing InsertEnter Autocommands for "*"
autocommand call lexima#insmode#clear_stack()

autocommand call s:setup_insmode()

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing CursorHoldI Autocommands for "*"
autocommand call s:Autocmd('CursorHoldI', +expand('<abuf>'), [line('.'), col('.')])

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing InsertLeave Autocommands for "*"
autocommand call s:Autocmd('InsertLeave', +expand('<abuf>'))

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChanged Autocommands for "*"
autocommand call s:Autocmd('TextChanged', +expand('<abuf>'), getbufvar(+expand('<abuf>'), 'changedtick'))

Executing TextChanged Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing CursorHold Autocommands for "*"
autocommand silent call CocActionAsync('highlight')

autocommand silent call CocActionAsync('highlight')

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing InsertEnter Autocommands for "*"
autocommand call s:Autocmd('InsertEnter', +expand('<abuf>'))

Executing InsertEnter Autocommands for "*"
autocommand call lexima#insmode#clear_stack()

autocommand call s:setup_insmode()

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing CursorHoldI Autocommands for "*"
autocommand call s:Autocmd('CursorHoldI', +expand('<abuf>'), [line('.'), col('.')])

Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Error detected while processing function coc#pum#_close[2]..<SNR>189_close_pum[2]..coc#float#close[1]..coc#float#close_related:
line   19:
E5555: API call: Invalid window id: 1009
Executing WinClosed Autocommands for "*"
autocommand call s:HandleWinClosed(+expand('<amatch>'))

Executing BufWinLeave Autocommands for "*"
autocommand call s:Autocmd('BufWinLeave', +expand('<abuf>'), bufwinid(+expand('<abuf>')))

Executing BufHidden Autocommands for "*"
autocommand call s:Autocmd('BufHidden', +expand('<abuf>'))

Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing CursorHoldI Autocommands for "*"
autocommand call s:Autocmd('CursorHoldI', +expand('<abuf>'), [line('.'), col('.')])

Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing WinClosed Autocommands for "*"
autocommand call s:HandleWinClosed(+expand('<amatch>'))

Executing BufWinLeave Autocommands for "*"
autocommand call s:Autocmd('BufWinLeave', +expand('<abuf>'), bufwinid(+expand('<abuf>')))

Executing BufHidden Autocommands for "*"
autocommand call s:Autocmd('BufHidden', +expand('<abuf>'))

Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing WinClosed Autocommands for "*"
autocommand call s:HandleWinClosed(+expand('<amatch>'))

Executing BufWinLeave Autocommands for "*"
autocommand call s:Autocmd('BufWinLeave', +expand('<abuf>'), bufwinid(+expand('<abuf>')))

Executing BufHidden Autocommands for "*"
autocommand call s:Autocmd('BufHidden', +expand('<abuf>'))

Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing WinClosed Autocommands for "*"
autocommand call s:HandleWinClosed(+expand('<amatch>'))

Executing BufWinLeave Autocommands for "*"
autocommand call s:Autocmd('BufWinLeave', +expand('<abuf>'), bufwinid(+expand('<abuf>')))

Executing BufHidden Autocommands for "*"
autocommand call s:Autocmd('BufHidden', +expand('<abuf>'))

Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing CursorHoldI Autocommands for "*"
autocommand call s:Autocmd('CursorHoldI', +expand('<abuf>'), [line('.'), col('.')])

Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Error detected while processing function coc#pum#_close[2]..<SNR>189_close_pum[2]..coc#float#close[1]..coc#float#close_related:
line   19:
E5555: API call: Invalid window id: 1017
Executing WinClosed Autocommands for "*"
autocommand call s:HandleWinClosed(+expand('<amatch>'))

Executing BufWinLeave Autocommands for "*"
autocommand call s:Autocmd('BufWinLeave', +expand('<abuf>'), bufwinid(+expand('<abuf>')))

Executing BufHidden Autocommands for "*"
autocommand call s:Autocmd('BufHidden', +expand('<abuf>'))

Executing CursorHoldI Autocommands for "*"
autocommand call s:Autocmd('CursorHoldI', +expand('<abuf>'), [line('.'), col('.')])

Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing CursorHoldI Autocommands for "*"
autocommand call s:Autocmd('CursorHoldI', +expand('<abuf>'), [line('.'), col('.')])

Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Error detected while processing function coc#pum#_close[2]..<SNR>189_close_pum[2]..coc#float#close[1]..coc#float#close_related:
line   19:
E5555: API call: Invalid window id: 1019
Executing WinClosed Autocommands for "*"
autocommand call s:HandleWinClosed(+expand('<amatch>'))

Executing BufWinLeave Autocommands for "*"
autocommand call s:Autocmd('BufWinLeave', +expand('<abuf>'), bufwinid(+expand('<abuf>')))

Executing BufHidden Autocommands for "*"
autocommand call s:Autocmd('BufHidden', +expand('<abuf>'))

Executing WinClosed Autocommands for "*"
autocommand call s:HandleWinClosed(+expand('<amatch>'))

Executing BufWinLeave Autocommands for "*"
autocommand call s:Autocmd('BufWinLeave', +expand('<abuf>'), bufwinid(+expand('<abuf>')))

Executing BufHidden Autocommands for "*"
autocommand call s:Autocmd('BufHidden', +expand('<abuf>'))

Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 5: sourcing "/opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax/cpp.vim"
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 16: sourcing "/opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax/c.vim"
finished sourcing /opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax/c.vim
continuing in /opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax/cpp.vim
finished sourcing /opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax/cpp.vim
continuing in coc#compat#execute
Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 5: sourcing "/opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax/cpp.vim"
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 16: sourcing "/opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax/c.vim"
finished sourcing /opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax/c.vim
continuing in /opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax/cpp.vim
finished sourcing /opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax/cpp.vim
continuing in coc#compat#execute
Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing WinClosed Autocommands for "*"
autocommand call s:HandleWinClosed(+expand('<amatch>'))

Executing BufWinLeave Autocommands for "*"
autocommand call s:Autocmd('BufWinLeave', +expand('<abuf>'), bufwinid(+expand('<abuf>')))

Executing BufHidden Autocommands for "*"
autocommand call s:Autocmd('BufHidden', +expand('<abuf>'))

Executing WinClosed Autocommands for "*"
autocommand call s:HandleWinClosed(+expand('<amatch>'))

Executing BufWinLeave Autocommands for "*"
autocommand call s:Autocmd('BufWinLeave', +expand('<abuf>'), bufwinid(+expand('<abuf>')))

Executing BufHidden Autocommands for "*"
autocommand call s:Autocmd('BufHidden', +expand('<abuf>'))

Executing CursorHoldI Autocommands for "*"
autocommand call s:Autocmd('CursorHoldI', +expand('<abuf>'), [line('.'), col('.')])

Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing CursorHoldI Autocommands for "*"
autocommand call s:Autocmd('CursorHoldI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing WinClosed Autocommands for "*"
autocommand call s:HandleWinClosed(+expand('<amatch>'))

Executing BufWinLeave Autocommands for "*"
autocommand call s:Autocmd('BufWinLeave', +expand('<abuf>'), bufwinid(+expand('<abuf>')))

Executing BufHidden Autocommands for "*"
autocommand call s:Autocmd('BufHidden', +expand('<abuf>'))

Executing WinClosed Autocommands for "*"
autocommand call s:HandleWinClosed(+expand('<amatch>'))

Executing BufWinLeave Autocommands for "*"
autocommand call s:Autocmd('BufWinLeave', +expand('<abuf>'), bufwinid(+expand('<abuf>')))

Executing BufHidden Autocommands for "*"
autocommand call s:Autocmd('BufHidden', +expand('<abuf>'))

Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/coc.vim"
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/coc.vim
Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing InsertLeave Autocommands for "*"
autocommand call s:Autocmd('InsertLeave', +expand('<abuf>'))

Executing InsertEnter Autocommands for "*"
autocommand call s:Autocmd('InsertEnter', +expand('<abuf>'))

Executing InsertEnter Autocommands for "*"
autocommand call lexima#insmode#clear_stack()

autocommand call s:setup_insmode()

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing CursorHoldI Autocommands for "*"
autocommand call s:Autocmd('CursorHoldI', +expand('<abuf>'), [line('.'), col('.')])

Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing CursorHoldI Autocommands for "*"
autocommand call s:Autocmd('CursorHoldI', +expand('<abuf>'), [line('.'), col('.')])

Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing WinClosed Autocommands for "*"
autocommand call s:HandleWinClosed(+expand('<amatch>'))

Executing BufWinLeave Autocommands for "*"
autocommand call s:Autocmd('BufWinLeave', +expand('<abuf>'), bufwinid(+expand('<abuf>')))

Executing BufHidden Autocommands for "*"
autocommand call s:Autocmd('BufHidden', +expand('<abuf>'))

Executing CursorHoldI Autocommands for "*"
autocommand call s:Autocmd('CursorHoldI', +expand('<abuf>'), [line('.'), col('.')])

Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing WinClosed Autocommands for "*"
autocommand call s:HandleWinClosed(+expand('<amatch>'))

Executing BufWinLeave Autocommands for "*"
autocommand call s:Autocmd('BufWinLeave', +expand('<abuf>'), bufwinid(+expand('<abuf>')))

Executing BufHidden Autocommands for "*"
autocommand call s:Autocmd('BufHidden', +expand('<abuf>'))

Executing CursorHoldI Autocommands for "*"
autocommand call s:Autocmd('CursorHoldI', +expand('<abuf>'), [line('.'), col('.')])

Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing CursorHoldI Autocommands for "*"
autocommand call s:Autocmd('CursorHoldI', +expand('<abuf>'), [line('.'), col('.')])

Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 5: sourcing "/opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax/cpp.vim"
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 16: sourcing "/opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax/c.vim"
finished sourcing /opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax/c.vim
continuing in /opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax/cpp.vim
finished sourcing /opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax/cpp.vim
continuing in coc#compat#execute
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 5: sourcing "/opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax/cpp.vim"
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 16: sourcing "/opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax/c.vim"
finished sourcing /opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax/c.vim
continuing in /opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax/cpp.vim
finished sourcing /opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax/cpp.vim
continuing in coc#compat#execute
Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing WinClosed Autocommands for "*"
autocommand call s:HandleWinClosed(+expand('<amatch>'))

Executing BufWinLeave Autocommands for "*"
autocommand call s:Autocmd('BufWinLeave', +expand('<abuf>'), bufwinid(+expand('<abuf>')))

Executing BufHidden Autocommands for "*"
autocommand call s:Autocmd('BufHidden', +expand('<abuf>'))

Executing WinClosed Autocommands for "*"
autocommand call s:HandleWinClosed(+expand('<amatch>'))

Executing BufWinLeave Autocommands for "*"
autocommand call s:Autocmd('BufWinLeave', +expand('<abuf>'), bufwinid(+expand('<abuf>')))

Executing BufHidden Autocommands for "*"
autocommand call s:Autocmd('BufHidden', +expand('<abuf>'))

Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing WinClosed Autocommands for "*"
autocommand call s:HandleWinClosed(+expand('<amatch>'))

Executing BufWinLeave Autocommands for "*"
autocommand call s:Autocmd('BufWinLeave', +expand('<abuf>'), bufwinid(+expand('<abuf>')))

Executing BufHidden Autocommands for "*"
autocommand call s:Autocmd('BufHidden', +expand('<abuf>'))

Executing CursorHoldI Autocommands for "*"
autocommand call s:Autocmd('CursorHoldI', +expand('<abuf>'), [line('.'), col('.')])

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 5: sourcing "/opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax/cpp.vim"
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 16: sourcing "/opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax/c.vim"
finished sourcing /opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax/c.vim
continuing in /opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax/cpp.vim
finished sourcing /opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax/cpp.vim
continuing in coc#compat#execute
Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing WinClosed Autocommands for "*"
autocommand call s:HandleWinClosed(+expand('<amatch>'))

Executing BufWinLeave Autocommands for "*"
autocommand call s:Autocmd('BufWinLeave', +expand('<abuf>'), bufwinid(+expand('<abuf>')))

Executing BufHidden Autocommands for "*"
autocommand call s:Autocmd('BufHidden', +expand('<abuf>'))

Executing WinClosed Autocommands for "*"
autocommand call s:HandleWinClosed(+expand('<amatch>'))

Executing BufWinLeave Autocommands for "*"
autocommand call s:Autocmd('BufWinLeave', +expand('<abuf>'), bufwinid(+expand('<abuf>')))

Executing BufHidden Autocommands for "*"
autocommand call s:Autocmd('BufHidden', +expand('<abuf>'))

Executing CursorHoldI Autocommands for "*"
autocommand call s:Autocmd('CursorHoldI', +expand('<abuf>'), [line('.'), col('.')])

Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing CursorHoldI Autocommands for "*"
autocommand call s:Autocmd('CursorHoldI', +expand('<abuf>'), [line('.'), col('.')])

Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Error detected while processing function coc#pum#_close[2]..<SNR>189_close_pum[2]..coc#float#close[1]..coc#float#close_related:
line   19:
E5555: API call: Invalid window id: 1041
Executing WinClosed Autocommands for "*"
autocommand call s:HandleWinClosed(+expand('<amatch>'))

Executing BufWinLeave Autocommands for "*"
autocommand call s:Autocmd('BufWinLeave', +expand('<abuf>'), bufwinid(+expand('<abuf>')))

Executing BufHidden Autocommands for "*"
autocommand call s:Autocmd('BufHidden', +expand('<abuf>'))

Executing WinClosed Autocommands for "*"
autocommand call s:HandleWinClosed(+expand('<amatch>'))

Executing BufWinLeave Autocommands for "*"
autocommand call s:Autocmd('BufWinLeave', +expand('<abuf>'), bufwinid(+expand('<abuf>')))

Executing BufHidden Autocommands for "*"
autocommand call s:Autocmd('BufHidden', +expand('<abuf>'))

Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing CursorHoldI Autocommands for "*"
autocommand call s:Autocmd('CursorHoldI', +expand('<abuf>'), [line('.'), col('.')])

Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing CursorHoldI Autocommands for "*"
autocommand call s:Autocmd('CursorHoldI', +expand('<abuf>'), [line('.'), col('.')])

Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing WinClosed Autocommands for "*"
autocommand call s:HandleWinClosed(+expand('<amatch>'))

Executing BufWinLeave Autocommands for "*"
autocommand call s:Autocmd('BufWinLeave', +expand('<abuf>'), bufwinid(+expand('<abuf>')))

Executing BufHidden Autocommands for "*"
autocommand call s:Autocmd('BufHidden', +expand('<abuf>'))

Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing WinClosed Autocommands for "*"
autocommand call s:HandleWinClosed(+expand('<amatch>'))

Executing BufWinLeave Autocommands for "*"
autocommand call s:Autocmd('BufWinLeave', +expand('<abuf>'), bufwinid(+expand('<abuf>')))

Executing BufHidden Autocommands for "*"
autocommand call s:Autocmd('BufHidden', +expand('<abuf>'))

Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing CursorHoldI Autocommands for "*"
autocommand call s:Autocmd('CursorHoldI', +expand('<abuf>'), [line('.'), col('.')])

Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing WinClosed Autocommands for "*"
autocommand call s:HandleWinClosed(+expand('<amatch>'))

Executing BufWinLeave Autocommands for "*"
autocommand call s:Autocmd('BufWinLeave', +expand('<abuf>'), bufwinid(+expand('<abuf>')))

Executing BufHidden Autocommands for "*"
autocommand call s:Autocmd('BufHidden', +expand('<abuf>'))

Executing CursorHoldI Autocommands for "*"
autocommand call s:Autocmd('CursorHoldI', +expand('<abuf>'), [line('.'), col('.')])

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing InsertLeave Autocommands for "*"
autocommand call s:Autocmd('InsertLeave', +expand('<abuf>'))

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()


Executing BufWritePre Autocommands for "*"
autocommand call s:SyncAutocmd('BufWritePre', +expand('<abuf>'), bufname(+expand('<abuf>')), getbufvar(+expand('<abuf>'), 'changedtick'))

"index.cpp" 
"index.cpp" 16L, 346B written
Executing BufWritePost Autocommands for "*"
autocommand call s:Autocmd('BufWritePost', +expand('<abuf>'), getbufvar(+expand('<abuf>'), 'changedtick'))

Executing BufWritePost Autocommands for "*"
autocommand call s:reset_untracked_cache(0)

Executing BufWritePost Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing BufWritePost Autocommands for "*"
autocommand call s:mru_append(expand('<amatch>'))

autocommand call s:mrw_append(expand('<amatch>'))

"index.cpp" 16L, 346B written
Executing CursorHold Autocommands for "*"
autocommand silent call CocActionAsync('highlight')

autocommand silent call CocActionAsync('highlight')

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing InsertEnter Autocommands for "*"
autocommand call s:Autocmd('InsertEnter', +expand('<abuf>'))

Executing InsertEnter Autocommands for "*"
autocommand call lexima#insmode#clear_stack()

autocommand call s:setup_insmode()

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing CursorHoldI Autocommands for "*"
autocommand call s:Autocmd('CursorHoldI', +expand('<abuf>'), [line('.'), col('.')])

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing InsertLeave Autocommands for "*"
autocommand call s:Autocmd('InsertLeave', +expand('<abuf>'))

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChanged Autocommands for "*"
autocommand call s:Autocmd('TextChanged', +expand('<abuf>'), getbufvar(+expand('<abuf>'), 'changedtick'))

Executing TextChanged Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing CursorHold Autocommands for "*"
autocommand silent call CocActionAsync('highlight')

autocommand silent call CocActionAsync('highlight')

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing InsertEnter Autocommands for "*"
autocommand call s:Autocmd('InsertEnter', +expand('<abuf>'))

Executing InsertEnter Autocommands for "*"
autocommand call lexima#insmode#clear_stack()

autocommand call s:setup_insmode()

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing CursorHoldI Autocommands for "*"
autocommand call s:Autocmd('CursorHoldI', +expand('<abuf>'), [line('.'), col('.')])

Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing WinClosed Autocommands for "*"
autocommand call s:HandleWinClosed(+expand('<amatch>'))

Executing BufWinLeave Autocommands for "*"
autocommand call s:Autocmd('BufWinLeave', +expand('<abuf>'), bufwinid(+expand('<abuf>')))

Executing BufHidden Autocommands for "*"
autocommand call s:Autocmd('BufHidden', +expand('<abuf>'))

Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Error detected while processing function coc#pum#_close[2]..<SNR>189_close_pum[2]..coc#float#close[1]..coc#float#close_related:
line   19:
E5555: API call: Invalid window id: 1051
Executing WinClosed Autocommands for "*"
autocommand call s:HandleWinClosed(+expand('<amatch>'))

Executing BufWinLeave Autocommands for "*"
autocommand call s:Autocmd('BufWinLeave', +expand('<abuf>'), bufwinid(+expand('<abuf>')))

Executing BufHidden Autocommands for "*"
autocommand call s:Autocmd('BufHidden', +expand('<abuf>'))

Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing CursorHoldI Autocommands for "*"
autocommand call s:Autocmd('CursorHoldI', +expand('<abuf>'), [line('.'), col('.')])

Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing CursorHoldI Autocommands for "*"
autocommand call s:Autocmd('CursorHoldI', +expand('<abuf>'), [line('.'), col('.')])

Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing WinClosed Autocommands for "*"
autocommand call s:HandleWinClosed(+expand('<amatch>'))

Executing BufWinLeave Autocommands for "*"
autocommand call s:Autocmd('BufWinLeave', +expand('<abuf>'), bufwinid(+expand('<abuf>')))

Executing BufHidden Autocommands for "*"
autocommand call s:Autocmd('BufHidden', +expand('<abuf>'))

Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 5: sourcing "/opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax/cpp.vim"
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 16: sourcing "/opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax/c.vim"
finished sourcing /opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax/c.vim
continuing in /opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax/cpp.vim
finished sourcing /opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax/cpp.vim
continuing in coc#compat#execute
Executing CursorHoldI Autocommands for "*"
autocommand call s:Autocmd('CursorHoldI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing WinClosed Autocommands for "*"
autocommand call s:HandleWinClosed(+expand('<amatch>'))

Executing BufWinLeave Autocommands for "*"
autocommand call s:Autocmd('BufWinLeave', +expand('<abuf>'), bufwinid(+expand('<abuf>')))

Executing BufHidden Autocommands for "*"
autocommand call s:Autocmd('BufHidden', +expand('<abuf>'))

Executing WinClosed Autocommands for "*"
autocommand call s:HandleWinClosed(+expand('<amatch>'))

Executing BufWinLeave Autocommands for "*"
autocommand call s:Autocmd('BufWinLeave', +expand('<abuf>'), bufwinid(+expand('<abuf>')))

Executing BufHidden Autocommands for "*"
autocommand call s:Autocmd('BufHidden', +expand('<abuf>'))

Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing InsertLeave Autocommands for "*"
autocommand call s:Autocmd('InsertLeave', +expand('<abuf>'))

Executing InsertEnter Autocommands for "*"
autocommand call s:Autocmd('InsertEnter', +expand('<abuf>'))

Executing InsertEnter Autocommands for "*"
autocommand call lexima#insmode#clear_stack()

autocommand call s:setup_insmode()

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing InsertLeave Autocommands for "*"
autocommand call s:Autocmd('InsertLeave', +expand('<abuf>'))

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChanged Autocommands for "*"
autocommand call s:Autocmd('TextChanged', +expand('<abuf>'), getbufvar(+expand('<abuf>'), 'changedtick'))

Executing TextChanged Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing CursorHold Autocommands for "*"
autocommand silent call CocActionAsync('highlight')

autocommand silent call CocActionAsync('highlight')

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorHold Autocommands for "*"
autocommand silent call CocActionAsync('highlight')

autocommand silent call CocActionAsync('highlight')

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorHold Autocommands for "*"
autocommand silent call CocActionAsync('highlight')

autocommand silent call CocActionAsync('highlight')

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

3 lines yanked
Executing command: "'/usr/bin/pbcopy'"


Executing TextYankPost Autocommands for "*"
autocommand call highlightedyank#debounce()

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 0: sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/highlightedyank.vim"
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/highlightedyank.vim
continuing in TextYankPost Autocommands for "*"
Executing TextYankPost Autocommands for "*"
autocommand call coc#rpc#notify('doAutocmd', [2, v:event, +expand('<abuf>'), win_getid()])

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/highlightedyank)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 21: sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/highlightedyank/highlight.vim"
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/vital)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 1: sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/vital/highlightedyank.vim"
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/vital/highlightedyank.vim
continuing in /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/highlightedyank/highlight.vim
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/vital/_highlightedyank)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 3: sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/vital/_highlightedyank/Schedule.vim"
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/vital/_highlightedyank/Schedule.vim
continuing in <SNR>194__get_module
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/vital)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 1: sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/vital/_highlightedyank.vim"
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/vital/_highlightedyank.vim
continuing in vital#_highlightedyank#Schedule#import
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/highlightedyank/highlight.vim
continuing in <SNR>192_highlight
Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing command: "'/usr/bin/pbpaste'"


Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChanged Autocommands for "*"
autocommand call s:Autocmd('TextChanged', +expand('<abuf>'), getbufvar(+expand('<abuf>'), 'changedtick'))

Executing TextChanged Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing CursorHold Autocommands for "*"
autocommand silent call CocActionAsync('highlight')

autocommand silent call CocActionAsync('highlight')

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing command: "'/usr/bin/pbpaste'"


Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChanged Autocommands for "*"
autocommand call s:Autocmd('TextChanged', +expand('<abuf>'), getbufvar(+expand('<abuf>'), 'changedtick'))

Executing TextChanged Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorHold Autocommands for "*"
autocommand silent call CocActionAsync('highlight')

autocommand silent call CocActionAsync('highlight')

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing command: "'/usr/bin/pbpaste'"


Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChanged Autocommands for "*"
autocommand call s:Autocmd('TextChanged', +expand('<abuf>'), getbufvar(+expand('<abuf>'), 'changedtick'))

Executing TextChanged Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorHold Autocommands for "*"
autocommand silent call CocActionAsync('highlight')

autocommand silent call CocActionAsync('highlight')

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorHold Autocommands for "*"
autocommand silent call CocActionAsync('highlight')

autocommand silent call CocActionAsync('highlight')

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorHold Autocommands for "*"
autocommand silent call CocActionAsync('highlight')

autocommand silent call CocActionAsync('highlight')

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChanged Autocommands for "*"
autocommand call s:Autocmd('TextChanged', +expand('<abuf>'), getbufvar(+expand('<abuf>'), 'changedtick'))

Executing TextChanged Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorHold Autocommands for "*"
autocommand silent call CocActionAsync('highlight')

autocommand silent call CocActionAsync('highlight')

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChanged Autocommands for "*"
autocommand call s:Autocmd('TextChanged', +expand('<abuf>'), getbufvar(+expand('<abuf>'), 'changedtick'))

Executing TextChanged Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChanged Autocommands for "*"
autocommand call s:Autocmd('TextChanged', +expand('<abuf>'), getbufvar(+expand('<abuf>'), 'changedtick'))

Executing TextChanged Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing CursorHold Autocommands for "*"
autocommand silent call CocActionAsync('highlight')

autocommand silent call CocActionAsync('highlight')

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorHold Autocommands for "*"
autocommand silent call CocActionAsync('highlight')

autocommand silent call CocActionAsync('highlight')

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorHold Autocommands for "*"
autocommand silent call CocActionAsync('highlight')

autocommand silent call CocActionAsync('highlight')

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing InsertEnter Autocommands for "*"
autocommand call s:Autocmd('InsertEnter', +expand('<abuf>'))

Executing InsertEnter Autocommands for "*"
autocommand call lexima#insmode#clear_stack()

autocommand call s:setup_insmode()

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing CursorHoldI Autocommands for "*"
autocommand call s:Autocmd('CursorHoldI', +expand('<abuf>'), [line('.'), col('.')])

Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing WinClosed Autocommands for "*"
autocommand call s:HandleWinClosed(+expand('<amatch>'))

Executing BufWinLeave Autocommands for "*"
autocommand call s:Autocmd('BufWinLeave', +expand('<abuf>'), bufwinid(+expand('<abuf>')))

Executing BufHidden Autocommands for "*"
autocommand call s:Autocmd('BufHidden', +expand('<abuf>'))

Executing WinClosed Autocommands for "*"
autocommand call s:HandleWinClosed(+expand('<amatch>'))

Executing BufWinLeave Autocommands for "*"
autocommand call s:Autocmd('BufWinLeave', +expand('<abuf>'), bufwinid(+expand('<abuf>')))

Executing BufHidden Autocommands for "*"
autocommand call s:Autocmd('BufHidden', +expand('<abuf>'))

Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Error detected while processing function coc#pum#_close[2]..<SNR>189_close_pum[2]..coc#float#close[1]..coc#float#close_related:
line   19:
E5555: API call: Invalid window id: 1064
Executing WinClosed Autocommands for "*"
autocommand call s:HandleWinClosed(+expand('<amatch>'))

Executing BufWinLeave Autocommands for "*"
autocommand call s:Autocmd('BufWinLeave', +expand('<abuf>'), bufwinid(+expand('<abuf>')))

Executing BufHidden Autocommands for "*"
autocommand call s:Autocmd('BufHidden', +expand('<abuf>'))

Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing CursorHoldI Autocommands for "*"
autocommand call s:Autocmd('CursorHoldI', +expand('<abuf>'), [line('.'), col('.')])

Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 5: sourcing "/opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax/cpp.vim"
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 16: sourcing "/opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax/c.vim"
finished sourcing /opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax/c.vim
continuing in /opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax/cpp.vim
finished sourcing /opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax/cpp.vim
continuing in coc#compat#execute
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 5: sourcing "/opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax/cpp.vim"
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 16: sourcing "/opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax/c.vim"
finished sourcing /opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax/c.vim
continuing in /opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax/cpp.vim
finished sourcing /opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax/cpp.vim
continuing in coc#compat#execute
Executing CursorHoldI Autocommands for "*"
autocommand call s:Autocmd('CursorHoldI', +expand('<abuf>'), [line('.'), col('.')])

Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing WinClosed Autocommands for "*"
autocommand call s:HandleWinClosed(+expand('<amatch>'))

Executing BufWinLeave Autocommands for "*"
autocommand call s:Autocmd('BufWinLeave', +expand('<abuf>'), bufwinid(+expand('<abuf>')))

Executing BufHidden Autocommands for "*"
autocommand call s:Autocmd('BufHidden', +expand('<abuf>'))

Executing WinClosed Autocommands for "*"
autocommand call s:HandleWinClosed(+expand('<amatch>'))

Executing BufWinLeave Autocommands for "*"
autocommand call s:Autocmd('BufWinLeave', +expand('<abuf>'), bufwinid(+expand('<abuf>')))

Executing BufHidden Autocommands for "*"
autocommand call s:Autocmd('BufHidden', +expand('<abuf>'))

Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing CursorHoldI Autocommands for "*"
autocommand call s:Autocmd('CursorHoldI', +expand('<abuf>'), [line('.'), col('.')])

Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing CursorHoldI Autocommands for "*"
autocommand call s:Autocmd('CursorHoldI', +expand('<abuf>'), [line('.'), col('.')])

Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing CursorHoldI Autocommands for "*"
autocommand call s:Autocmd('CursorHoldI', +expand('<abuf>'), [line('.'), col('.')])

Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing CursorHoldI Autocommands for "*"
autocommand call s:Autocmd('CursorHoldI', +expand('<abuf>'), [line('.'), col('.')])

Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing CursorHoldI Autocommands for "*"
autocommand call s:Autocmd('CursorHoldI', +expand('<abuf>'), [line('.'), col('.')])

Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing WinClosed Autocommands for "*"
autocommand call s:HandleWinClosed(+expand('<amatch>'))

Executing BufWinLeave Autocommands for "*"
autocommand call s:Autocmd('BufWinLeave', +expand('<abuf>'), bufwinid(+expand('<abuf>')))

Executing BufHidden Autocommands for "*"
autocommand call s:Autocmd('BufHidden', +expand('<abuf>'))

Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing CursorHoldI Autocommands for "*"
autocommand call s:Autocmd('CursorHoldI', +expand('<abuf>'), [line('.'), col('.')])

Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Error detected while processing function coc#pum#_close[2]..<SNR>189_close_pum[2]..coc#float#close[1]..coc#float#close_related:
line   19:
E5555: API call: Invalid window id: 1071
Executing WinClosed Autocommands for "*"
autocommand call s:HandleWinClosed(+expand('<amatch>'))

Executing BufWinLeave Autocommands for "*"
autocommand call s:Autocmd('BufWinLeave', +expand('<abuf>'), bufwinid(+expand('<abuf>')))

Executing BufHidden Autocommands for "*"
autocommand call s:Autocmd('BufHidden', +expand('<abuf>'))

Executing CursorHoldI Autocommands for "*"
autocommand call s:Autocmd('CursorHoldI', +expand('<abuf>'), [line('.'), col('.')])

Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Error detected while processing function coc#pum#_close[2]..<SNR>189_close_pum[2]..coc#float#close[1]..coc#float#close_related:
line   19:
E5555: API call: Invalid window id: 1073
Executing WinClosed Autocommands for "*"
autocommand call s:HandleWinClosed(+expand('<amatch>'))

Executing BufWinLeave Autocommands for "*"
autocommand call s:Autocmd('BufWinLeave', +expand('<abuf>'), bufwinid(+expand('<abuf>')))

Executing BufHidden Autocommands for "*"
autocommand call s:Autocmd('BufHidden', +expand('<abuf>'))

Executing CursorHoldI Autocommands for "*"
autocommand call s:Autocmd('CursorHoldI', +expand('<abuf>'), [line('.'), col('.')])

Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 5: sourcing "/opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax/cpp.vim"
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 16: sourcing "/opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax/c.vim"
finished sourcing /opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax/c.vim
continuing in /opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax/cpp.vim
finished sourcing /opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax/cpp.vim
continuing in coc#compat#execute
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 5: sourcing "/opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax/cpp.vim"
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 16: sourcing "/opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax/c.vim"
finished sourcing /opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax/c.vim
continuing in /opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax/cpp.vim
finished sourcing /opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax/cpp.vim
continuing in coc#compat#execute
Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 5: sourcing "/opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax/cpp.vim"
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 16: sourcing "/opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax/c.vim"
finished sourcing /opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax/c.vim
continuing in /opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax/cpp.vim
finished sourcing /opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax/cpp.vim
continuing in coc#compat#execute
Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 5: sourcing "/opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax/cpp.vim"
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 16: sourcing "/opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax/c.vim"
finished sourcing /opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax/c.vim
continuing in /opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax/cpp.vim
finished sourcing /opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax/cpp.vim
continuing in coc#compat#execute
Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 5: sourcing "/opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax/cpp.vim"
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 16: sourcing "/opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax/c.vim"
finished sourcing /opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax/c.vim
continuing in /opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax/cpp.vim
finished sourcing /opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax/cpp.vim
continuing in coc#compat#execute
Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing WinClosed Autocommands for "*"
autocommand call s:HandleWinClosed(+expand('<amatch>'))

Executing BufWinLeave Autocommands for "*"
autocommand call s:Autocmd('BufWinLeave', +expand('<abuf>'), bufwinid(+expand('<abuf>')))

Executing BufHidden Autocommands for "*"
autocommand call s:Autocmd('BufHidden', +expand('<abuf>'))

Executing WinClosed Autocommands for "*"
autocommand call s:HandleWinClosed(+expand('<amatch>'))

Executing BufWinLeave Autocommands for "*"
autocommand call s:Autocmd('BufWinLeave', +expand('<abuf>'), bufwinid(+expand('<abuf>')))

Executing BufHidden Autocommands for "*"
autocommand call s:Autocmd('BufHidden', +expand('<abuf>'))

Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing CursorHoldI Autocommands for "*"
autocommand call s:Autocmd('CursorHoldI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing CursorHoldI Autocommands for "*"
autocommand call s:Autocmd('CursorHoldI', +expand('<abuf>'), [line('.'), col('.')])

Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorHold Autocommands for "*"
autocommand silent call CocActionAsync('highlight')

autocommand silent call CocActionAsync('highlight')

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()


Executing BufWritePre Autocommands for "*"
autocommand call s:SyncAutocmd('BufWritePre', +expand('<abuf>'), bufname(+expand('<abuf>')), getbufvar(+expand('<abuf>'), 'changedtick'))

"index.cpp" 
"index.cpp" 29L, 451B written
Executing BufWritePost Autocommands for "*"
autocommand call s:Autocmd('BufWritePost', +expand('<abuf>'), getbufvar(+expand('<abuf>'), 'changedtick'))

Executing BufWritePost Autocommands for "*"
autocommand call s:reset_untracked_cache(0)

Executing BufWritePost Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing BufWritePost Autocommands for "*"
autocommand call s:mru_append(expand('<amatch>'))

autocommand call s:mrw_append(expand('<amatch>'))

"index.cpp" 29L, 451B written
Executing CursorHold Autocommands for "*"
autocommand silent call CocActionAsync('highlight')

autocommand silent call CocActionAsync('highlight')

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorHold Autocommands for "*"
autocommand silent call CocActionAsync('highlight')

autocommand silent call CocActionAsync('highlight')

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing InsertEnter Autocommands for "*"
autocommand call s:Autocmd('InsertEnter', +expand('<abuf>'))

Executing InsertEnter Autocommands for "*"
autocommand call lexima#insmode#clear_stack()

autocommand call s:setup_insmode()

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing CursorHoldI Autocommands for "*"
autocommand call s:Autocmd('CursorHoldI', +expand('<abuf>'), [line('.'), col('.')])

Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing CursorHoldI Autocommands for "*"
autocommand call s:Autocmd('CursorHoldI', +expand('<abuf>'), [line('.'), col('.')])

Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing WinClosed Autocommands for "*"
autocommand call s:HandleWinClosed(+expand('<amatch>'))

Executing BufWinLeave Autocommands for "*"
autocommand call s:Autocmd('BufWinLeave', +expand('<abuf>'), bufwinid(+expand('<abuf>')))

Executing BufHidden Autocommands for "*"
autocommand call s:Autocmd('BufHidden', +expand('<abuf>'))

Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing WinClosed Autocommands for "*"
autocommand call s:HandleWinClosed(+expand('<amatch>'))

Executing BufWinLeave Autocommands for "*"
autocommand call s:Autocmd('BufWinLeave', +expand('<abuf>'), bufwinid(+expand('<abuf>')))

Executing BufHidden Autocommands for "*"
autocommand call s:Autocmd('BufHidden', +expand('<abuf>'))

Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing CursorHoldI Autocommands for "*"
autocommand call s:Autocmd('CursorHoldI', +expand('<abuf>'), [line('.'), col('.')])

Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing WinClosed Autocommands for "*"
autocommand call s:HandleWinClosed(+expand('<amatch>'))

Executing BufWinLeave Autocommands for "*"
autocommand call s:Autocmd('BufWinLeave', +expand('<abuf>'), bufwinid(+expand('<abuf>')))

Executing BufHidden Autocommands for "*"
autocommand call s:Autocmd('BufHidden', +expand('<abuf>'))

Executing CursorHoldI Autocommands for "*"
autocommand call s:Autocmd('CursorHoldI', +expand('<abuf>'), [line('.'), col('.')])

Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing CursorHoldI Autocommands for "*"
autocommand call s:Autocmd('CursorHoldI', +expand('<abuf>'), [line('.'), col('.')])

Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing CursorHoldI Autocommands for "*"
autocommand call s:Autocmd('CursorHoldI', +expand('<abuf>'), [line('.'), col('.')])

Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing WinClosed Autocommands for "*"
autocommand call s:HandleWinClosed(+expand('<amatch>'))

Executing BufWinLeave Autocommands for "*"
autocommand call s:Autocmd('BufWinLeave', +expand('<abuf>'), bufwinid(+expand('<abuf>')))

Executing BufHidden Autocommands for "*"
autocommand call s:Autocmd('BufHidden', +expand('<abuf>'))

Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing CursorHoldI Autocommands for "*"
autocommand call s:Autocmd('CursorHoldI', +expand('<abuf>'), [line('.'), col('.')])

Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing CursorHoldI Autocommands for "*"
autocommand call s:Autocmd('CursorHoldI', +expand('<abuf>'), [line('.'), col('.')])

Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing WinClosed Autocommands for "*"
autocommand call s:HandleWinClosed(+expand('<amatch>'))

Executing BufWinLeave Autocommands for "*"
autocommand call s:Autocmd('BufWinLeave', +expand('<abuf>'), bufwinid(+expand('<abuf>')))

Executing BufHidden Autocommands for "*"
autocommand call s:Autocmd('BufHidden', +expand('<abuf>'))

Executing CursorHoldI Autocommands for "*"
autocommand call s:Autocmd('CursorHoldI', +expand('<abuf>'), [line('.'), col('.')])

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing InsertLeave Autocommands for "*"
autocommand call s:Autocmd('InsertLeave', +expand('<abuf>'))

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorHold Autocommands for "*"
autocommand silent call CocActionAsync('highlight')

autocommand silent call CocActionAsync('highlight')

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorHold Autocommands for "*"
autocommand silent call CocActionAsync('highlight')

autocommand silent call CocActionAsync('highlight')

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing InsertEnter Autocommands for "*"
autocommand call s:Autocmd('InsertEnter', +expand('<abuf>'))

Executing InsertEnter Autocommands for "*"
autocommand call lexima#insmode#clear_stack()

autocommand call s:setup_insmode()

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing CursorHoldI Autocommands for "*"
autocommand call s:Autocmd('CursorHoldI', +expand('<abuf>'), [line('.'), col('.')])

Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing InsertLeave Autocommands for "*"
autocommand call s:Autocmd('InsertLeave', +expand('<abuf>'))

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorHold Autocommands for "*"
autocommand silent call CocActionAsync('highlight')

autocommand silent call CocActionAsync('highlight')

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing InsertEnter Autocommands for "*"
autocommand call s:Autocmd('InsertEnter', +expand('<abuf>'))

Executing InsertEnter Autocommands for "*"
autocommand call lexima#insmode#clear_stack()

autocommand call s:setup_insmode()

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing CursorHoldI Autocommands for "*"
autocommand call s:Autocmd('CursorHoldI', +expand('<abuf>'), [line('.'), col('.')])

Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 5: sourcing "/opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax/cpp.vim"
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 16: sourcing "/opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax/c.vim"
finished sourcing /opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax/c.vim
continuing in /opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax/cpp.vim
finished sourcing /opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax/cpp.vim
continuing in coc#compat#execute
Executing CursorHoldI Autocommands for "*"
autocommand call s:Autocmd('CursorHoldI', +expand('<abuf>'), [line('.'), col('.')])

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing InsertLeave Autocommands for "*"
autocommand call s:Autocmd('InsertLeave', +expand('<abuf>'))

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing WinClosed Autocommands for "*"
autocommand call s:HandleWinClosed(+expand('<amatch>'))

Executing BufWinLeave Autocommands for "*"
autocommand call s:Autocmd('BufWinLeave', +expand('<abuf>'), bufwinid(+expand('<abuf>')))

Executing BufHidden Autocommands for "*"
autocommand call s:Autocmd('BufHidden', +expand('<abuf>'))

Executing WinClosed Autocommands for "*"
autocommand call s:HandleWinClosed(+expand('<amatch>'))

Executing BufWinLeave Autocommands for "*"
autocommand call s:Autocmd('BufWinLeave', +expand('<abuf>'), bufwinid(+expand('<abuf>')))

Executing BufHidden Autocommands for "*"
autocommand call s:Autocmd('BufHidden', +expand('<abuf>'))

Executing CursorHold Autocommands for "*"
autocommand silent call CocActionAsync('highlight')

autocommand silent call CocActionAsync('highlight')

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing InsertEnter Autocommands for "*"
autocommand call s:Autocmd('InsertEnter', +expand('<abuf>'))

Executing InsertEnter Autocommands for "*"
autocommand call lexima#insmode#clear_stack()

autocommand call s:setup_insmode()

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing CursorHoldI Autocommands for "*"
autocommand call s:Autocmd('CursorHoldI', +expand('<abuf>'), [line('.'), col('.')])

Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 5: sourcing "/opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax/cpp.vim"
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 16: sourcing "/opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax/c.vim"
finished sourcing /opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax/c.vim
continuing in /opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax/cpp.vim
finished sourcing /opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax/cpp.vim
continuing in coc#compat#execute
Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing WinClosed Autocommands for "*"
autocommand call s:HandleWinClosed(+expand('<amatch>'))

Executing BufWinLeave Autocommands for "*"
autocommand call s:Autocmd('BufWinLeave', +expand('<abuf>'), bufwinid(+expand('<abuf>')))

Executing BufHidden Autocommands for "*"
autocommand call s:Autocmd('BufHidden', +expand('<abuf>'))

Executing WinClosed Autocommands for "*"
autocommand call s:HandleWinClosed(+expand('<amatch>'))

Executing BufWinLeave Autocommands for "*"
autocommand call s:Autocmd('BufWinLeave', +expand('<abuf>'), bufwinid(+expand('<abuf>')))

Executing BufHidden Autocommands for "*"
autocommand call s:Autocmd('BufHidden', +expand('<abuf>'))

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing InsertLeave Autocommands for "*"
autocommand call s:Autocmd('InsertLeave', +expand('<abuf>'))

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()


Executing BufWritePre Autocommands for "*"
autocommand call s:SyncAutocmd('BufWritePre', +expand('<abuf>'), bufname(+expand('<abuf>')), getbufvar(+expand('<abuf>'), 'changedtick'))

"index.cpp" 
"index.cpp" 29L, 470B written
Executing BufWritePost Autocommands for "*"
autocommand call s:Autocmd('BufWritePost', +expand('<abuf>'), getbufvar(+expand('<abuf>'), 'changedtick'))

Executing BufWritePost Autocommands for "*"
autocommand call s:reset_untracked_cache(0)

Executing BufWritePost Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing BufWritePost Autocommands for "*"
autocommand call s:mru_append(expand('<amatch>'))

autocommand call s:mrw_append(expand('<amatch>'))

"index.cpp" 29L, 470B written
Executing CursorHold Autocommands for "*"
autocommand silent call CocActionAsync('highlight')

autocommand silent call CocActionAsync('highlight')

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing InsertEnter Autocommands for "*"
autocommand call s:Autocmd('InsertEnter', +expand('<abuf>'))

Executing InsertEnter Autocommands for "*"
autocommand call lexima#insmode#clear_stack()

autocommand call s:setup_insmode()

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorHoldI Autocommands for "*"
autocommand call s:Autocmd('CursorHoldI', +expand('<abuf>'), [line('.'), col('.')])

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing InsertLeave Autocommands for "*"
autocommand call s:Autocmd('InsertLeave', +expand('<abuf>'))

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/coc)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 1: sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/coc/prompt.vim"
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/coc/prompt.vim
continuing in coc#dialog#create_cursor_float
Executing CursorHold Autocommands for "*"
autocommand silent call CocActionAsync('highlight')

autocommand silent call CocActionAsync('highlight')

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing WinClosed Autocommands for "*"
autocommand call s:HandleWinClosed(+expand('<amatch>'))

Executing BufWinLeave Autocommands for "*"
autocommand call s:Autocmd('BufWinLeave', +expand('<abuf>'), bufwinid(+expand('<abuf>')))

Executing BufHidden Autocommands for "*"
autocommand call s:Autocmd('BufHidden', +expand('<abuf>'))

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorHold Autocommands for "*"
autocommand silent call CocActionAsync('highlight')

autocommand silent call CocActionAsync('highlight')

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorHold Autocommands for "*"
autocommand silent call CocActionAsync('highlight')

autocommand silent call CocActionAsync('highlight')

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorHold Autocommands for "*"
autocommand silent call CocActionAsync('highlight')

autocommand silent call CocActionAsync('highlight')

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorHold Autocommands for "*"
autocommand silent call CocActionAsync('highlight')

autocommand silent call CocActionAsync('highlight')

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing InsertEnter Autocommands for "*"
autocommand call s:Autocmd('InsertEnter', +expand('<abuf>'))

Executing InsertEnter Autocommands for "*"
autocommand call lexima#insmode#clear_stack()

autocommand call s:setup_insmode()

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing CursorHoldI Autocommands for "*"
autocommand call s:Autocmd('CursorHoldI', +expand('<abuf>'), [line('.'), col('.')])

Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing WinClosed Autocommands for "*"
autocommand call s:HandleWinClosed(+expand('<amatch>'))

Executing BufWinLeave Autocommands for "*"
autocommand call s:Autocmd('BufWinLeave', +expand('<abuf>'), bufwinid(+expand('<abuf>')))

Executing BufHidden Autocommands for "*"
autocommand call s:Autocmd('BufHidden', +expand('<abuf>'))

Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing WinClosed Autocommands for "*"
autocommand call s:HandleWinClosed(+expand('<amatch>'))

Executing BufWinLeave Autocommands for "*"
autocommand call s:Autocmd('BufWinLeave', +expand('<abuf>'), bufwinid(+expand('<abuf>')))

Executing BufHidden Autocommands for "*"
autocommand call s:Autocmd('BufHidden', +expand('<abuf>'))

Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing CursorHoldI Autocommands for "*"
autocommand call s:Autocmd('CursorHoldI', +expand('<abuf>'), [line('.'), col('.')])

Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing CursorHoldI Autocommands for "*"
autocommand call s:Autocmd('CursorHoldI', +expand('<abuf>'), [line('.'), col('.')])

Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 5: sourcing "/opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax/cpp.vim"
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 16: sourcing "/opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax/c.vim"
finished sourcing /opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax/c.vim
continuing in /opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax/cpp.vim
finished sourcing /opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax/cpp.vim
continuing in coc#compat#execute
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 5: sourcing "/opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax/cpp.vim"
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 16: sourcing "/opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax/c.vim"
finished sourcing /opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax/c.vim
continuing in /opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax/cpp.vim
finished sourcing /opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax/cpp.vim
continuing in coc#compat#execute
Executing CursorHoldI Autocommands for "*"
autocommand call s:Autocmd('CursorHoldI', +expand('<abuf>'), [line('.'), col('.')])

Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing WinClosed Autocommands for "*"
autocommand call s:HandleWinClosed(+expand('<amatch>'))

Executing BufWinLeave Autocommands for "*"
autocommand call s:Autocmd('BufWinLeave', +expand('<abuf>'), bufwinid(+expand('<abuf>')))

Executing BufHidden Autocommands for "*"
autocommand call s:Autocmd('BufHidden', +expand('<abuf>'))

Executing WinClosed Autocommands for "*"
autocommand call s:HandleWinClosed(+expand('<amatch>'))

Executing BufWinLeave Autocommands for "*"
autocommand call s:Autocmd('BufWinLeave', +expand('<abuf>'), bufwinid(+expand('<abuf>')))

Executing BufHidden Autocommands for "*"
autocommand call s:Autocmd('BufHidden', +expand('<abuf>'))

Executing CursorHoldI Autocommands for "*"
autocommand call s:Autocmd('CursorHoldI', +expand('<abuf>'), [line('.'), col('.')])

Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing CursorHoldI Autocommands for "*"
autocommand call s:Autocmd('CursorHoldI', +expand('<abuf>'), [line('.'), col('.')])

Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing WinClosed Autocommands for "*"
autocommand call s:HandleWinClosed(+expand('<amatch>'))

Executing BufWinLeave Autocommands for "*"
autocommand call s:Autocmd('BufWinLeave', +expand('<abuf>'), bufwinid(+expand('<abuf>')))

Executing BufHidden Autocommands for "*"
autocommand call s:Autocmd('BufHidden', +expand('<abuf>'))

Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing CursorHoldI Autocommands for "*"
autocommand call s:Autocmd('CursorHoldI', +expand('<abuf>'), [line('.'), col('.')])

Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing CursorHoldI Autocommands for "*"
autocommand call s:Autocmd('CursorHoldI', +expand('<abuf>'), [line('.'), col('.')])

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing InsertLeave Autocommands for "*"
autocommand call s:Autocmd('InsertLeave', +expand('<abuf>'))

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorHold Autocommands for "*"
autocommand silent call CocActionAsync('highlight')

autocommand silent call CocActionAsync('highlight')

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing command: "'/usr/bin/pbcopy'"


Executing TextYankPost Autocommands for "*"
autocommand call highlightedyank#debounce()

Executing TextYankPost Autocommands for "*"
autocommand call coc#rpc#notify('doAutocmd', [2, v:event, +expand('<abuf>'), win_getid()])

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorHold Autocommands for "*"
autocommand silent call CocActionAsync('highlight')

autocommand silent call CocActionAsync('highlight')

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing command: "'/usr/bin/pbpaste'"


Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChanged Autocommands for "*"
autocommand call s:Autocmd('TextChanged', +expand('<abuf>'), getbufvar(+expand('<abuf>'), 'changedtick'))

Executing TextChanged Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing command: "'/usr/bin/pbpaste'"


Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChanged Autocommands for "*"
autocommand call s:Autocmd('TextChanged', +expand('<abuf>'), getbufvar(+expand('<abuf>'), 'changedtick'))

Executing TextChanged Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorHold Autocommands for "*"
autocommand silent call CocActionAsync('highlight')

autocommand silent call CocActionAsync('highlight')

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing InsertEnter Autocommands for "*"
autocommand call s:Autocmd('InsertEnter', +expand('<abuf>'))

Executing InsertEnter Autocommands for "*"
autocommand call lexima#insmode#clear_stack()

autocommand call s:setup_insmode()

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing InsertLeave Autocommands for "*"
autocommand call s:Autocmd('InsertLeave', +expand('<abuf>'))

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChanged Autocommands for "*"
autocommand call s:Autocmd('TextChanged', +expand('<abuf>'), getbufvar(+expand('<abuf>'), 'changedtick'))

Executing TextChanged Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing InsertEnter Autocommands for "*"
autocommand call s:Autocmd('InsertEnter', +expand('<abuf>'))

Executing InsertEnter Autocommands for "*"
autocommand call lexima#insmode#clear_stack()

autocommand call s:setup_insmode()

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing InsertLeave Autocommands for "*"
autocommand call s:Autocmd('InsertLeave', +expand('<abuf>'))

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChanged Autocommands for "*"
autocommand call s:Autocmd('TextChanged', +expand('<abuf>'), getbufvar(+expand('<abuf>'), 'changedtick'))

Executing TextChanged Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorHold Autocommands for "*"
autocommand silent call CocActionAsync('highlight')

autocommand silent call CocActionAsync('highlight')

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorHold Autocommands for "*"
autocommand silent call CocActionAsync('highlight')

autocommand silent call CocActionAsync('highlight')

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChanged Autocommands for "*"
autocommand call s:Autocmd('TextChanged', +expand('<abuf>'), getbufvar(+expand('<abuf>'), 'changedtick'))

Executing TextChanged Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorHold Autocommands for "*"
autocommand silent call CocActionAsync('highlight')

autocommand silent call CocActionAsync('highlight')

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorHold Autocommands for "*"
autocommand silent call CocActionAsync('highlight')

autocommand silent call CocActionAsync('highlight')

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorHold Autocommands for "*"
autocommand silent call CocActionAsync('highlight')

autocommand silent call CocActionAsync('highlight')

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorHold Autocommands for "*"
autocommand silent call CocActionAsync('highlight')

autocommand silent call CocActionAsync('highlight')

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing InsertEnter Autocommands for "*"
autocommand call s:Autocmd('InsertEnter', +expand('<abuf>'))

Executing InsertEnter Autocommands for "*"
autocommand call lexima#insmode#clear_stack()

autocommand call s:setup_insmode()

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorHoldI Autocommands for "*"
autocommand call s:Autocmd('CursorHoldI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorHoldI Autocommands for "*"
autocommand call s:Autocmd('CursorHoldI', +expand('<abuf>'), [line('.'), col('.')])

Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 5: sourcing "/opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax/cpp.vim"
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 16: sourcing "/opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax/c.vim"
finished sourcing /opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax/c.vim
continuing in /opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax/cpp.vim
finished sourcing /opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax/cpp.vim
continuing in coc#compat#execute
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 5: sourcing "/opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax/cpp.vim"
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 16: sourcing "/opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax/c.vim"
finished sourcing /opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax/c.vim
continuing in /opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax/cpp.vim
finished sourcing /opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax/cpp.vim
continuing in coc#compat#execute
Executing CursorHoldI Autocommands for "*"
autocommand call s:Autocmd('CursorHoldI', +expand('<abuf>'), [line('.'), col('.')])

Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing WinClosed Autocommands for "*"
autocommand call s:HandleWinClosed(+expand('<amatch>'))

Executing BufWinLeave Autocommands for "*"
autocommand call s:Autocmd('BufWinLeave', +expand('<abuf>'), bufwinid(+expand('<abuf>')))

Executing BufHidden Autocommands for "*"
autocommand call s:Autocmd('BufHidden', +expand('<abuf>'))

Executing WinClosed Autocommands for "*"
autocommand call s:HandleWinClosed(+expand('<amatch>'))

Executing BufWinLeave Autocommands for "*"
autocommand call s:Autocmd('BufWinLeave', +expand('<abuf>'), bufwinid(+expand('<abuf>')))

Executing BufHidden Autocommands for "*"
autocommand call s:Autocmd('BufHidden', +expand('<abuf>'))

Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing CursorHoldI Autocommands for "*"
autocommand call s:Autocmd('CursorHoldI', +expand('<abuf>'), [line('.'), col('.')])

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing InsertLeave Autocommands for "*"
autocommand call s:Autocmd('InsertLeave', +expand('<abuf>'))

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()


Executing BufWritePre Autocommands for "*"
autocommand call s:SyncAutocmd('BufWritePre', +expand('<abuf>'), bufname(+expand('<abuf>')), getbufvar(+expand('<abuf>'), 'changedtick'))

"index.cpp" 
"index.cpp" 34L, 535B written
Executing BufWritePost Autocommands for "*"
autocommand call s:Autocmd('BufWritePost', +expand('<abuf>'), getbufvar(+expand('<abuf>'), 'changedtick'))

Executing BufWritePost Autocommands for "*"
autocommand call s:reset_untracked_cache(0)

Executing BufWritePost Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing BufWritePost Autocommands for "*"
autocommand call s:mru_append(expand('<amatch>'))

autocommand call s:mrw_append(expand('<amatch>'))

"index.cpp" 34L, 535B written
Executing CursorHold Autocommands for "*"
autocommand silent call CocActionAsync('highlight')

autocommand silent call CocActionAsync('highlight')

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorHold Autocommands for "*"
autocommand silent call CocActionAsync('highlight')

autocommand silent call CocActionAsync('highlight')

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChanged Autocommands for "*"
autocommand call s:Autocmd('TextChanged', +expand('<abuf>'), getbufvar(+expand('<abuf>'), 'changedtick'))

Executing TextChanged Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorHold Autocommands for "*"
autocommand silent call CocActionAsync('highlight')

autocommand silent call CocActionAsync('highlight')

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChanged Autocommands for "*"
autocommand call s:Autocmd('TextChanged', +expand('<abuf>'), getbufvar(+expand('<abuf>'), 'changedtick'))

Executing TextChanged Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing CursorHold Autocommands for "*"
autocommand silent call CocActionAsync('highlight')

autocommand silent call CocActionAsync('highlight')

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorHold Autocommands for "*"
autocommand silent call CocActionAsync('highlight')

autocommand silent call CocActionAsync('highlight')

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing InsertEnter Autocommands for "*"
autocommand call s:Autocmd('InsertEnter', +expand('<abuf>'))

Executing InsertEnter Autocommands for "*"
autocommand call lexima#insmode#clear_stack()

autocommand call s:setup_insmode()

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing CursorHoldI Autocommands for "*"
autocommand call s:Autocmd('CursorHoldI', +expand('<abuf>'), [line('.'), col('.')])

Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing CursorHoldI Autocommands for "*"
autocommand call s:Autocmd('CursorHoldI', +expand('<abuf>'), [line('.'), col('.')])

Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing CursorHoldI Autocommands for "*"
autocommand call s:Autocmd('CursorHoldI', +expand('<abuf>'), [line('.'), col('.')])

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing InsertLeave Autocommands for "*"
autocommand call s:Autocmd('InsertLeave', +expand('<abuf>'))

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing InsertEnter Autocommands for "*"
autocommand call s:Autocmd('InsertEnter', +expand('<abuf>'))

Executing InsertEnter Autocommands for "*"
autocommand call lexima#insmode#clear_stack()

autocommand call s:setup_insmode()

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing CursorHoldI Autocommands for "*"
autocommand call s:Autocmd('CursorHoldI', +expand('<abuf>'), [line('.'), col('.')])

Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing CursorHoldI Autocommands for "*"
autocommand call s:Autocmd('CursorHoldI', +expand('<abuf>'), [line('.'), col('.')])

Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing WinClosed Autocommands for "*"
autocommand call s:HandleWinClosed(+expand('<amatch>'))

Executing BufWinLeave Autocommands for "*"
autocommand call s:Autocmd('BufWinLeave', +expand('<abuf>'), bufwinid(+expand('<abuf>')))

Executing BufHidden Autocommands for "*"
autocommand call s:Autocmd('BufHidden', +expand('<abuf>'))

Executing CursorHoldI Autocommands for "*"
autocommand call s:Autocmd('CursorHoldI', +expand('<abuf>'), [line('.'), col('.')])

Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing CursorHoldI Autocommands for "*"
autocommand call s:Autocmd('CursorHoldI', +expand('<abuf>'), [line('.'), col('.')])

Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing WinClosed Autocommands for "*"
autocommand call s:HandleWinClosed(+expand('<amatch>'))

Executing BufWinLeave Autocommands for "*"
autocommand call s:Autocmd('BufWinLeave', +expand('<abuf>'), bufwinid(+expand('<abuf>')))

Executing BufHidden Autocommands for "*"
autocommand call s:Autocmd('BufHidden', +expand('<abuf>'))

Executing CursorHoldI Autocommands for "*"
autocommand call s:Autocmd('CursorHoldI', +expand('<abuf>'), [line('.'), col('.')])

Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing CursorHoldI Autocommands for "*"
autocommand call s:Autocmd('CursorHoldI', +expand('<abuf>'), [line('.'), col('.')])

Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing WinClosed Autocommands for "*"
autocommand call s:HandleWinClosed(+expand('<amatch>'))

Executing BufWinLeave Autocommands for "*"
autocommand call s:Autocmd('BufWinLeave', +expand('<abuf>'), bufwinid(+expand('<abuf>')))

Executing BufHidden Autocommands for "*"
autocommand call s:Autocmd('BufHidden', +expand('<abuf>'))

Executing WinClosed Autocommands for "*"
autocommand call s:HandleWinClosed(+expand('<amatch>'))

Executing BufWinLeave Autocommands for "*"
autocommand call s:Autocmd('BufWinLeave', +expand('<abuf>'), bufwinid(+expand('<abuf>')))

Executing BufHidden Autocommands for "*"
autocommand call s:Autocmd('BufHidden', +expand('<abuf>'))

Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing WinClosed Autocommands for "*"
autocommand call s:HandleWinClosed(+expand('<amatch>'))

Executing BufWinLeave Autocommands for "*"
autocommand call s:Autocmd('BufWinLeave', +expand('<abuf>'), bufwinid(+expand('<abuf>')))

Executing BufHidden Autocommands for "*"
autocommand call s:Autocmd('BufHidden', +expand('<abuf>'))

Executing WinClosed Autocommands for "*"
autocommand call s:HandleWinClosed(+expand('<amatch>'))

Executing BufWinLeave Autocommands for "*"
autocommand call s:Autocmd('BufWinLeave', +expand('<abuf>'), bufwinid(+expand('<abuf>')))

Executing BufHidden Autocommands for "*"
autocommand call s:Autocmd('BufHidden', +expand('<abuf>'))

Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing CursorHoldI Autocommands for "*"
autocommand call s:Autocmd('CursorHoldI', +expand('<abuf>'), [line('.'), col('.')])

Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 5: sourcing "/opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax/cpp.vim"
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 16: sourcing "/opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax/c.vim"
finished sourcing /opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax/c.vim
continuing in /opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax/cpp.vim
finished sourcing /opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax/cpp.vim
continuing in coc#compat#execute
Executing CursorHoldI Autocommands for "*"
autocommand call s:Autocmd('CursorHoldI', +expand('<abuf>'), [line('.'), col('.')])

Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing WinClosed Autocommands for "*"
autocommand call s:HandleWinClosed(+expand('<amatch>'))

Executing BufWinLeave Autocommands for "*"
autocommand call s:Autocmd('BufWinLeave', +expand('<abuf>'), bufwinid(+expand('<abuf>')))

Executing BufHidden Autocommands for "*"
autocommand call s:Autocmd('BufHidden', +expand('<abuf>'))

Executing WinClosed Autocommands for "*"
autocommand call s:HandleWinClosed(+expand('<amatch>'))

Executing BufWinLeave Autocommands for "*"
autocommand call s:Autocmd('BufWinLeave', +expand('<abuf>'), bufwinid(+expand('<abuf>')))

Executing BufHidden Autocommands for "*"
autocommand call s:Autocmd('BufHidden', +expand('<abuf>'))

Executing CursorHoldI Autocommands for "*"
autocommand call s:Autocmd('CursorHoldI', +expand('<abuf>'), [line('.'), col('.')])

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing InsertLeave Autocommands for "*"
autocommand call s:Autocmd('InsertLeave', +expand('<abuf>'))

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing command: "'/usr/bin/pbcopy'"


Executing TextYankPost Autocommands for "*"
autocommand call highlightedyank#debounce()

Executing TextYankPost Autocommands for "*"
autocommand call coc#rpc#notify('doAutocmd', [2, v:event, +expand('<abuf>'), win_getid()])

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing command: "'/usr/bin/pbpaste'"


Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChanged Autocommands for "*"
autocommand call s:Autocmd('TextChanged', +expand('<abuf>'), getbufvar(+expand('<abuf>'), 'changedtick'))

Executing TextChanged Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChanged Autocommands for "*"
autocommand call s:_doautocmd('highlightedyank-highlight', 'TextChanged', '*')

not found in runtime path: "parser/comment.*"
Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorHold Autocommands for "*"
autocommand silent call CocActionAsync('highlight')

autocommand silent call CocActionAsync('highlight')

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChanged Autocommands for "*"
autocommand call s:Autocmd('TextChanged', +expand('<abuf>'), getbufvar(+expand('<abuf>'), 'changedtick'))

Executing TextChanged Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing CursorHold Autocommands for "*"
autocommand silent call CocActionAsync('highlight')

autocommand silent call CocActionAsync('highlight')

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()


Executing BufWritePre Autocommands for "*"
autocommand call s:SyncAutocmd('BufWritePre', +expand('<abuf>'), bufname(+expand('<abuf>')), getbufvar(+expand('<abuf>'), 'changedtick'))

"index.cpp" 
"index.cpp" 36L, 570B written
Executing BufWritePost Autocommands for "*"
autocommand call s:Autocmd('BufWritePost', +expand('<abuf>'), getbufvar(+expand('<abuf>'), 'changedtick'))

Executing BufWritePost Autocommands for "*"
autocommand call s:reset_untracked_cache(0)

Executing BufWritePost Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing BufWritePost Autocommands for "*"
autocommand call s:mru_append(expand('<amatch>'))

autocommand call s:mrw_append(expand('<amatch>'))

"index.cpp" 36L, 570B written
Executing CursorHold Autocommands for "*"
autocommand silent call CocActionAsync('highlight')

autocommand silent call CocActionAsync('highlight')

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing InsertEnter Autocommands for "*"
autocommand call s:Autocmd('InsertEnter', +expand('<abuf>'))

Executing InsertEnter Autocommands for "*"
autocommand call lexima#insmode#clear_stack()

autocommand call s:setup_insmode()

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing CursorHoldI Autocommands for "*"
autocommand call s:Autocmd('CursorHoldI', +expand('<abuf>'), [line('.'), col('.')])

Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 5: sourcing "/opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax/cpp.vim"
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 16: sourcing "/opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax/c.vim"
finished sourcing /opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax/c.vim
continuing in /opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax/cpp.vim
finished sourcing /opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax/cpp.vim
continuing in coc#compat#execute
Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 5: sourcing "/opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax/cpp.vim"
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 16: sourcing "/opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax/c.vim"
finished sourcing /opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax/c.vim
continuing in /opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax/cpp.vim
finished sourcing /opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax/cpp.vim
continuing in coc#compat#execute
Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 5: sourcing "/opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax/cpp.vim"
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 16: sourcing "/opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax/c.vim"
finished sourcing /opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax/c.vim
continuing in /opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax/cpp.vim
finished sourcing /opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax/cpp.vim
continuing in coc#compat#execute
Executing CursorHoldI Autocommands for "*"
autocommand call s:Autocmd('CursorHoldI', +expand('<abuf>'), [line('.'), col('.')])

Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 5: sourcing "/opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax/cpp.vim"
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 16: sourcing "/opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax/c.vim"
finished sourcing /opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax/c.vim
continuing in /opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax/cpp.vim
finished sourcing /opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax/cpp.vim
continuing in coc#compat#execute
Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing WinClosed Autocommands for "*"
autocommand call s:HandleWinClosed(+expand('<amatch>'))

Executing BufWinLeave Autocommands for "*"
autocommand call s:Autocmd('BufWinLeave', +expand('<abuf>'), bufwinid(+expand('<abuf>')))

Executing BufHidden Autocommands for "*"
autocommand call s:Autocmd('BufHidden', +expand('<abuf>'))

Executing WinClosed Autocommands for "*"
autocommand call s:HandleWinClosed(+expand('<amatch>'))

Executing BufWinLeave Autocommands for "*"
autocommand call s:Autocmd('BufWinLeave', +expand('<abuf>'), bufwinid(+expand('<abuf>')))

Executing BufHidden Autocommands for "*"
autocommand call s:Autocmd('BufHidden', +expand('<abuf>'))

Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing CursorHoldI Autocommands for "*"
autocommand call s:Autocmd('CursorHoldI', +expand('<abuf>'), [line('.'), col('.')])

Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing CursorHoldI Autocommands for "*"
autocommand call s:Autocmd('CursorHoldI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing WinClosed Autocommands for "*"
autocommand call s:HandleWinClosed(+expand('<amatch>'))

Executing BufWinLeave Autocommands for "*"
autocommand call s:Autocmd('BufWinLeave', +expand('<abuf>'), bufwinid(+expand('<abuf>')))

Executing BufHidden Autocommands for "*"
autocommand call s:Autocmd('BufHidden', +expand('<abuf>'))

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()


Executing BufWritePre Autocommands for "*"
autocommand call s:SyncAutocmd('BufWritePre', +expand('<abuf>'), bufname(+expand('<abuf>')), getbufvar(+expand('<abuf>'), 'changedtick'))

"index.cpp" 
"index.cpp" 37L, 585B written
Executing BufWritePost Autocommands for "*"
autocommand call s:Autocmd('BufWritePost', +expand('<abuf>'), getbufvar(+expand('<abuf>'), 'changedtick'))

Executing BufWritePost Autocommands for "*"
autocommand call s:reset_untracked_cache(0)

Executing BufWritePost Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing BufWritePost Autocommands for "*"
autocommand call s:mru_append(expand('<amatch>'))

autocommand call s:mrw_append(expand('<amatch>'))

"index.cpp" 37L, 585B written
Executing CursorHold Autocommands for "*"
autocommand silent call CocActionAsync('highlight')

autocommand silent call CocActionAsync('highlight')

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing InsertEnter Autocommands for "*"
autocommand call s:Autocmd('InsertEnter', +expand('<abuf>'))

Executing InsertEnter Autocommands for "*"
autocommand call lexima#insmode#clear_stack()

autocommand call s:setup_insmode()

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing InsertLeave Autocommands for "*"
autocommand call s:Autocmd('InsertLeave', +expand('<abuf>'))

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorHold Autocommands for "*"
autocommand silent call CocActionAsync('highlight')

autocommand silent call CocActionAsync('highlight')

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()


Executing BufWritePre Autocommands for "*"
autocommand call s:SyncAutocmd('BufWritePre', +expand('<abuf>'), bufname(+expand('<abuf>')), getbufvar(+expand('<abuf>'), 'changedtick'))

"index.cpp" 
"index.cpp" 37L, 586B written
Executing BufWritePost Autocommands for "*"
autocommand call s:Autocmd('BufWritePost', +expand('<abuf>'), getbufvar(+expand('<abuf>'), 'changedtick'))

Executing BufWritePost Autocommands for "*"
autocommand call s:reset_untracked_cache(0)

Executing BufWritePost Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing BufWritePost Autocommands for "*"
autocommand call s:mru_append(expand('<amatch>'))

autocommand call s:mrw_append(expand('<amatch>'))

"index.cpp" 37L, 586B written
Executing CursorHold Autocommands for "*"
autocommand silent call CocActionAsync('highlight')

autocommand silent call CocActionAsync('highlight')

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorHold Autocommands for "*"
autocommand silent call CocActionAsync('highlight')

autocommand silent call CocActionAsync('highlight')

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorHold Autocommands for "*"
autocommand silent call CocActionAsync('highlight')

autocommand silent call CocActionAsync('highlight')

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing command: "'/usr/bin/pbcopy'"


Executing TextYankPost Autocommands for "*"
autocommand call highlightedyank#debounce()

Executing TextYankPost Autocommands for "*"
autocommand call coc#rpc#notify('doAutocmd', [2, v:event, +expand('<abuf>'), win_getid()])

Executing InsertEnter Autocommands for "*"
autocommand call s:Autocmd('InsertEnter', +expand('<abuf>'))

Executing InsertEnter Autocommands for "*"
autocommand call lexima#insmode#clear_stack()

autocommand call s:setup_insmode()

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing CursorHoldI Autocommands for "*"
autocommand call s:Autocmd('CursorHoldI', +expand('<abuf>'), [line('.'), col('.')])

Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing InsertLeave Autocommands for "*"
autocommand call s:Autocmd('InsertLeave', +expand('<abuf>'))

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing WinClosed Autocommands for "*"
autocommand call s:HandleWinClosed(+expand('<amatch>'))

Executing BufWinLeave Autocommands for "*"
autocommand call s:Autocmd('BufWinLeave', +expand('<abuf>'), bufwinid(+expand('<abuf>')))

Executing BufHidden Autocommands for "*"
autocommand call s:Autocmd('BufHidden', +expand('<abuf>'))

Executing WinClosed Autocommands for "*"
autocommand call s:HandleWinClosed(+expand('<amatch>'))

Executing BufWinLeave Autocommands for "*"
autocommand call s:Autocmd('BufWinLeave', +expand('<abuf>'), bufwinid(+expand('<abuf>')))

Executing BufHidden Autocommands for "*"
autocommand call s:Autocmd('BufHidden', +expand('<abuf>'))

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()


Executing BufWritePre Autocommands for "*"
autocommand call s:SyncAutocmd('BufWritePre', +expand('<abuf>'), bufname(+expand('<abuf>')), getbufvar(+expand('<abuf>'), 'changedtick'))

"index.cpp" 
"index.cpp" 37L, 586B written
Executing BufWritePost Autocommands for "*"
autocommand call s:Autocmd('BufWritePost', +expand('<abuf>'), getbufvar(+expand('<abuf>'), 'changedtick'))

Executing BufWritePost Autocommands for "*"
autocommand call s:reset_untracked_cache(0)

Executing BufWritePost Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing BufWritePost Autocommands for "*"
autocommand call s:mru_append(expand('<amatch>'))

autocommand call s:mrw_append(expand('<amatch>'))

"index.cpp" 37L, 586B written
Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorHold Autocommands for "*"
autocommand silent call CocActionAsync('highlight')

autocommand silent call CocActionAsync('highlight')

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing InsertEnter Autocommands for "*"
autocommand call s:Autocmd('InsertEnter', +expand('<abuf>'))

Executing InsertEnter Autocommands for "*"
autocommand call lexima#insmode#clear_stack()

autocommand call s:setup_insmode()

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing InsertLeave Autocommands for "*"
autocommand call s:Autocmd('InsertLeave', +expand('<abuf>'))

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing WinClosed Autocommands for "*"
autocommand call s:HandleWinClosed(+expand('<amatch>'))

Executing BufWinLeave Autocommands for "*"
autocommand call s:Autocmd('BufWinLeave', +expand('<abuf>'), bufwinid(+expand('<abuf>')))

Executing BufHidden Autocommands for "*"
autocommand call s:Autocmd('BufHidden', +expand('<abuf>'))

Executing WinClosed Autocommands for "*"
autocommand call s:HandleWinClosed(+expand('<amatch>'))

Executing BufWinLeave Autocommands for "*"
autocommand call s:Autocmd('BufWinLeave', +expand('<abuf>'), bufwinid(+expand('<abuf>')))

Executing BufHidden Autocommands for "*"
autocommand call s:Autocmd('BufHidden', +expand('<abuf>'))

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()


Executing BufWritePre Autocommands for "*"
autocommand call s:SyncAutocmd('BufWritePre', +expand('<abuf>'), bufname(+expand('<abuf>')), getbufvar(+expand('<abuf>'), 'changedtick'))

"index.cpp" 
"index.cpp" 37L, 587B written
Executing BufWritePost Autocommands for "*"
autocommand call s:Autocmd('BufWritePost', +expand('<abuf>'), getbufvar(+expand('<abuf>'), 'changedtick'))

Executing BufWritePost Autocommands for "*"
autocommand call s:reset_untracked_cache(0)

Executing BufWritePost Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing BufWritePost Autocommands for "*"
autocommand call s:mru_append(expand('<amatch>'))

autocommand call s:mrw_append(expand('<amatch>'))

"index.cpp" 37L, 587B written
Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorHold Autocommands for "*"
autocommand silent call CocActionAsync('highlight')

autocommand silent call CocActionAsync('highlight')

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing InsertEnter Autocommands for "*"
autocommand call s:Autocmd('InsertEnter', +expand('<abuf>'))

Executing InsertEnter Autocommands for "*"
autocommand call lexima#insmode#clear_stack()

autocommand call s:setup_insmode()

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorHoldI Autocommands for "*"
autocommand call s:Autocmd('CursorHoldI', +expand('<abuf>'), [line('.'), col('.')])

Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing CursorHoldI Autocommands for "*"
autocommand call s:Autocmd('CursorHoldI', +expand('<abuf>'), [line('.'), col('.')])

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing InsertLeave Autocommands for "*"
autocommand call s:Autocmd('InsertLeave', +expand('<abuf>'))

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorHold Autocommands for "*"
autocommand silent call CocActionAsync('highlight')

autocommand silent call CocActionAsync('highlight')

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing InsertEnter Autocommands for "*"
autocommand call s:Autocmd('InsertEnter', +expand('<abuf>'))

Executing InsertEnter Autocommands for "*"
autocommand call lexima#insmode#clear_stack()

autocommand call s:setup_insmode()

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing CursorHoldI Autocommands for "*"
autocommand call s:Autocmd('CursorHoldI', +expand('<abuf>'), [line('.'), col('.')])

Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing CursorHoldI Autocommands for "*"
autocommand call s:Autocmd('CursorHoldI', +expand('<abuf>'), [line('.'), col('.')])

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing InsertLeave Autocommands for "*"
autocommand call s:Autocmd('InsertLeave', +expand('<abuf>'))

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorHold Autocommands for "*"
autocommand silent call CocActionAsync('highlight')

autocommand silent call CocActionAsync('highlight')

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()


Executing BufWritePre Autocommands for "*"
autocommand call s:SyncAutocmd('BufWritePre', +expand('<abuf>'), bufname(+expand('<abuf>')), getbufvar(+expand('<abuf>'), 'changedtick'))

"index.cpp" 
"index.cpp" 37L, 591B written
Executing BufWritePost Autocommands for "*"
autocommand call s:Autocmd('BufWritePost', +expand('<abuf>'), getbufvar(+expand('<abuf>'), 'changedtick'))

Executing BufWritePost Autocommands for "*"
autocommand call s:reset_untracked_cache(0)

Executing BufWritePost Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing BufWritePost Autocommands for "*"
autocommand call s:mru_append(expand('<amatch>'))

autocommand call s:mrw_append(expand('<amatch>'))

"index.cpp" 37L, 591B written
Executing CursorHold Autocommands for "*"
autocommand silent call CocActionAsync('highlight')

autocommand silent call CocActionAsync('highlight')

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

4 lines yanked
Executing command: "'/usr/bin/pbcopy'"


Executing TextYankPost Autocommands for "*"
autocommand call highlightedyank#debounce()

Executing TextYankPost Autocommands for "*"
autocommand call coc#rpc#notify('doAutocmd', [2, v:event, +expand('<abuf>'), win_getid()])

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorHold Autocommands for "*"
autocommand silent call CocActionAsync('highlight')

autocommand silent call CocActionAsync('highlight')

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing command: "'/usr/bin/pbpaste'"


Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChanged Autocommands for "*"
autocommand call s:Autocmd('TextChanged', +expand('<abuf>'), getbufvar(+expand('<abuf>'), 'changedtick'))

Executing TextChanged Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing CursorHold Autocommands for "*"
autocommand silent call CocActionAsync('highlight')

autocommand silent call CocActionAsync('highlight')

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChanged Autocommands for "*"
autocommand call s:Autocmd('TextChanged', +expand('<abuf>'), getbufvar(+expand('<abuf>'), 'changedtick'))

Executing TextChanged Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChanged Autocommands for "*"
autocommand call s:Autocmd('TextChanged', +expand('<abuf>'), getbufvar(+expand('<abuf>'), 'changedtick'))

Executing TextChanged Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChanged Autocommands for "*"
autocommand call s:Autocmd('TextChanged', +expand('<abuf>'), getbufvar(+expand('<abuf>'), 'changedtick'))

Executing TextChanged Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing CursorHold Autocommands for "*"
autocommand silent call CocActionAsync('highlight')

autocommand silent call CocActionAsync('highlight')

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChanged Autocommands for "*"
autocommand call s:Autocmd('TextChanged', +expand('<abuf>'), getbufvar(+expand('<abuf>'), 'changedtick'))

Executing TextChanged Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing CursorHold Autocommands for "*"
autocommand silent call CocActionAsync('highlight')

autocommand silent call CocActionAsync('highlight')

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChanged Autocommands for "*"
autocommand call s:Autocmd('TextChanged', +expand('<abuf>'), getbufvar(+expand('<abuf>'), 'changedtick'))

Executing TextChanged Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChanged Autocommands for "*"
autocommand call s:Autocmd('TextChanged', +expand('<abuf>'), getbufvar(+expand('<abuf>'), 'changedtick'))

Executing TextChanged Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChanged Autocommands for "*"
autocommand call s:Autocmd('TextChanged', +expand('<abuf>'), getbufvar(+expand('<abuf>'), 'changedtick'))

Executing TextChanged Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing CursorHold Autocommands for "*"
autocommand silent call CocActionAsync('highlight')

autocommand silent call CocActionAsync('highlight')

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorHold Autocommands for "*"
autocommand silent call CocActionAsync('highlight')

autocommand silent call CocActionAsync('highlight')

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing command: "'/usr/bin/pbcopy'"


Executing TextYankPost Autocommands for "*"
autocommand call highlightedyank#debounce()

Executing TextYankPost Autocommands for "*"
autocommand call coc#rpc#notify('doAutocmd', [2, v:event, +expand('<abuf>'), win_getid()])

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChanged Autocommands for "*"
autocommand call s:Autocmd('TextChanged', +expand('<abuf>'), getbufvar(+expand('<abuf>'), 'changedtick'))

Executing TextChanged Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing command: "'/usr/bin/pbpaste'"


Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChanged Autocommands for "*"
autocommand call s:Autocmd('TextChanged', +expand('<abuf>'), getbufvar(+expand('<abuf>'), 'changedtick'))

Executing TextChanged Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorHold Autocommands for "*"
autocommand silent call CocActionAsync('highlight')

autocommand silent call CocActionAsync('highlight')

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChanged Autocommands for "*"
autocommand call s:Autocmd('TextChanged', +expand('<abuf>'), getbufvar(+expand('<abuf>'), 'changedtick'))

Executing TextChanged Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()


Executing BufWritePre Autocommands for "*"
autocommand call s:SyncAutocmd('BufWritePre', +expand('<abuf>'), bufname(+expand('<abuf>')), getbufvar(+expand('<abuf>'), 'changedtick'))

"index.cpp" 
"index.cpp" 37L, 590B written
Executing BufWritePost Autocommands for "*"
autocommand call s:Autocmd('BufWritePost', +expand('<abuf>'), getbufvar(+expand('<abuf>'), 'changedtick'))

Executing BufWritePost Autocommands for "*"
autocommand call s:reset_untracked_cache(0)

Executing BufWritePost Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing BufWritePost Autocommands for "*"
autocommand call s:mru_append(expand('<amatch>'))

autocommand call s:mrw_append(expand('<amatch>'))

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChanged Autocommands for "*"
autocommand call s:Autocmd('TextChanged', +expand('<abuf>'), getbufvar(+expand('<abuf>'), 'changedtick'))

Executing TextChanged Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
"index.cpp" 37L, 590B written
Executing CursorHold Autocommands for "*"
autocommand silent call CocActionAsync('highlight')

autocommand silent call CocActionAsync('highlight')

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorHold Autocommands for "*"
autocommand silent call CocActionAsync('highlight')

autocommand silent call CocActionAsync('highlight')

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorHold Autocommands for "*"
autocommand silent call CocActionAsync('highlight')

autocommand silent call CocActionAsync('highlight')

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChanged Autocommands for "*"
autocommand call s:Autocmd('TextChanged', +expand('<abuf>'), getbufvar(+expand('<abuf>'), 'changedtick'))

Executing TextChanged Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing CursorHold Autocommands for "*"
autocommand silent call CocActionAsync('highlight')

autocommand silent call CocActionAsync('highlight')

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()


Executing BufWritePre Autocommands for "*"
autocommand call s:SyncAutocmd('BufWritePre', +expand('<abuf>'), bufname(+expand('<abuf>')), getbufvar(+expand('<abuf>'), 'changedtick'))

"index.cpp" 
"index.cpp" 37L, 590B written
Executing BufWritePost Autocommands for "*"
autocommand call s:Autocmd('BufWritePost', +expand('<abuf>'), getbufvar(+expand('<abuf>'), 'changedtick'))

Executing BufWritePost Autocommands for "*"
autocommand call s:reset_untracked_cache(0)

Executing BufWritePost Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing BufWritePost Autocommands for "*"
autocommand call s:mru_append(expand('<amatch>'))

autocommand call s:mrw_append(expand('<amatch>'))

"index.cpp" 37L, 590B written
Executing CursorHold Autocommands for "*"
autocommand silent call CocActionAsync('highlight')

autocommand silent call CocActionAsync('highlight')

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorHold Autocommands for "*"
autocommand silent call CocActionAsync('highlight')

autocommand silent call CocActionAsync('highlight')

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorHold Autocommands for "*"
autocommand silent call CocActionAsync('highlight')

autocommand silent call CocActionAsync('highlight')

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing command: "'/usr/bin/pbcopy'"


Executing TextYankPost Autocommands for "*"
autocommand call highlightedyank#debounce()

Executing TextYankPost Autocommands for "*"
autocommand call coc#rpc#notify('doAutocmd', [2, v:event, +expand('<abuf>'), win_getid()])

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChanged Autocommands for "*"
autocommand call s:Autocmd('TextChanged', +expand('<abuf>'), getbufvar(+expand('<abuf>'), 'changedtick'))

Executing TextChanged Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorHold Autocommands for "*"
autocommand silent call CocActionAsync('highlight')

autocommand silent call CocActionAsync('highlight')

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorHold Autocommands for "*"
autocommand silent call CocActionAsync('highlight')

autocommand silent call CocActionAsync('highlight')

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorHold Autocommands for "*"
autocommand silent call CocActionAsync('highlight')

autocommand silent call CocActionAsync('highlight')

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorHold Autocommands for "*"
autocommand silent call CocActionAsync('highlight')

autocommand silent call CocActionAsync('highlight')

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChanged Autocommands for "*"
autocommand call s:Autocmd('TextChanged', +expand('<abuf>'), getbufvar(+expand('<abuf>'), 'changedtick'))

Executing TextChanged Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing CursorHold Autocommands for "*"
autocommand silent call CocActionAsync('highlight')

autocommand silent call CocActionAsync('highlight')

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorHold Autocommands for "*"
autocommand silent call CocActionAsync('highlight')

autocommand silent call CocActionAsync('highlight')

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing command: "'/usr/bin/pbcopy'"


Executing TextYankPost Autocommands for "*"
autocommand call highlightedyank#debounce()

Executing TextYankPost Autocommands for "*"
autocommand call coc#rpc#notify('doAutocmd', [2, v:event, +expand('<abuf>'), win_getid()])

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChanged Autocommands for "*"
autocommand call s:Autocmd('TextChanged', +expand('<abuf>'), getbufvar(+expand('<abuf>'), 'changedtick'))

Executing TextChanged Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing command: "'/usr/bin/pbpaste'"


Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChanged Autocommands for "*"
autocommand call s:Autocmd('TextChanged', +expand('<abuf>'), getbufvar(+expand('<abuf>'), 'changedtick'))

Executing TextChanged Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()


Executing BufWritePre Autocommands for "*"
autocommand call s:SyncAutocmd('BufWritePre', +expand('<abuf>'), bufname(+expand('<abuf>')), getbufvar(+expand('<abuf>'), 'changedtick'))

"index.cpp" 
"index.cpp" 37L, 590B written
Executing BufWritePost Autocommands for "*"
autocommand call s:Autocmd('BufWritePost', +expand('<abuf>'), getbufvar(+expand('<abuf>'), 'changedtick'))

Executing BufWritePost Autocommands for "*"
autocommand call s:reset_untracked_cache(0)

Executing BufWritePost Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing BufWritePost Autocommands for "*"
autocommand call s:mru_append(expand('<amatch>'))

autocommand call s:mrw_append(expand('<amatch>'))

"index.cpp" 37L, 590B written
Executing CursorHold Autocommands for "*"
autocommand silent call CocActionAsync('highlight')

autocommand silent call CocActionAsync('highlight')

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChanged Autocommands for "*"
autocommand call s:Autocmd('TextChanged', +expand('<abuf>'), getbufvar(+expand('<abuf>'), 'changedtick'))

Executing TextChanged Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()


Executing BufWritePre Autocommands for "*"
autocommand call s:SyncAutocmd('BufWritePre', +expand('<abuf>'), bufname(+expand('<abuf>')), getbufvar(+expand('<abuf>'), 'changedtick'))

"index.cpp" 
"index.cpp" 37L, 589B written
Executing BufWritePost Autocommands for "*"
autocommand call s:Autocmd('BufWritePost', +expand('<abuf>'), getbufvar(+expand('<abuf>'), 'changedtick'))

Executing BufWritePost Autocommands for "*"
autocommand call s:reset_untracked_cache(0)

Executing BufWritePost Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing BufWritePost Autocommands for "*"
autocommand call s:mru_append(expand('<amatch>'))

autocommand call s:mrw_append(expand('<amatch>'))

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChanged Autocommands for "*"
autocommand call s:Autocmd('TextChanged', +expand('<abuf>'), getbufvar(+expand('<abuf>'), 'changedtick'))

Executing TextChanged Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
"index.cpp" 37L, 589B written
Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorHold Autocommands for "*"
autocommand silent call CocActionAsync('highlight')

autocommand silent call CocActionAsync('highlight')

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChanged Autocommands for "*"
autocommand call s:Autocmd('TextChanged', +expand('<abuf>'), getbufvar(+expand('<abuf>'), 'changedtick'))

Executing TextChanged Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing CursorHold Autocommands for "*"
autocommand silent call CocActionAsync('highlight')

autocommand silent call CocActionAsync('highlight')

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()


Executing BufWritePre Autocommands for "*"
autocommand call s:SyncAutocmd('BufWritePre', +expand('<abuf>'), bufname(+expand('<abuf>')), getbufvar(+expand('<abuf>'), 'changedtick'))

"index.cpp" 
"index.cpp" 37L, 589B written
Executing BufWritePost Autocommands for "*"
autocommand call s:Autocmd('BufWritePost', +expand('<abuf>'), getbufvar(+expand('<abuf>'), 'changedtick'))

Executing BufWritePost Autocommands for "*"
autocommand call s:reset_untracked_cache(0)

Executing BufWritePost Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing BufWritePost Autocommands for "*"
autocommand call s:mru_append(expand('<amatch>'))

autocommand call s:mrw_append(expand('<amatch>'))

"index.cpp" 37L, 589B written
Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorHold Autocommands for "*"
autocommand silent call CocActionAsync('highlight')

autocommand silent call CocActionAsync('highlight')

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorHold Autocommands for "*"
autocommand silent call CocActionAsync('highlight')

autocommand silent call CocActionAsync('highlight')

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing command: "'/usr/bin/pbcopy'"


Executing TextYankPost Autocommands for "*"
autocommand call highlightedyank#debounce()

Executing TextYankPost Autocommands for "*"
autocommand call coc#rpc#notify('doAutocmd', [2, v:event, +expand('<abuf>'), win_getid()])

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorHold Autocommands for "*"
autocommand silent call CocActionAsync('highlight')

autocommand silent call CocActionAsync('highlight')

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing command: "'/usr/bin/pbpaste'"


Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChanged Autocommands for "*"
autocommand call s:Autocmd('TextChanged', +expand('<abuf>'), getbufvar(+expand('<abuf>'), 'changedtick'))

Executing TextChanged Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing CursorHold Autocommands for "*"
autocommand silent call CocActionAsync('highlight')

autocommand silent call CocActionAsync('highlight')

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing command: "'/usr/bin/pbcopy'"


Executing TextYankPost Autocommands for "*"
autocommand call highlightedyank#debounce()

Executing TextYankPost Autocommands for "*"
autocommand call coc#rpc#notify('doAutocmd', [2, v:event, +expand('<abuf>'), win_getid()])

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChanged Autocommands for "*"
autocommand call s:Autocmd('TextChanged', +expand('<abuf>'), getbufvar(+expand('<abuf>'), 'changedtick'))

Executing TextChanged Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorHold Autocommands for "*"
autocommand silent call CocActionAsync('highlight')

autocommand silent call CocActionAsync('highlight')

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorHold Autocommands for "*"
autocommand silent call CocActionAsync('highlight')

autocommand silent call CocActionAsync('highlight')

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing InsertEnter Autocommands for "*"
autocommand call s:Autocmd('InsertEnter', +expand('<abuf>'))

Executing InsertEnter Autocommands for "*"
autocommand call lexima#insmode#clear_stack()

autocommand call s:setup_insmode()

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorHoldI Autocommands for "*"
autocommand call s:Autocmd('CursorHoldI', +expand('<abuf>'), [line('.'), col('.')])

Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing CursorHoldI Autocommands for "*"
autocommand call s:Autocmd('CursorHoldI', +expand('<abuf>'), [line('.'), col('.')])

Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 5: sourcing "/opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax/cpp.vim"
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 16: sourcing "/opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax/c.vim"
finished sourcing /opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax/c.vim
continuing in /opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax/cpp.vim
finished sourcing /opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax/cpp.vim
continuing in coc#compat#execute
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 5: sourcing "/opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax/cpp.vim"
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 16: sourcing "/opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax/c.vim"
finished sourcing /opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax/c.vim
continuing in /opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax/cpp.vim
finished sourcing /opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax/cpp.vim
continuing in coc#compat#execute
Executing CursorHoldI Autocommands for "*"
autocommand call s:Autocmd('CursorHoldI', +expand('<abuf>'), [line('.'), col('.')])

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing InsertLeave Autocommands for "*"
autocommand call s:Autocmd('InsertLeave', +expand('<abuf>'))

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing WinClosed Autocommands for "*"
autocommand call s:HandleWinClosed(+expand('<amatch>'))

Executing BufWinLeave Autocommands for "*"
autocommand call s:Autocmd('BufWinLeave', +expand('<abuf>'), bufwinid(+expand('<abuf>')))

Executing BufHidden Autocommands for "*"
autocommand call s:Autocmd('BufHidden', +expand('<abuf>'))

Executing WinClosed Autocommands for "*"
autocommand call s:HandleWinClosed(+expand('<amatch>'))

Executing BufWinLeave Autocommands for "*"
autocommand call s:Autocmd('BufWinLeave', +expand('<abuf>'), bufwinid(+expand('<abuf>')))

Executing BufHidden Autocommands for "*"
autocommand call s:Autocmd('BufHidden', +expand('<abuf>'))

Executing CursorHold Autocommands for "*"
autocommand silent call CocActionAsync('highlight')

autocommand silent call CocActionAsync('highlight')

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()


Executing BufWritePre Autocommands for "*"
autocommand call s:SyncAutocmd('BufWritePre', +expand('<abuf>'), bufname(+expand('<abuf>')), getbufvar(+expand('<abuf>'), 'changedtick'))

"index.cpp" 
"index.cpp" 38L, 625B written
Executing BufWritePost Autocommands for "*"
autocommand call s:Autocmd('BufWritePost', +expand('<abuf>'), getbufvar(+expand('<abuf>'), 'changedtick'))

Executing BufWritePost Autocommands for "*"
autocommand call s:reset_untracked_cache(0)

Executing BufWritePost Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing BufWritePost Autocommands for "*"
autocommand call s:mru_append(expand('<amatch>'))

autocommand call s:mrw_append(expand('<amatch>'))

"index.cpp" 38L, 625B written
Executing CursorHold Autocommands for "*"
autocommand silent call CocActionAsync('highlight')

autocommand silent call CocActionAsync('highlight')

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing InsertEnter Autocommands for "*"
autocommand call s:Autocmd('InsertEnter', +expand('<abuf>'))

Executing InsertEnter Autocommands for "*"
autocommand call lexima#insmode#clear_stack()

autocommand call s:setup_insmode()

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing InsertLeave Autocommands for "*"
autocommand call s:Autocmd('InsertLeave', +expand('<abuf>'))

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()


Executing BufWritePre Autocommands for "*"
autocommand call s:SyncAutocmd('BufWritePre', +expand('<abuf>'), bufname(+expand('<abuf>')), getbufvar(+expand('<abuf>'), 'changedtick'))

"index.cpp" 
"index.cpp" 38L, 626B written
Executing BufWritePost Autocommands for "*"
autocommand call s:Autocmd('BufWritePost', +expand('<abuf>'), getbufvar(+expand('<abuf>'), 'changedtick'))

Executing BufWritePost Autocommands for "*"
autocommand call s:reset_untracked_cache(0)

Executing BufWritePost Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing BufWritePost Autocommands for "*"
autocommand call s:mru_append(expand('<amatch>'))

autocommand call s:mrw_append(expand('<amatch>'))

"index.cpp" 38L, 626B written
Executing CursorHold Autocommands for "*"
autocommand silent call CocActionAsync('highlight')

autocommand silent call CocActionAsync('highlight')

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing command: "'/usr/bin/pbcopy'"


Executing TextYankPost Autocommands for "*"
autocommand call highlightedyank#debounce()

Executing TextYankPost Autocommands for "*"
autocommand call coc#rpc#notify('doAutocmd', [2, v:event, +expand('<abuf>'), win_getid()])

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorHold Autocommands for "*"
autocommand silent call CocActionAsync('highlight')

autocommand silent call CocActionAsync('highlight')

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing command: "'/usr/bin/pbpaste'"


Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChanged Autocommands for "*"
autocommand call s:Autocmd('TextChanged', +expand('<abuf>'), getbufvar(+expand('<abuf>'), 'changedtick'))

Executing TextChanged Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorHold Autocommands for "*"
autocommand silent call CocActionAsync('highlight')

autocommand silent call CocActionAsync('highlight')

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorHold Autocommands for "*"
autocommand silent call CocActionAsync('highlight')

autocommand silent call CocActionAsync('highlight')

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing command: "'/usr/bin/pbcopy'"


Executing TextYankPost Autocommands for "*"
autocommand call highlightedyank#debounce()

Executing TextYankPost Autocommands for "*"
autocommand call coc#rpc#notify('doAutocmd', [2, v:event, +expand('<abuf>'), win_getid()])

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChanged Autocommands for "*"
autocommand call s:Autocmd('TextChanged', +expand('<abuf>'), getbufvar(+expand('<abuf>'), 'changedtick'))

Executing TextChanged Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorHold Autocommands for "*"
autocommand silent call CocActionAsync('highlight')

autocommand silent call CocActionAsync('highlight')

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing InsertEnter Autocommands for "*"
autocommand call s:Autocmd('InsertEnter', +expand('<abuf>'))

Executing InsertEnter Autocommands for "*"
autocommand call lexima#insmode#clear_stack()

autocommand call s:setup_insmode()

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing CursorHoldI Autocommands for "*"
autocommand call s:Autocmd('CursorHoldI', +expand('<abuf>'), [line('.'), col('.')])

Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 5: sourcing "/opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax/cpp.vim"
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 16: sourcing "/opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax/c.vim"
finished sourcing /opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax/c.vim
continuing in /opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax/cpp.vim
finished sourcing /opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax/cpp.vim
continuing in coc#compat#execute
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 5: sourcing "/opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax/cpp.vim"
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 16: sourcing "/opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax/c.vim"
finished sourcing /opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax/c.vim
continuing in /opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax/cpp.vim
finished sourcing /opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax/cpp.vim
continuing in coc#compat#execute
Executing CursorHoldI Autocommands for "*"
autocommand call s:Autocmd('CursorHoldI', +expand('<abuf>'), [line('.'), col('.')])

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing InsertLeave Autocommands for "*"
autocommand call s:Autocmd('InsertLeave', +expand('<abuf>'))

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing WinClosed Autocommands for "*"
autocommand call s:HandleWinClosed(+expand('<amatch>'))

Executing BufWinLeave Autocommands for "*"
autocommand call s:Autocmd('BufWinLeave', +expand('<abuf>'), bufwinid(+expand('<abuf>')))

Executing BufHidden Autocommands for "*"
autocommand call s:Autocmd('BufHidden', +expand('<abuf>'))

Executing WinClosed Autocommands for "*"
autocommand call s:HandleWinClosed(+expand('<amatch>'))

Executing BufWinLeave Autocommands for "*"
autocommand call s:Autocmd('BufWinLeave', +expand('<abuf>'), bufwinid(+expand('<abuf>')))

Executing BufHidden Autocommands for "*"
autocommand call s:Autocmd('BufHidden', +expand('<abuf>'))

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorHold Autocommands for "*"
autocommand silent call CocActionAsync('highlight')

autocommand silent call CocActionAsync('highlight')

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing command: "'/usr/bin/pbcopy'"


Executing TextYankPost Autocommands for "*"
autocommand call highlightedyank#debounce()

Executing TextYankPost Autocommands for "*"
autocommand call coc#rpc#notify('doAutocmd', [2, v:event, +expand('<abuf>'), win_getid()])

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChanged Autocommands for "*"
autocommand call s:Autocmd('TextChanged', +expand('<abuf>'), getbufvar(+expand('<abuf>'), 'changedtick'))

Executing TextChanged Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing command: "'/usr/bin/pbcopy'"


Executing TextYankPost Autocommands for "*"
autocommand call highlightedyank#debounce()

Executing TextYankPost Autocommands for "*"
autocommand call coc#rpc#notify('doAutocmd', [2, v:event, +expand('<abuf>'), win_getid()])

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChanged Autocommands for "*"
autocommand call s:Autocmd('TextChanged', +expand('<abuf>'), getbufvar(+expand('<abuf>'), 'changedtick'))

Executing TextChanged Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing CursorHold Autocommands for "*"
autocommand silent call CocActionAsync('highlight')

autocommand silent call CocActionAsync('highlight')

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing InsertEnter Autocommands for "*"
autocommand call s:Autocmd('InsertEnter', +expand('<abuf>'))

Executing InsertEnter Autocommands for "*"
autocommand call lexima#insmode#clear_stack()

autocommand call s:setup_insmode()

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing CursorHoldI Autocommands for "*"
autocommand call s:Autocmd('CursorHoldI', +expand('<abuf>'), [line('.'), col('.')])

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing InsertLeave Autocommands for "*"
autocommand call s:Autocmd('InsertLeave', +expand('<abuf>'))

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()


Executing BufWritePre Autocommands for "*"
autocommand call s:SyncAutocmd('BufWritePre', +expand('<abuf>'), bufname(+expand('<abuf>')), getbufvar(+expand('<abuf>'), 'changedtick'))

"index.cpp" 
"index.cpp" 39L, 666B written
Executing BufWritePost Autocommands for "*"
autocommand call s:Autocmd('BufWritePost', +expand('<abuf>'), getbufvar(+expand('<abuf>'), 'changedtick'))

Executing BufWritePost Autocommands for "*"
autocommand call s:reset_untracked_cache(0)

Executing BufWritePost Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing BufWritePost Autocommands for "*"
autocommand call s:mru_append(expand('<amatch>'))

autocommand call s:mrw_append(expand('<amatch>'))

"index.cpp" 39L, 666B written
Executing CursorHold Autocommands for "*"
autocommand silent call CocActionAsync('highlight')

autocommand silent call CocActionAsync('highlight')

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()


[coc.nvim] hover not found
[coc.nvim] hover not found
Executing CursorHold Autocommands for "*"
autocommand silent call CocActionAsync('highlight')

autocommand silent call CocActionAsync('highlight')

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorHold Autocommands for "*"
autocommand silent call CocActionAsync('highlight')

autocommand silent call CocActionAsync('highlight')

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing command: "'/usr/bin/pbcopy'"


Executing TextYankPost Autocommands for "*"
autocommand call highlightedyank#debounce()

Executing TextYankPost Autocommands for "*"
autocommand call coc#rpc#notify('doAutocmd', [2, v:event, +expand('<abuf>'), win_getid()])

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing command: "'/usr/bin/pbpaste'"


Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChanged Autocommands for "*"
autocommand call s:Autocmd('TextChanged', +expand('<abuf>'), getbufvar(+expand('<abuf>'), 'changedtick'))

Executing TextChanged Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing CursorHold Autocommands for "*"
autocommand silent call CocActionAsync('highlight')

autocommand silent call CocActionAsync('highlight')

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing command: "'/usr/bin/pbcopy'"


Executing TextYankPost Autocommands for "*"
autocommand call highlightedyank#debounce()

Executing TextYankPost Autocommands for "*"
autocommand call coc#rpc#notify('doAutocmd', [2, v:event, +expand('<abuf>'), win_getid()])

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChanged Autocommands for "*"
autocommand call s:Autocmd('TextChanged', +expand('<abuf>'), getbufvar(+expand('<abuf>'), 'changedtick'))

Executing TextChanged Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorHold Autocommands for "*"
autocommand silent call CocActionAsync('highlight')

autocommand silent call CocActionAsync('highlight')

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorHold Autocommands for "*"
autocommand silent call CocActionAsync('highlight')

autocommand silent call CocActionAsync('highlight')

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing InsertEnter Autocommands for "*"
autocommand call s:Autocmd('InsertEnter', +expand('<abuf>'))

Executing InsertEnter Autocommands for "*"
autocommand call lexima#insmode#clear_stack()

autocommand call s:setup_insmode()

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 5: sourcing "/opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax/cpp.vim"
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 16: sourcing "/opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax/c.vim"
finished sourcing /opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax/c.vim
continuing in /opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax/cpp.vim
finished sourcing /opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax/cpp.vim
continuing in coc#compat#execute
Executing CursorHoldI Autocommands for "*"
autocommand call s:Autocmd('CursorHoldI', +expand('<abuf>'), [line('.'), col('.')])

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing InsertLeave Autocommands for "*"
autocommand call s:Autocmd('InsertLeave', +expand('<abuf>'))

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing WinClosed Autocommands for "*"
autocommand call s:HandleWinClosed(+expand('<amatch>'))

Executing BufWinLeave Autocommands for "*"
autocommand call s:Autocmd('BufWinLeave', +expand('<abuf>'), bufwinid(+expand('<abuf>')))

Executing BufHidden Autocommands for "*"
autocommand call s:Autocmd('BufHidden', +expand('<abuf>'))

Executing WinClosed Autocommands for "*"
autocommand call s:HandleWinClosed(+expand('<amatch>'))

Executing BufWinLeave Autocommands for "*"
autocommand call s:Autocmd('BufWinLeave', +expand('<abuf>'), bufwinid(+expand('<abuf>')))

Executing BufHidden Autocommands for "*"
autocommand call s:Autocmd('BufHidden', +expand('<abuf>'))

Executing InsertEnter Autocommands for "*"
autocommand call s:Autocmd('InsertEnter', +expand('<abuf>'))

Executing InsertEnter Autocommands for "*"
autocommand call lexima#insmode#clear_stack()

autocommand call s:setup_insmode()

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing InsertLeave Autocommands for "*"
autocommand call s:Autocmd('InsertLeave', +expand('<abuf>'))

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChanged Autocommands for "*"
autocommand call s:Autocmd('TextChanged', +expand('<abuf>'), getbufvar(+expand('<abuf>'), 'changedtick'))

Executing TextChanged Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

E20: Mark not set
Executing CursorHold Autocommands for "*"
autocommand silent call CocActionAsync('highlight')

autocommand silent call CocActionAsync('highlight')

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()


Executing BufWritePre Autocommands for "*"
autocommand call s:SyncAutocmd('BufWritePre', +expand('<abuf>'), bufname(+expand('<abuf>')), getbufvar(+expand('<abuf>'), 'changedtick'))

"index.cpp" 
"index.cpp" 41L, 711B written
Executing BufWritePost Autocommands for "*"
autocommand call s:Autocmd('BufWritePost', +expand('<abuf>'), getbufvar(+expand('<abuf>'), 'changedtick'))

Executing BufWritePost Autocommands for "*"
autocommand call s:reset_untracked_cache(0)

Executing BufWritePost Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing BufWritePost Autocommands for "*"
autocommand call s:mru_append(expand('<amatch>'))

autocommand call s:mrw_append(expand('<amatch>'))

"index.cpp" 41L, 711B written
Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing command: "'/usr/bin/pbcopy'"


Executing TextYankPost Autocommands for "*"
autocommand call highlightedyank#debounce()

Executing TextYankPost Autocommands for "*"
autocommand call coc#rpc#notify('doAutocmd', [2, v:event, +expand('<abuf>'), win_getid()])

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChanged Autocommands for "*"
autocommand call s:Autocmd('TextChanged', +expand('<abuf>'), getbufvar(+expand('<abuf>'), 'changedtick'))

Executing TextChanged Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()


Executing BufWritePre Autocommands for "*"
autocommand call s:SyncAutocmd('BufWritePre', +expand('<abuf>'), bufname(+expand('<abuf>')), getbufvar(+expand('<abuf>'), 'changedtick'))

"index.cpp" 
"index.cpp" 40L, 710B written
Executing BufWritePost Autocommands for "*"
autocommand call s:Autocmd('BufWritePost', +expand('<abuf>'), getbufvar(+expand('<abuf>'), 'changedtick'))

Executing BufWritePost Autocommands for "*"
autocommand call s:reset_untracked_cache(0)

Executing BufWritePost Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing BufWritePost Autocommands for "*"
autocommand call s:mru_append(expand('<amatch>'))

autocommand call s:mrw_append(expand('<amatch>'))

"index.cpp" 40L, 710B written
Executing CursorHold Autocommands for "*"
autocommand silent call CocActionAsync('highlight')

autocommand silent call CocActionAsync('highlight')

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing InsertEnter Autocommands for "*"
autocommand call s:Autocmd('InsertEnter', +expand('<abuf>'))

Executing InsertEnter Autocommands for "*"
autocommand call lexima#insmode#clear_stack()

autocommand call s:setup_insmode()

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing InsertLeave Autocommands for "*"
autocommand call s:Autocmd('InsertLeave', +expand('<abuf>'))

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChanged Autocommands for "*"
autocommand call s:Autocmd('TextChanged', +expand('<abuf>'), getbufvar(+expand('<abuf>'), 'changedtick'))

Executing TextChanged Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()


Executing BufWritePre Autocommands for "*"
autocommand call s:SyncAutocmd('BufWritePre', +expand('<abuf>'), bufname(+expand('<abuf>')), getbufvar(+expand('<abuf>'), 'changedtick'))

"index.cpp" 
"index.cpp" 41L, 711B written
Executing BufWritePost Autocommands for "*"
autocommand call s:Autocmd('BufWritePost', +expand('<abuf>'), getbufvar(+expand('<abuf>'), 'changedtick'))

Executing BufWritePost Autocommands for "*"
autocommand call s:reset_untracked_cache(0)

Executing BufWritePost Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing BufWritePost Autocommands for "*"
autocommand call s:mru_append(expand('<amatch>'))

autocommand call s:mrw_append(expand('<amatch>'))

"index.cpp" 41L, 711B written
Executing CursorHold Autocommands for "*"
autocommand silent call CocActionAsync('highlight')

autocommand silent call CocActionAsync('highlight')

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing WinScrolled Autocommands for "*"
autocommand call s:HandleWinScrolled(+expand('<amatch>'))

Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing WinScrolled Autocommands for "*"
autocommand call s:HandleWinScrolled(+expand('<amatch>'))

Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorHold Autocommands for "*"
autocommand silent call CocActionAsync('highlight')

autocommand silent call CocActionAsync('highlight')

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing WinScrolled Autocommands for "*"
autocommand call s:HandleWinScrolled(+expand('<amatch>'))

Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing WinScrolled Autocommands for "*"
autocommand call s:HandleWinScrolled(+expand('<amatch>'))

Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorHold Autocommands for "*"
autocommand silent call CocActionAsync('highlight')

autocommand silent call CocActionAsync('highlight')

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing WinScrolled Autocommands for "*"
autocommand call s:HandleWinScrolled(+expand('<amatch>'))

Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorHold Autocommands for "*"
autocommand silent call CocActionAsync('highlight')

autocommand silent call CocActionAsync('highlight')

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorHold Autocommands for "*"
autocommand silent call CocActionAsync('highlight')

autocommand silent call CocActionAsync('highlight')

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorHold Autocommands for "*"
autocommand silent call CocActionAsync('highlight')

autocommand silent call CocActionAsync('highlight')

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing WinScrolled Autocommands for "*"
autocommand call s:HandleWinScrolled(+expand('<amatch>'))

Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorHold Autocommands for "*"
autocommand silent call CocActionAsync('highlight')

autocommand silent call CocActionAsync('highlight')

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing InsertEnter Autocommands for "*"
autocommand call s:Autocmd('InsertEnter', +expand('<abuf>'))

Executing InsertEnter Autocommands for "*"
autocommand call lexima#insmode#clear_stack()

autocommand call s:setup_insmode()

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing CursorHoldI Autocommands for "*"
autocommand call s:Autocmd('CursorHoldI', +expand('<abuf>'), [line('.'), col('.')])

Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing WinClosed Autocommands for "*"
autocommand call s:HandleWinClosed(+expand('<amatch>'))

Executing BufWinLeave Autocommands for "*"
autocommand call s:Autocmd('BufWinLeave', +expand('<abuf>'), bufwinid(+expand('<abuf>')))

Executing BufHidden Autocommands for "*"
autocommand call s:Autocmd('BufHidden', +expand('<abuf>'))

Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing WinClosed Autocommands for "*"
autocommand call s:HandleWinClosed(+expand('<amatch>'))

Executing BufWinLeave Autocommands for "*"
autocommand call s:Autocmd('BufWinLeave', +expand('<abuf>'), bufwinid(+expand('<abuf>')))

Executing BufHidden Autocommands for "*"
autocommand call s:Autocmd('BufHidden', +expand('<abuf>'))

Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 5: sourcing "/opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax/cpp.vim"
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 16: sourcing "/opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax/c.vim"
finished sourcing /opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax/c.vim
continuing in /opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax/cpp.vim
finished sourcing /opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax/cpp.vim
continuing in coc#compat#execute
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 5: sourcing "/opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax/cpp.vim"
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 16: sourcing "/opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax/c.vim"
finished sourcing /opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax/c.vim
continuing in /opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax/cpp.vim
finished sourcing /opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax/cpp.vim
continuing in coc#compat#execute
Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 5: sourcing "/opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax/cpp.vim"
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 16: sourcing "/opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax/c.vim"
finished sourcing /opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax/c.vim
continuing in /opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax/cpp.vim
finished sourcing /opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax/cpp.vim
continuing in coc#compat#execute
Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing WinClosed Autocommands for "*"
autocommand call s:HandleWinClosed(+expand('<amatch>'))

Executing BufWinLeave Autocommands for "*"
autocommand call s:Autocmd('BufWinLeave', +expand('<abuf>'), bufwinid(+expand('<abuf>')))

Executing BufHidden Autocommands for "*"
autocommand call s:Autocmd('BufHidden', +expand('<abuf>'))

Executing WinClosed Autocommands for "*"
autocommand call s:HandleWinClosed(+expand('<amatch>'))

Executing BufWinLeave Autocommands for "*"
autocommand call s:Autocmd('BufWinLeave', +expand('<abuf>'), bufwinid(+expand('<abuf>')))

Executing BufHidden Autocommands for "*"
autocommand call s:Autocmd('BufHidden', +expand('<abuf>'))

Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 5: sourcing "/opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax/cpp.vim"
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 16: sourcing "/opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax/c.vim"
finished sourcing /opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax/c.vim
continuing in /opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax/cpp.vim
finished sourcing /opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax/cpp.vim
continuing in coc#compat#execute
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 5: sourcing "/opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax/cpp.vim"
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 16: sourcing "/opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax/c.vim"
finished sourcing /opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax/c.vim
continuing in /opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax/cpp.vim
finished sourcing /opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax/cpp.vim
continuing in coc#compat#execute
Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 5: sourcing "/opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax/cpp.vim"
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 16: sourcing "/opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax/c.vim"
finished sourcing /opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax/c.vim
continuing in /opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax/cpp.vim
finished sourcing /opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax/cpp.vim
continuing in coc#compat#execute
Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 5: sourcing "/opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax/cpp.vim"
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 16: sourcing "/opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax/c.vim"
finished sourcing /opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax/c.vim
continuing in /opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax/cpp.vim
finished sourcing /opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax/cpp.vim
continuing in coc#compat#execute
Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing WinClosed Autocommands for "*"
autocommand call s:HandleWinClosed(+expand('<amatch>'))

Executing BufWinLeave Autocommands for "*"
autocommand call s:Autocmd('BufWinLeave', +expand('<abuf>'), bufwinid(+expand('<abuf>')))

Executing BufHidden Autocommands for "*"
autocommand call s:Autocmd('BufHidden', +expand('<abuf>'))

Executing WinClosed Autocommands for "*"
autocommand call s:HandleWinClosed(+expand('<amatch>'))

Executing BufWinLeave Autocommands for "*"
autocommand call s:Autocmd('BufWinLeave', +expand('<abuf>'), bufwinid(+expand('<abuf>')))

Executing BufHidden Autocommands for "*"
autocommand call s:Autocmd('BufHidden', +expand('<abuf>'))

Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing CursorHoldI Autocommands for "*"
autocommand call s:Autocmd('CursorHoldI', +expand('<abuf>'), [line('.'), col('.')])

not found in runtime path: "parser/comment.*"
Scanning tags.
Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

not found in runtime path: "parser/comment.*"
Executing CompleteChanged Autocommands for "*"
autocommand call coc#pum#stop()

Executing TextChangedP Autocommands for "*"
autocommand call s:Autocmd('TextChangedP', +expand('<abuf>'), coc#util#change_info())

Executing CompleteDone Autocommands for "*"
autocommand call <sid>on_window_changed('CompleteDone')

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing CursorHoldI Autocommands for "*"
autocommand call s:Autocmd('CursorHoldI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()


Executing BufWritePre Autocommands for "*"
autocommand call s:SyncAutocmd('BufWritePre', +expand('<abuf>'), bufname(+expand('<abuf>')), getbufvar(+expand('<abuf>'), 'changedtick'))

"index.cpp" 
"index.cpp" 42L, 728B written
Executing BufWritePost Autocommands for "*"
autocommand call s:Autocmd('BufWritePost', +expand('<abuf>'), getbufvar(+expand('<abuf>'), 'changedtick'))

Executing BufWritePost Autocommands for "*"
autocommand call s:reset_untracked_cache(0)

Executing BufWritePost Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing BufWritePost Autocommands for "*"
autocommand call s:mru_append(expand('<amatch>'))

autocommand call s:mrw_append(expand('<amatch>'))

"index.cpp" 42L, 728B written
Executing CursorHold Autocommands for "*"
autocommand silent call CocActionAsync('highlight')

autocommand silent call CocActionAsync('highlight')

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing command: "'/usr/bin/pbcopy'"


Executing TextYankPost Autocommands for "*"
autocommand call highlightedyank#debounce()

Executing TextYankPost Autocommands for "*"
autocommand call coc#rpc#notify('doAutocmd', [2, v:event, +expand('<abuf>'), win_getid()])

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorHold Autocommands for "*"
autocommand silent call CocActionAsync('highlight')

autocommand silent call CocActionAsync('highlight')

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing WinScrolled Autocommands for "*"
autocommand call s:HandleWinScrolled(+expand('<amatch>'))

Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing WinScrolled Autocommands for "*"
autocommand call s:HandleWinScrolled(+expand('<amatch>'))

Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorHold Autocommands for "*"
autocommand silent call CocActionAsync('highlight')

autocommand silent call CocActionAsync('highlight')

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing command: "'/usr/bin/pbpaste'"


Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChanged Autocommands for "*"
autocommand call s:Autocmd('TextChanged', +expand('<abuf>'), getbufvar(+expand('<abuf>'), 'changedtick'))

Executing TextChanged Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing CursorHold Autocommands for "*"
autocommand silent call CocActionAsync('highlight')

autocommand silent call CocActionAsync('highlight')

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChanged Autocommands for "*"
autocommand call s:Autocmd('TextChanged', +expand('<abuf>'), getbufvar(+expand('<abuf>'), 'changedtick'))

Executing TextChanged Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing InsertEnter Autocommands for "*"
autocommand call s:Autocmd('InsertEnter', +expand('<abuf>'))

Executing InsertEnter Autocommands for "*"
autocommand call lexima#insmode#clear_stack()

autocommand call s:setup_insmode()

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing WinClosed Autocommands for "*"
autocommand call s:HandleWinClosed(+expand('<amatch>'))

Executing BufWinLeave Autocommands for "*"
autocommand call s:Autocmd('BufWinLeave', +expand('<abuf>'), bufwinid(+expand('<abuf>')))

Executing BufHidden Autocommands for "*"
autocommand call s:Autocmd('BufHidden', +expand('<abuf>'))

Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 5: sourcing "/opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax/cpp.vim"
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 16: sourcing "/opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax/c.vim"
finished sourcing /opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax/c.vim
continuing in /opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax/cpp.vim
finished sourcing /opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax/cpp.vim
continuing in coc#compat#execute
Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing WinClosed Autocommands for "*"
autocommand call s:HandleWinClosed(+expand('<amatch>'))

Executing BufWinLeave Autocommands for "*"
autocommand call s:Autocmd('BufWinLeave', +expand('<abuf>'), bufwinid(+expand('<abuf>')))

Executing BufHidden Autocommands for "*"
autocommand call s:Autocmd('BufHidden', +expand('<abuf>'))

Executing WinClosed Autocommands for "*"
autocommand call s:HandleWinClosed(+expand('<amatch>'))

Executing BufWinLeave Autocommands for "*"
autocommand call s:Autocmd('BufWinLeave', +expand('<abuf>'), bufwinid(+expand('<abuf>')))

Executing BufHidden Autocommands for "*"
autocommand call s:Autocmd('BufHidden', +expand('<abuf>'))

Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 5: sourcing "/opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax/cpp.vim"
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 16: sourcing "/opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax/c.vim"
finished sourcing /opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax/c.vim
continuing in /opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax/cpp.vim
finished sourcing /opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax/cpp.vim
continuing in coc#compat#execute
Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing WinClosed Autocommands for "*"
autocommand call s:HandleWinClosed(+expand('<amatch>'))

Executing BufWinLeave Autocommands for "*"
autocommand call s:Autocmd('BufWinLeave', +expand('<abuf>'), bufwinid(+expand('<abuf>')))

Executing BufHidden Autocommands for "*"
autocommand call s:Autocmd('BufHidden', +expand('<abuf>'))

Executing WinClosed Autocommands for "*"
autocommand call s:HandleWinClosed(+expand('<amatch>'))

Executing BufWinLeave Autocommands for "*"
autocommand call s:Autocmd('BufWinLeave', +expand('<abuf>'), bufwinid(+expand('<abuf>')))

Executing BufHidden Autocommands for "*"
autocommand call s:Autocmd('BufHidden', +expand('<abuf>'))

Executing CursorHoldI Autocommands for "*"
autocommand call s:Autocmd('CursorHoldI', +expand('<abuf>'), [line('.'), col('.')])

Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()


Executing BufWritePre Autocommands for "*"
autocommand call s:SyncAutocmd('BufWritePre', +expand('<abuf>'), bufname(+expand('<abuf>')), getbufvar(+expand('<abuf>'), 'changedtick'))

"index.cpp" 
"index.cpp" 43L, 753B written
Executing BufWritePost Autocommands for "*"
autocommand call s:Autocmd('BufWritePost', +expand('<abuf>'), getbufvar(+expand('<abuf>'), 'changedtick'))

Executing BufWritePost Autocommands for "*"
autocommand call s:reset_untracked_cache(0)

Executing BufWritePost Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing BufWritePost Autocommands for "*"
autocommand call s:mru_append(expand('<amatch>'))

autocommand call s:mrw_append(expand('<amatch>'))

"index.cpp" 43L, 753B written
Executing CursorHold Autocommands for "*"
autocommand silent call CocActionAsync('highlight')

autocommand silent call CocActionAsync('highlight')

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorHold Autocommands for "*"
autocommand silent call CocActionAsync('highlight')

autocommand silent call CocActionAsync('highlight')

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing WinScrolled Autocommands for "*"
autocommand call s:HandleWinScrolled(+expand('<amatch>'))

Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorHold Autocommands for "*"
autocommand silent call CocActionAsync('highlight')

autocommand silent call CocActionAsync('highlight')

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing InsertEnter Autocommands for "*"
autocommand call s:Autocmd('InsertEnter', +expand('<abuf>'))

Executing InsertEnter Autocommands for "*"
autocommand call lexima#insmode#clear_stack()

autocommand call s:setup_insmode()

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing CursorHoldI Autocommands for "*"
autocommand call s:Autocmd('CursorHoldI', +expand('<abuf>'), [line('.'), col('.')])

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing InsertLeave Autocommands for "*"
autocommand call s:Autocmd('InsertLeave', +expand('<abuf>'))

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorHold Autocommands for "*"
autocommand silent call CocActionAsync('highlight')

autocommand silent call CocActionAsync('highlight')

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing InsertEnter Autocommands for "*"
autocommand call s:Autocmd('InsertEnter', +expand('<abuf>'))

Executing InsertEnter Autocommands for "*"
autocommand call lexima#insmode#clear_stack()

autocommand call s:setup_insmode()

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing CursorHoldI Autocommands for "*"
autocommand call s:Autocmd('CursorHoldI', +expand('<abuf>'), [line('.'), col('.')])

Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Error detected while processing function coc#pum#_close[2]..<SNR>189_close_pum[2]..coc#float#close[1]..coc#float#close_related:
line   19:
E5555: API call: Invalid window id: 1161
Executing WinClosed Autocommands for "*"
autocommand call s:HandleWinClosed(+expand('<amatch>'))

Executing BufWinLeave Autocommands for "*"
autocommand call s:Autocmd('BufWinLeave', +expand('<abuf>'), bufwinid(+expand('<abuf>')))

Executing BufHidden Autocommands for "*"
autocommand call s:Autocmd('BufHidden', +expand('<abuf>'))

Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing CursorHoldI Autocommands for "*"
autocommand call s:Autocmd('CursorHoldI', +expand('<abuf>'), [line('.'), col('.')])

Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing WinClosed Autocommands for "*"
autocommand call s:HandleWinClosed(+expand('<amatch>'))

Executing BufWinLeave Autocommands for "*"
autocommand call s:Autocmd('BufWinLeave', +expand('<abuf>'), bufwinid(+expand('<abuf>')))

Executing BufHidden Autocommands for "*"
autocommand call s:Autocmd('BufHidden', +expand('<abuf>'))

Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing WinClosed Autocommands for "*"
autocommand call s:HandleWinClosed(+expand('<amatch>'))

Executing BufWinLeave Autocommands for "*"
autocommand call s:Autocmd('BufWinLeave', +expand('<abuf>'), bufwinid(+expand('<abuf>')))

Executing BufHidden Autocommands for "*"
autocommand call s:Autocmd('BufHidden', +expand('<abuf>'))

Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing CursorHoldI Autocommands for "*"
autocommand call s:Autocmd('CursorHoldI', +expand('<abuf>'), [line('.'), col('.')])

Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing WinClosed Autocommands for "*"
autocommand call s:HandleWinClosed(+expand('<amatch>'))

Executing BufWinLeave Autocommands for "*"
autocommand call s:Autocmd('BufWinLeave', +expand('<abuf>'), bufwinid(+expand('<abuf>')))

Executing BufHidden Autocommands for "*"
autocommand call s:Autocmd('BufHidden', +expand('<abuf>'))

Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing CursorHoldI Autocommands for "*"
autocommand call s:Autocmd('CursorHoldI', +expand('<abuf>'), [line('.'), col('.')])

Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing WinClosed Autocommands for "*"
autocommand call s:HandleWinClosed(+expand('<amatch>'))

Executing BufWinLeave Autocommands for "*"
autocommand call s:Autocmd('BufWinLeave', +expand('<abuf>'), bufwinid(+expand('<abuf>')))

Executing BufHidden Autocommands for "*"
autocommand call s:Autocmd('BufHidden', +expand('<abuf>'))

Executing WinClosed Autocommands for "*"
autocommand call s:HandleWinClosed(+expand('<amatch>'))

Executing BufWinLeave Autocommands for "*"
autocommand call s:Autocmd('BufWinLeave', +expand('<abuf>'), bufwinid(+expand('<abuf>')))

Executing BufHidden Autocommands for "*"
autocommand call s:Autocmd('BufHidden', +expand('<abuf>'))

Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing CursorHoldI Autocommands for "*"
autocommand call s:Autocmd('CursorHoldI', +expand('<abuf>'), [line('.'), col('.')])

Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 5: sourcing "/opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax/cpp.vim"
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 16: sourcing "/opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax/c.vim"
finished sourcing /opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax/c.vim
continuing in /opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax/cpp.vim
finished sourcing /opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax/cpp.vim
continuing in coc#compat#execute
Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 5: sourcing "/opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax/cpp.vim"
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 16: sourcing "/opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax/c.vim"
finished sourcing /opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax/c.vim
continuing in /opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax/cpp.vim
finished sourcing /opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax/cpp.vim
continuing in coc#compat#execute
Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 5: sourcing "/opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax/cpp.vim"
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 16: sourcing "/opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax/c.vim"
finished sourcing /opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax/c.vim
continuing in /opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax/cpp.vim
finished sourcing /opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax/cpp.vim
continuing in coc#compat#execute
Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing WinClosed Autocommands for "*"
autocommand call s:HandleWinClosed(+expand('<amatch>'))

Executing BufWinLeave Autocommands for "*"
autocommand call s:Autocmd('BufWinLeave', +expand('<abuf>'), bufwinid(+expand('<abuf>')))

Executing BufHidden Autocommands for "*"
autocommand call s:Autocmd('BufHidden', +expand('<abuf>'))

Executing WinClosed Autocommands for "*"
autocommand call s:HandleWinClosed(+expand('<amatch>'))

Executing BufWinLeave Autocommands for "*"
autocommand call s:Autocmd('BufWinLeave', +expand('<abuf>'), bufwinid(+expand('<abuf>')))

Executing BufHidden Autocommands for "*"
autocommand call s:Autocmd('BufHidden', +expand('<abuf>'))

Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing WinClosed Autocommands for "*"
autocommand call s:HandleWinClosed(+expand('<amatch>'))

Executing BufWinLeave Autocommands for "*"
autocommand call s:Autocmd('BufWinLeave', +expand('<abuf>'), bufwinid(+expand('<abuf>')))

Executing BufHidden Autocommands for "*"
autocommand call s:Autocmd('BufHidden', +expand('<abuf>'))

Executing WinClosed Autocommands for "*"
autocommand call s:HandleWinClosed(+expand('<amatch>'))

Executing BufWinLeave Autocommands for "*"
autocommand call s:Autocmd('BufWinLeave', +expand('<abuf>'), bufwinid(+expand('<abuf>')))

Executing BufHidden Autocommands for "*"
autocommand call s:Autocmd('BufHidden', +expand('<abuf>'))

Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing InsertLeave Autocommands for "*"
autocommand call s:Autocmd('InsertLeave', +expand('<abuf>'))

Executing InsertEnter Autocommands for "*"
autocommand call s:Autocmd('InsertEnter', +expand('<abuf>'))

Executing InsertEnter Autocommands for "*"
autocommand call lexima#insmode#clear_stack()

autocommand call s:setup_insmode()

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing InsertLeave Autocommands for "*"
autocommand call s:Autocmd('InsertLeave', +expand('<abuf>'))

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChanged Autocommands for "*"
autocommand call s:Autocmd('TextChanged', +expand('<abuf>'), getbufvar(+expand('<abuf>'), 'changedtick'))

Executing TextChanged Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing WinScrolled Autocommands for "*"
autocommand call s:HandleWinScrolled(+expand('<amatch>'))

Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing WinScrolled Autocommands for "*"
autocommand call s:HandleWinScrolled(+expand('<amatch>'))

Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing WinScrolled Autocommands for "*"
autocommand call s:HandleWinScrolled(+expand('<amatch>'))

Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorHold Autocommands for "*"
autocommand silent call CocActionAsync('highlight')

autocommand silent call CocActionAsync('highlight')

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

3 lines yanked
Executing command: "'/usr/bin/pbcopy'"


Executing TextYankPost Autocommands for "*"
autocommand call highlightedyank#debounce()

Executing TextYankPost Autocommands for "*"
autocommand call coc#rpc#notify('doAutocmd', [2, v:event, +expand('<abuf>'), win_getid()])

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorHold Autocommands for "*"
autocommand silent call CocActionAsync('highlight')

autocommand silent call CocActionAsync('highlight')

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing command: "'/usr/bin/pbpaste'"


Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChanged Autocommands for "*"
autocommand call s:Autocmd('TextChanged', +expand('<abuf>'), getbufvar(+expand('<abuf>'), 'changedtick'))

Executing TextChanged Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing CursorHold Autocommands for "*"
autocommand silent call CocActionAsync('highlight')

autocommand silent call CocActionAsync('highlight')

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

3 lines >ed 1 time
Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChanged Autocommands for "*"
autocommand call s:Autocmd('TextChanged', +expand('<abuf>'), getbufvar(+expand('<abuf>'), 'changedtick'))

Executing TextChanged Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
3 lines >ed 1 time
Executing CursorHold Autocommands for "*"
autocommand silent call CocActionAsync('highlight')

autocommand silent call CocActionAsync('highlight')

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorHold Autocommands for "*"
autocommand silent call CocActionAsync('highlight')

autocommand silent call CocActionAsync('highlight')

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing command: "'/usr/bin/pbcopy'"


Executing TextYankPost Autocommands for "*"
autocommand call highlightedyank#debounce()

Executing TextYankPost Autocommands for "*"
autocommand call coc#rpc#notify('doAutocmd', [2, v:event, +expand('<abuf>'), win_getid()])

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChanged Autocommands for "*"
autocommand call s:Autocmd('TextChanged', +expand('<abuf>'), getbufvar(+expand('<abuf>'), 'changedtick'))

Executing TextChanged Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorHold Autocommands for "*"
autocommand silent call CocActionAsync('highlight')

autocommand silent call CocActionAsync('highlight')

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing WinScrolled Autocommands for "*"
autocommand call s:HandleWinScrolled(+expand('<amatch>'))

Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorHold Autocommands for "*"
autocommand silent call CocActionAsync('highlight')

autocommand silent call CocActionAsync('highlight')

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing WinScrolled Autocommands for "*"
autocommand call s:HandleWinScrolled(+expand('<amatch>'))

Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorHold Autocommands for "*"
autocommand silent call CocActionAsync('highlight')

autocommand silent call CocActionAsync('highlight')

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorHold Autocommands for "*"
autocommand silent call CocActionAsync('highlight')

autocommand silent call CocActionAsync('highlight')

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorHold Autocommands for "*"
autocommand silent call CocActionAsync('highlight')

autocommand silent call CocActionAsync('highlight')

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorHold Autocommands for "*"
autocommand silent call CocActionAsync('highlight')

autocommand silent call CocActionAsync('highlight')

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChanged Autocommands for "*"
autocommand call s:Autocmd('TextChanged', +expand('<abuf>'), getbufvar(+expand('<abuf>'), 'changedtick'))

Executing TextChanged Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing WinScrolled Autocommands for "*"
autocommand call s:HandleWinScrolled(+expand('<amatch>'))

Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorHold Autocommands for "*"
autocommand silent call CocActionAsync('highlight')

autocommand silent call CocActionAsync('highlight')

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorHold Autocommands for "*"
autocommand silent call CocActionAsync('highlight')

autocommand silent call CocActionAsync('highlight')

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorHold Autocommands for "*"
autocommand silent call CocActionAsync('highlight')

autocommand silent call CocActionAsync('highlight')

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorHold Autocommands for "*"
autocommand silent call CocActionAsync('highlight')

autocommand silent call CocActionAsync('highlight')

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorHold Autocommands for "*"
autocommand silent call CocActionAsync('highlight')

autocommand silent call CocActionAsync('highlight')

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing command: "'/usr/bin/pbcopy'"


Executing TextYankPost Autocommands for "*"
autocommand call highlightedyank#debounce()

Executing TextYankPost Autocommands for "*"
autocommand call coc#rpc#notify('doAutocmd', [2, v:event, +expand('<abuf>'), win_getid()])

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing command: "'/usr/bin/pbpaste'"


Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChanged Autocommands for "*"
autocommand call s:Autocmd('TextChanged', +expand('<abuf>'), getbufvar(+expand('<abuf>'), 'changedtick'))

Executing TextChanged Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChanged Autocommands for "*"
autocommand call s:_doautocmd('highlightedyank-highlight', 'TextChanged', '*')

not found in runtime path: "parser/comment.*"
Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorHold Autocommands for "*"
autocommand silent call CocActionAsync('highlight')

autocommand silent call CocActionAsync('highlight')

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorHold Autocommands for "*"
autocommand silent call CocActionAsync('highlight')

autocommand silent call CocActionAsync('highlight')

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorHold Autocommands for "*"
autocommand silent call CocActionAsync('highlight')

autocommand silent call CocActionAsync('highlight')

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChanged Autocommands for "*"
autocommand call s:Autocmd('TextChanged', +expand('<abuf>'), getbufvar(+expand('<abuf>'), 'changedtick'))

Executing TextChanged Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing CursorHold Autocommands for "*"
autocommand silent call CocActionAsync('highlight')

autocommand silent call CocActionAsync('highlight')

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()


Executing BufWritePre Autocommands for "*"
autocommand call s:SyncAutocmd('BufWritePre', +expand('<abuf>'), bufname(+expand('<abuf>')), getbufvar(+expand('<abuf>'), 'changedtick'))

"index.cpp" 
"index.cpp" 48L, 788B written
Executing BufWritePost Autocommands for "*"
autocommand call s:Autocmd('BufWritePost', +expand('<abuf>'), getbufvar(+expand('<abuf>'), 'changedtick'))

Executing BufWritePost Autocommands for "*"
autocommand call s:reset_untracked_cache(0)

Executing BufWritePost Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing BufWritePost Autocommands for "*"
autocommand call s:mru_append(expand('<amatch>'))

autocommand call s:mrw_append(expand('<amatch>'))

"index.cpp" 48L, 788B written
Executing CursorHold Autocommands for "*"
autocommand silent call CocActionAsync('highlight')

autocommand silent call CocActionAsync('highlight')

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorHold Autocommands for "*"
autocommand silent call CocActionAsync('highlight')

autocommand silent call CocActionAsync('highlight')

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorHold Autocommands for "*"
autocommand silent call CocActionAsync('highlight')

autocommand silent call CocActionAsync('highlight')

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()


Executing BufWritePre Autocommands for "*"
autocommand call s:SyncAutocmd('BufWritePre', +expand('<abuf>'), bufname(+expand('<abuf>')), getbufvar(+expand('<abuf>'), 'changedtick'))

"index.cpp" 
"index.cpp" 48L, 788B written
Executing BufWritePost Autocommands for "*"
autocommand call s:Autocmd('BufWritePost', +expand('<abuf>'), getbufvar(+expand('<abuf>'), 'changedtick'))

Executing BufWritePost Autocommands for "*"
autocommand call s:reset_untracked_cache(0)

Executing BufWritePost Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing BufWritePost Autocommands for "*"
autocommand call s:mru_append(expand('<amatch>'))

autocommand call s:mrw_append(expand('<amatch>'))

"index.cpp" 48L, 788B written
Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing WinScrolled Autocommands for "*"
autocommand call s:HandleWinScrolled(+expand('<amatch>'))

Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorHold Autocommands for "*"
autocommand silent call CocActionAsync('highlight')

autocommand silent call CocActionAsync('highlight')

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorHold Autocommands for "*"
autocommand silent call CocActionAsync('highlight')

autocommand silent call CocActionAsync('highlight')

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing InsertEnter Autocommands for "*"
autocommand call s:Autocmd('InsertEnter', +expand('<abuf>'))

Executing InsertEnter Autocommands for "*"
autocommand call lexima#insmode#clear_stack()

autocommand call s:setup_insmode()

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing CursorHoldI Autocommands for "*"
autocommand call s:Autocmd('CursorHoldI', +expand('<abuf>'), [line('.'), col('.')])

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing InsertLeave Autocommands for "*"
autocommand call s:Autocmd('InsertLeave', +expand('<abuf>'))

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorHold Autocommands for "*"
autocommand silent call CocActionAsync('highlight')

autocommand silent call CocActionAsync('highlight')

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorHold Autocommands for "*"
autocommand silent call CocActionAsync('highlight')

autocommand silent call CocActionAsync('highlight')

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorHold Autocommands for "*"
autocommand silent call CocActionAsync('highlight')

autocommand silent call CocActionAsync('highlight')

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorHold Autocommands for "*"
autocommand silent call CocActionAsync('highlight')

autocommand silent call CocActionAsync('highlight')

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing InsertEnter Autocommands for "*"
autocommand call s:Autocmd('InsertEnter', +expand('<abuf>'))

Executing InsertEnter Autocommands for "*"
autocommand call lexima#insmode#clear_stack()

autocommand call s:setup_insmode()

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing CursorHoldI Autocommands for "*"
autocommand call s:Autocmd('CursorHoldI', +expand('<abuf>'), [line('.'), col('.')])

Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing CursorHoldI Autocommands for "*"
autocommand call s:Autocmd('CursorHoldI', +expand('<abuf>'), [line('.'), col('.')])

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing InsertLeave Autocommands for "*"
autocommand call s:Autocmd('InsertLeave', +expand('<abuf>'))

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorHold Autocommands for "*"
autocommand silent call CocActionAsync('highlight')

autocommand silent call CocActionAsync('highlight')

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorHold Autocommands for "*"
autocommand silent call CocActionAsync('highlight')

autocommand silent call CocActionAsync('highlight')

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorHold Autocommands for "*"
autocommand silent call CocActionAsync('highlight')

autocommand silent call CocActionAsync('highlight')

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorHold Autocommands for "*"
autocommand silent call CocActionAsync('highlight')

autocommand silent call CocActionAsync('highlight')

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChanged Autocommands for "*"
autocommand call s:Autocmd('TextChanged', +expand('<abuf>'), getbufvar(+expand('<abuf>'), 'changedtick'))

Executing TextChanged Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing CursorHold Autocommands for "*"
autocommand silent call CocActionAsync('highlight')

autocommand silent call CocActionAsync('highlight')

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()


Executing BufWritePre Autocommands for "*"
autocommand call s:SyncAutocmd('BufWritePre', +expand('<abuf>'), bufname(+expand('<abuf>')), getbufvar(+expand('<abuf>'), 'changedtick'))

"index.cpp" 
"index.cpp" 48L, 792B written
Executing BufWritePost Autocommands for "*"
autocommand call s:Autocmd('BufWritePost', +expand('<abuf>'), getbufvar(+expand('<abuf>'), 'changedtick'))

Executing BufWritePost Autocommands for "*"
autocommand call s:reset_untracked_cache(0)

Executing BufWritePost Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing BufWritePost Autocommands for "*"
autocommand call s:mru_append(expand('<amatch>'))

autocommand call s:mrw_append(expand('<amatch>'))

"index.cpp" 48L, 792B written
Executing CursorHold Autocommands for "*"
autocommand silent call CocActionAsync('highlight')

autocommand silent call CocActionAsync('highlight')

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorHold Autocommands for "*"
autocommand silent call CocActionAsync('highlight')

autocommand silent call CocActionAsync('highlight')

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorHold Autocommands for "*"
autocommand silent call CocActionAsync('highlight')

autocommand silent call CocActionAsync('highlight')

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorHold Autocommands for "*"
autocommand silent call CocActionAsync('highlight')

autocommand silent call CocActionAsync('highlight')

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorHold Autocommands for "*"
autocommand silent call CocActionAsync('highlight')

autocommand silent call CocActionAsync('highlight')

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorHold Autocommands for "*"
autocommand silent call CocActionAsync('highlight')

autocommand silent call CocActionAsync('highlight')

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorHold Autocommands for "*"
autocommand silent call CocActionAsync('highlight')

autocommand silent call CocActionAsync('highlight')

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing command: "'/usr/bin/pbcopy'"


Executing TextYankPost Autocommands for "*"
autocommand call highlightedyank#debounce()

Executing TextYankPost Autocommands for "*"
autocommand call coc#rpc#notify('doAutocmd', [2, v:event, +expand('<abuf>'), win_getid()])

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChanged Autocommands for "*"
autocommand call s:Autocmd('TextChanged', +expand('<abuf>'), getbufvar(+expand('<abuf>'), 'changedtick'))

Executing TextChanged Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorHold Autocommands for "*"
autocommand silent call CocActionAsync('highlight')

autocommand silent call CocActionAsync('highlight')

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing command: "'/usr/bin/pbcopy'"


Executing TextYankPost Autocommands for "*"
autocommand call highlightedyank#debounce()

Executing TextYankPost Autocommands for "*"
autocommand call coc#rpc#notify('doAutocmd', [2, v:event, +expand('<abuf>'), win_getid()])

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChanged Autocommands for "*"
autocommand call s:Autocmd('TextChanged', +expand('<abuf>'), getbufvar(+expand('<abuf>'), 'changedtick'))

Executing TextChanged Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing InsertEnter Autocommands for "*"
autocommand call s:Autocmd('InsertEnter', +expand('<abuf>'))

Executing InsertEnter Autocommands for "*"
autocommand call lexima#insmode#clear_stack()

autocommand call s:setup_insmode()

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing WinClosed Autocommands for "*"
autocommand call s:HandleWinClosed(+expand('<amatch>'))

Executing BufWinLeave Autocommands for "*"
autocommand call s:Autocmd('BufWinLeave', +expand('<abuf>'), bufwinid(+expand('<abuf>')))

Executing BufHidden Autocommands for "*"
autocommand call s:Autocmd('BufHidden', +expand('<abuf>'))

Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Error detected while processing function coc#pum#close_detail[3]..coc#float#close[1]..coc#float#close_related:
line   19:
E5555: API call: Invalid window id: 1183
Executing WinClosed Autocommands for "*"
autocommand call s:HandleWinClosed(+expand('<amatch>'))

Executing BufWinLeave Autocommands for "*"
autocommand call s:Autocmd('BufWinLeave', +expand('<abuf>'), bufwinid(+expand('<abuf>')))

Executing BufHidden Autocommands for "*"
autocommand call s:Autocmd('BufHidden', +expand('<abuf>'))

Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing WinClosed Autocommands for "*"
autocommand call s:HandleWinClosed(+expand('<amatch>'))

Executing BufWinLeave Autocommands for "*"
autocommand call s:Autocmd('BufWinLeave', +expand('<abuf>'), bufwinid(+expand('<abuf>')))

Executing BufHidden Autocommands for "*"
autocommand call s:Autocmd('BufHidden', +expand('<abuf>'))

Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing WinClosed Autocommands for "*"
autocommand call s:HandleWinClosed(+expand('<amatch>'))

Executing BufWinLeave Autocommands for "*"
autocommand call s:Autocmd('BufWinLeave', +expand('<abuf>'), bufwinid(+expand('<abuf>')))

Executing BufHidden Autocommands for "*"
autocommand call s:Autocmd('BufHidden', +expand('<abuf>'))

Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing CursorHoldI Autocommands for "*"
autocommand call s:Autocmd('CursorHoldI', +expand('<abuf>'), [line('.'), col('.')])

Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing WinClosed Autocommands for "*"
autocommand call s:HandleWinClosed(+expand('<amatch>'))

Executing BufWinLeave Autocommands for "*"
autocommand call s:Autocmd('BufWinLeave', +expand('<abuf>'), bufwinid(+expand('<abuf>')))

Executing BufHidden Autocommands for "*"
autocommand call s:Autocmd('BufHidden', +expand('<abuf>'))

Executing CursorHoldI Autocommands for "*"
autocommand call s:Autocmd('CursorHoldI', +expand('<abuf>'), [line('.'), col('.')])

Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing CursorHoldI Autocommands for "*"
autocommand call s:Autocmd('CursorHoldI', +expand('<abuf>'), [line('.'), col('.')])

Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing WinClosed Autocommands for "*"
autocommand call s:HandleWinClosed(+expand('<amatch>'))

Executing BufWinLeave Autocommands for "*"
autocommand call s:Autocmd('BufWinLeave', +expand('<abuf>'), bufwinid(+expand('<abuf>')))

Executing BufHidden Autocommands for "*"
autocommand call s:Autocmd('BufHidden', +expand('<abuf>'))

Executing WinClosed Autocommands for "*"
autocommand call s:HandleWinClosed(+expand('<amatch>'))

Executing BufWinLeave Autocommands for "*"
autocommand call s:Autocmd('BufWinLeave', +expand('<abuf>'), bufwinid(+expand('<abuf>')))

Executing BufHidden Autocommands for "*"
autocommand call s:Autocmd('BufHidden', +expand('<abuf>'))

Executing CursorHoldI Autocommands for "*"
autocommand call s:Autocmd('CursorHoldI', +expand('<abuf>'), [line('.'), col('.')])

Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing CursorHoldI Autocommands for "*"
autocommand call s:Autocmd('CursorHoldI', +expand('<abuf>'), [line('.'), col('.')])

Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing WinClosed Autocommands for "*"
autocommand call s:HandleWinClosed(+expand('<amatch>'))

Executing BufWinLeave Autocommands for "*"
autocommand call s:Autocmd('BufWinLeave', +expand('<abuf>'), bufwinid(+expand('<abuf>')))

Executing BufHidden Autocommands for "*"
autocommand call s:Autocmd('BufHidden', +expand('<abuf>'))

Executing WinClosed Autocommands for "*"
autocommand call s:HandleWinClosed(+expand('<amatch>'))

Executing BufWinLeave Autocommands for "*"
autocommand call s:Autocmd('BufWinLeave', +expand('<abuf>'), bufwinid(+expand('<abuf>')))

Executing BufHidden Autocommands for "*"
autocommand call s:Autocmd('BufHidden', +expand('<abuf>'))

Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing CursorHoldI Autocommands for "*"
autocommand call s:Autocmd('CursorHoldI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing InsertLeave Autocommands for "*"
autocommand call s:Autocmd('InsertLeave', +expand('<abuf>'))

Executing InsertEnter Autocommands for "*"
autocommand call s:Autocmd('InsertEnter', +expand('<abuf>'))

Executing InsertEnter Autocommands for "*"
autocommand call lexima#insmode#clear_stack()

autocommand call s:setup_insmode()

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing InsertLeave Autocommands for "*"
autocommand call s:Autocmd('InsertLeave', +expand('<abuf>'))

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChanged Autocommands for "*"
autocommand call s:Autocmd('TextChanged', +expand('<abuf>'), getbufvar(+expand('<abuf>'), 'changedtick'))

Executing TextChanged Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing CursorHold Autocommands for "*"
autocommand silent call CocActionAsync('highlight')

autocommand silent call CocActionAsync('highlight')

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorHold Autocommands for "*"
autocommand silent call CocActionAsync('highlight')

autocommand silent call CocActionAsync('highlight')

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

3 lines yanked
Executing command: "'/usr/bin/pbcopy'"


Executing TextYankPost Autocommands for "*"
autocommand call highlightedyank#debounce()

Executing TextYankPost Autocommands for "*"
autocommand call coc#rpc#notify('doAutocmd', [2, v:event, +expand('<abuf>'), win_getid()])

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorHold Autocommands for "*"
autocommand silent call CocActionAsync('highlight')

autocommand silent call CocActionAsync('highlight')

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing command: "'/usr/bin/pbpaste'"


Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChanged Autocommands for "*"
autocommand call s:Autocmd('TextChanged', +expand('<abuf>'), getbufvar(+expand('<abuf>'), 'changedtick'))

Executing TextChanged Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing CursorHold Autocommands for "*"
autocommand silent call CocActionAsync('highlight')

autocommand silent call CocActionAsync('highlight')

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

3 lines >ed 1 time
Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChanged Autocommands for "*"
autocommand call s:Autocmd('TextChanged', +expand('<abuf>'), getbufvar(+expand('<abuf>'), 'changedtick'))

Executing TextChanged Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
3 lines >ed 1 time
Executing CursorHold Autocommands for "*"
autocommand silent call CocActionAsync('highlight')

autocommand silent call CocActionAsync('highlight')

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing command: "'/usr/bin/pbcopy'"


Executing TextYankPost Autocommands for "*"
autocommand call highlightedyank#debounce()

Executing TextYankPost Autocommands for "*"
autocommand call coc#rpc#notify('doAutocmd', [2, v:event, +expand('<abuf>'), win_getid()])

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChanged Autocommands for "*"
autocommand call s:Autocmd('TextChanged', +expand('<abuf>'), getbufvar(+expand('<abuf>'), 'changedtick'))

Executing TextChanged Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorHold Autocommands for "*"
autocommand silent call CocActionAsync('highlight')

autocommand silent call CocActionAsync('highlight')

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorHold Autocommands for "*"
autocommand silent call CocActionAsync('highlight')

autocommand silent call CocActionAsync('highlight')

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChanged Autocommands for "*"
autocommand call s:Autocmd('TextChanged', +expand('<abuf>'), getbufvar(+expand('<abuf>'), 'changedtick'))

Executing TextChanged Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing CursorHold Autocommands for "*"
autocommand silent call CocActionAsync('highlight')

autocommand silent call CocActionAsync('highlight')

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorHold Autocommands for "*"
autocommand silent call CocActionAsync('highlight')

autocommand silent call CocActionAsync('highlight')

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChanged Autocommands for "*"
autocommand call s:Autocmd('TextChanged', +expand('<abuf>'), getbufvar(+expand('<abuf>'), 'changedtick'))

Executing TextChanged Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorHold Autocommands for "*"
autocommand silent call CocActionAsync('highlight')

autocommand silent call CocActionAsync('highlight')

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChanged Autocommands for "*"
autocommand call s:Autocmd('TextChanged', +expand('<abuf>'), getbufvar(+expand('<abuf>'), 'changedtick'))

Executing TextChanged Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()


Executing BufWritePre Autocommands for "*"
autocommand call s:SyncAutocmd('BufWritePre', +expand('<abuf>'), bufname(+expand('<abuf>')), getbufvar(+expand('<abuf>'), 'changedtick'))

"index.cpp" 
"index.cpp" 48L, 818B written
Executing BufWritePost Autocommands for "*"
autocommand call s:Autocmd('BufWritePost', +expand('<abuf>'), getbufvar(+expand('<abuf>'), 'changedtick'))

Executing BufWritePost Autocommands for "*"
autocommand call s:reset_untracked_cache(0)

Executing BufWritePost Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing BufWritePost Autocommands for "*"
autocommand call s:mru_append(expand('<amatch>'))

autocommand call s:mrw_append(expand('<amatch>'))

"index.cpp" 48L, 818B written
Executing CursorHold Autocommands for "*"
autocommand silent call CocActionAsync('highlight')

autocommand silent call CocActionAsync('highlight')

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorHold Autocommands for "*"
autocommand silent call CocActionAsync('highlight')

autocommand silent call CocActionAsync('highlight')

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorHold Autocommands for "*"
autocommand silent call CocActionAsync('highlight')

autocommand silent call CocActionAsync('highlight')

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing InsertEnter Autocommands for "*"
autocommand call s:Autocmd('InsertEnter', +expand('<abuf>'))

Executing InsertEnter Autocommands for "*"
autocommand call lexima#insmode#clear_stack()

autocommand call s:setup_insmode()

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing CursorHoldI Autocommands for "*"
autocommand call s:Autocmd('CursorHoldI', +expand('<abuf>'), [line('.'), col('.')])

Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing CursorHoldI Autocommands for "*"
autocommand call s:Autocmd('CursorHoldI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing WinClosed Autocommands for "*"
autocommand call s:HandleWinClosed(+expand('<amatch>'))

Executing BufWinLeave Autocommands for "*"
autocommand call s:Autocmd('BufWinLeave', +expand('<abuf>'), bufwinid(+expand('<abuf>')))

Executing BufHidden Autocommands for "*"
autocommand call s:Autocmd('BufHidden', +expand('<abuf>'))

Executing WinClosed Autocommands for "*"
autocommand call s:HandleWinClosed(+expand('<amatch>'))

Executing BufWinLeave Autocommands for "*"
autocommand call s:Autocmd('BufWinLeave', +expand('<abuf>'), bufwinid(+expand('<abuf>')))

Executing BufHidden Autocommands for "*"
autocommand call s:Autocmd('BufHidden', +expand('<abuf>'))

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()


Executing BufWritePre Autocommands for "*"
autocommand call s:SyncAutocmd('BufWritePre', +expand('<abuf>'), bufname(+expand('<abuf>')), getbufvar(+expand('<abuf>'), 'changedtick'))

"index.cpp" 
"index.cpp" 48L, 818B written
Executing BufWritePost Autocommands for "*"
autocommand call s:Autocmd('BufWritePost', +expand('<abuf>'), getbufvar(+expand('<abuf>'), 'changedtick'))

Executing BufWritePost Autocommands for "*"
autocommand call s:reset_untracked_cache(0)

Executing BufWritePost Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing BufWritePost Autocommands for "*"
autocommand call s:mru_append(expand('<amatch>'))

autocommand call s:mrw_append(expand('<amatch>'))

"index.cpp" 48L, 818B written
Executing CursorHold Autocommands for "*"
autocommand silent call CocActionAsync('highlight')

autocommand silent call CocActionAsync('highlight')

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorHold Autocommands for "*"
autocommand silent call CocActionAsync('highlight')

autocommand silent call CocActionAsync('highlight')

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing InsertEnter Autocommands for "*"
autocommand call s:Autocmd('InsertEnter', +expand('<abuf>'))

Executing InsertEnter Autocommands for "*"
autocommand call lexima#insmode#clear_stack()

autocommand call s:setup_insmode()

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing CursorHoldI Autocommands for "*"
autocommand call s:Autocmd('CursorHoldI', +expand('<abuf>'), [line('.'), col('.')])

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing InsertLeave Autocommands for "*"
autocommand call s:Autocmd('InsertLeave', +expand('<abuf>'))

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorHold Autocommands for "*"
autocommand silent call CocActionAsync('highlight')

autocommand silent call CocActionAsync('highlight')

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing InsertEnter Autocommands for "*"
autocommand call s:Autocmd('InsertEnter', +expand('<abuf>'))

Executing InsertEnter Autocommands for "*"
autocommand call lexima#insmode#clear_stack()

autocommand call s:setup_insmode()

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing CursorHoldI Autocommands for "*"
autocommand call s:Autocmd('CursorHoldI', +expand('<abuf>'), [line('.'), col('.')])

Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing CursorHoldI Autocommands for "*"
autocommand call s:Autocmd('CursorHoldI', +expand('<abuf>'), [line('.'), col('.')])

Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing CursorHoldI Autocommands for "*"
autocommand call s:Autocmd('CursorHoldI', +expand('<abuf>'), [line('.'), col('.')])

Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing CursorHoldI Autocommands for "*"
autocommand call s:Autocmd('CursorHoldI', +expand('<abuf>'), [line('.'), col('.')])

Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing CursorHoldI Autocommands for "*"
autocommand call s:Autocmd('CursorHoldI', +expand('<abuf>'), [line('.'), col('.')])

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing InsertLeave Autocommands for "*"
autocommand call s:Autocmd('InsertLeave', +expand('<abuf>'))

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing InsertEnter Autocommands for "*"
autocommand call s:Autocmd('InsertEnter', +expand('<abuf>'))

Executing InsertEnter Autocommands for "*"
autocommand call lexima#insmode#clear_stack()

autocommand call s:setup_insmode()

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing CursorHoldI Autocommands for "*"
autocommand call s:Autocmd('CursorHoldI', +expand('<abuf>'), [line('.'), col('.')])

Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing CursorHoldI Autocommands for "*"
autocommand call s:Autocmd('CursorHoldI', +expand('<abuf>'), [line('.'), col('.')])

Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing CursorHoldI Autocommands for "*"
autocommand call s:Autocmd('CursorHoldI', +expand('<abuf>'), [line('.'), col('.')])

Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing WinClosed Autocommands for "*"
autocommand call s:HandleWinClosed(+expand('<amatch>'))

Executing BufWinLeave Autocommands for "*"
autocommand call s:Autocmd('BufWinLeave', +expand('<abuf>'), bufwinid(+expand('<abuf>')))

Executing BufHidden Autocommands for "*"
autocommand call s:Autocmd('BufHidden', +expand('<abuf>'))

Executing WinClosed Autocommands for "*"
autocommand call s:HandleWinClosed(+expand('<amatch>'))

Executing BufWinLeave Autocommands for "*"
autocommand call s:Autocmd('BufWinLeave', +expand('<abuf>'), bufwinid(+expand('<abuf>')))

Executing BufHidden Autocommands for "*"
autocommand call s:Autocmd('BufHidden', +expand('<abuf>'))

Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Error detected while processing function coc#pum#_close[2]..<SNR>189_close_pum[2]..coc#float#close[1]..coc#float#close_related:
line   19:
E5555: API call: Invalid window id: 1204
Executing WinClosed Autocommands for "*"
autocommand call s:HandleWinClosed(+expand('<amatch>'))

Executing BufWinLeave Autocommands for "*"
autocommand call s:Autocmd('BufWinLeave', +expand('<abuf>'), bufwinid(+expand('<abuf>')))

Executing BufHidden Autocommands for "*"
autocommand call s:Autocmd('BufHidden', +expand('<abuf>'))

Executing CursorHoldI Autocommands for "*"
autocommand call s:Autocmd('CursorHoldI', +expand('<abuf>'), [line('.'), col('.')])

Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing WinClosed Autocommands for "*"
autocommand call s:HandleWinClosed(+expand('<amatch>'))

Executing BufWinLeave Autocommands for "*"
autocommand call s:Autocmd('BufWinLeave', +expand('<abuf>'), bufwinid(+expand('<abuf>')))

Executing BufHidden Autocommands for "*"
autocommand call s:Autocmd('BufHidden', +expand('<abuf>'))

Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing CursorHoldI Autocommands for "*"
autocommand call s:Autocmd('CursorHoldI', +expand('<abuf>'), [line('.'), col('.')])

Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing CursorHoldI Autocommands for "*"
autocommand call s:Autocmd('CursorHoldI', +expand('<abuf>'), [line('.'), col('.')])

Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing WinClosed Autocommands for "*"
autocommand call s:HandleWinClosed(+expand('<amatch>'))

Executing BufWinLeave Autocommands for "*"
autocommand call s:Autocmd('BufWinLeave', +expand('<abuf>'), bufwinid(+expand('<abuf>')))

Executing BufHidden Autocommands for "*"
autocommand call s:Autocmd('BufHidden', +expand('<abuf>'))

Executing WinClosed Autocommands for "*"
autocommand call s:HandleWinClosed(+expand('<amatch>'))

Executing BufWinLeave Autocommands for "*"
autocommand call s:Autocmd('BufWinLeave', +expand('<abuf>'), bufwinid(+expand('<abuf>')))

Executing BufHidden Autocommands for "*"
autocommand call s:Autocmd('BufHidden', +expand('<abuf>'))

Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing CursorHoldI Autocommands for "*"
autocommand call s:Autocmd('CursorHoldI', +expand('<abuf>'), [line('.'), col('.')])

Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 5: sourcing "/opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax/cpp.vim"
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 16: sourcing "/opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax/c.vim"
finished sourcing /opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax/c.vim
continuing in /opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax/cpp.vim
finished sourcing /opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax/cpp.vim
continuing in coc#compat#execute
Executing CursorHoldI Autocommands for "*"
autocommand call s:Autocmd('CursorHoldI', +expand('<abuf>'), [line('.'), col('.')])

Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing WinClosed Autocommands for "*"
autocommand call s:HandleWinClosed(+expand('<amatch>'))

Executing BufWinLeave Autocommands for "*"
autocommand call s:Autocmd('BufWinLeave', +expand('<abuf>'), bufwinid(+expand('<abuf>')))

Executing BufHidden Autocommands for "*"
autocommand call s:Autocmd('BufHidden', +expand('<abuf>'))

Executing WinClosed Autocommands for "*"
autocommand call s:HandleWinClosed(+expand('<amatch>'))

Executing BufWinLeave Autocommands for "*"
autocommand call s:Autocmd('BufWinLeave', +expand('<abuf>'), bufwinid(+expand('<abuf>')))

Executing BufHidden Autocommands for "*"
autocommand call s:Autocmd('BufHidden', +expand('<abuf>'))

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 5: sourcing "/opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax/cpp.vim"
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 16: sourcing "/opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax/c.vim"
finished sourcing /opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax/c.vim
continuing in /opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax/cpp.vim
finished sourcing /opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax/cpp.vim
continuing in coc#compat#execute
Executing CursorHoldI Autocommands for "*"
autocommand call s:Autocmd('CursorHoldI', +expand('<abuf>'), [line('.'), col('.')])

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing InsertLeave Autocommands for "*"
autocommand call s:Autocmd('InsertLeave', +expand('<abuf>'))

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing WinClosed Autocommands for "*"
autocommand call s:HandleWinClosed(+expand('<amatch>'))

Executing BufWinLeave Autocommands for "*"
autocommand call s:Autocmd('BufWinLeave', +expand('<abuf>'), bufwinid(+expand('<abuf>')))

Executing BufHidden Autocommands for "*"
autocommand call s:Autocmd('BufHidden', +expand('<abuf>'))

Executing CursorHold Autocommands for "*"
autocommand silent call CocActionAsync('highlight')

autocommand silent call CocActionAsync('highlight')

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing InsertEnter Autocommands for "*"
autocommand call s:Autocmd('InsertEnter', +expand('<abuf>'))

Executing InsertEnter Autocommands for "*"
autocommand call lexima#insmode#clear_stack()

autocommand call s:setup_insmode()

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorHoldI Autocommands for "*"
autocommand call s:Autocmd('CursorHoldI', +expand('<abuf>'), [line('.'), col('.')])

Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 5: sourcing "/opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax/cpp.vim"
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 16: sourcing "/opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax/c.vim"
finished sourcing /opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax/c.vim
continuing in /opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax/cpp.vim
finished sourcing /opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax/cpp.vim
continuing in coc#compat#execute
Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 5: sourcing "/opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax/cpp.vim"
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 16: sourcing "/opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax/c.vim"
finished sourcing /opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax/c.vim
continuing in /opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax/cpp.vim
finished sourcing /opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax/cpp.vim
continuing in coc#compat#execute
Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing WinClosed Autocommands for "*"
autocommand call s:HandleWinClosed(+expand('<amatch>'))

Executing BufWinLeave Autocommands for "*"
autocommand call s:Autocmd('BufWinLeave', +expand('<abuf>'), bufwinid(+expand('<abuf>')))

Executing BufHidden Autocommands for "*"
autocommand call s:Autocmd('BufHidden', +expand('<abuf>'))

Executing WinClosed Autocommands for "*"
autocommand call s:HandleWinClosed(+expand('<amatch>'))

Executing BufWinLeave Autocommands for "*"
autocommand call s:Autocmd('BufWinLeave', +expand('<abuf>'), bufwinid(+expand('<abuf>')))

Executing BufHidden Autocommands for "*"
autocommand call s:Autocmd('BufHidden', +expand('<abuf>'))

Executing CursorHoldI Autocommands for "*"
autocommand call s:Autocmd('CursorHoldI', +expand('<abuf>'), [line('.'), col('.')])

Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing CursorHoldI Autocommands for "*"
autocommand call s:Autocmd('CursorHoldI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing WinClosed Autocommands for "*"
autocommand call s:HandleWinClosed(+expand('<amatch>'))

Executing BufWinLeave Autocommands for "*"
autocommand call s:Autocmd('BufWinLeave', +expand('<abuf>'), bufwinid(+expand('<abuf>')))

Executing BufHidden Autocommands for "*"
autocommand call s:Autocmd('BufHidden', +expand('<abuf>'))

Executing WinClosed Autocommands for "*"
autocommand call s:HandleWinClosed(+expand('<amatch>'))

Executing BufWinLeave Autocommands for "*"
autocommand call s:Autocmd('BufWinLeave', +expand('<abuf>'), bufwinid(+expand('<abuf>')))

Executing BufHidden Autocommands for "*"
autocommand call s:Autocmd('BufHidden', +expand('<abuf>'))

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorHoldI Autocommands for "*"
autocommand call s:Autocmd('CursorHoldI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorHoldI Autocommands for "*"
autocommand call s:Autocmd('CursorHoldI', +expand('<abuf>'), [line('.'), col('.')])

Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing CursorHoldI Autocommands for "*"
autocommand call s:Autocmd('CursorHoldI', +expand('<abuf>'), [line('.'), col('.')])

Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing WinClosed Autocommands for "*"
autocommand call s:HandleWinClosed(+expand('<amatch>'))

Executing BufWinLeave Autocommands for "*"
autocommand call s:Autocmd('BufWinLeave', +expand('<abuf>'), bufwinid(+expand('<abuf>')))

Executing BufHidden Autocommands for "*"
autocommand call s:Autocmd('BufHidden', +expand('<abuf>'))

Executing WinClosed Autocommands for "*"
autocommand call s:HandleWinClosed(+expand('<amatch>'))

Executing BufWinLeave Autocommands for "*"
autocommand call s:Autocmd('BufWinLeave', +expand('<abuf>'), bufwinid(+expand('<abuf>')))

Executing BufHidden Autocommands for "*"
autocommand call s:Autocmd('BufHidden', +expand('<abuf>'))

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 5: sourcing "/opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax/cpp.vim"
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 16: sourcing "/opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax/c.vim"
finished sourcing /opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax/c.vim
continuing in /opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax/cpp.vim
finished sourcing /opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax/cpp.vim
continuing in coc#compat#execute
Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing CursorHoldI Autocommands for "*"
autocommand call s:Autocmd('CursorHoldI', +expand('<abuf>'), [line('.'), col('.')])

Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 5: sourcing "/opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax/cpp.vim"
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 16: sourcing "/opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax/c.vim"
finished sourcing /opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax/c.vim
continuing in /opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax/cpp.vim
finished sourcing /opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax/cpp.vim
continuing in coc#compat#execute
Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 5: sourcing "/opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax/cpp.vim"
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 16: sourcing "/opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax/c.vim"
finished sourcing /opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax/c.vim
continuing in /opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax/cpp.vim
finished sourcing /opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax/cpp.vim
continuing in coc#compat#execute
Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 5: sourcing "/opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax/cpp.vim"
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 16: sourcing "/opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax/c.vim"
finished sourcing /opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax/c.vim
continuing in /opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax/cpp.vim
finished sourcing /opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax/cpp.vim
continuing in coc#compat#execute
Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing WinClosed Autocommands for "*"
autocommand call s:HandleWinClosed(+expand('<amatch>'))

Executing BufWinLeave Autocommands for "*"
autocommand call s:Autocmd('BufWinLeave', +expand('<abuf>'), bufwinid(+expand('<abuf>')))

Executing BufHidden Autocommands for "*"
autocommand call s:Autocmd('BufHidden', +expand('<abuf>'))

Executing WinClosed Autocommands for "*"
autocommand call s:HandleWinClosed(+expand('<amatch>'))

Executing BufWinLeave Autocommands for "*"
autocommand call s:Autocmd('BufWinLeave', +expand('<abuf>'), bufwinid(+expand('<abuf>')))

Executing BufHidden Autocommands for "*"
autocommand call s:Autocmd('BufHidden', +expand('<abuf>'))

Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing CursorHoldI Autocommands for "*"
autocommand call s:Autocmd('CursorHoldI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing WinClosed Autocommands for "*"
autocommand call s:HandleWinClosed(+expand('<amatch>'))

Executing BufWinLeave Autocommands for "*"
autocommand call s:Autocmd('BufWinLeave', +expand('<abuf>'), bufwinid(+expand('<abuf>')))

Executing BufHidden Autocommands for "*"
autocommand call s:Autocmd('BufHidden', +expand('<abuf>'))

Executing WinClosed Autocommands for "*"
autocommand call s:HandleWinClosed(+expand('<amatch>'))

Executing BufWinLeave Autocommands for "*"
autocommand call s:Autocmd('BufWinLeave', +expand('<abuf>'), bufwinid(+expand('<abuf>')))

Executing BufHidden Autocommands for "*"
autocommand call s:Autocmd('BufHidden', +expand('<abuf>'))

Executing CursorHoldI Autocommands for "*"
autocommand call s:Autocmd('CursorHoldI', +expand('<abuf>'), [line('.'), col('.')])

Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing CursorHoldI Autocommands for "*"
autocommand call s:Autocmd('CursorHoldI', +expand('<abuf>'), [line('.'), col('.')])

Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing CursorHoldI Autocommands for "*"
autocommand call s:Autocmd('CursorHoldI', +expand('<abuf>'), [line('.'), col('.')])

Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing WinClosed Autocommands for "*"
autocommand call s:HandleWinClosed(+expand('<amatch>'))

Executing BufWinLeave Autocommands for "*"
autocommand call s:Autocmd('BufWinLeave', +expand('<abuf>'), bufwinid(+expand('<abuf>')))

Executing BufHidden Autocommands for "*"
autocommand call s:Autocmd('BufHidden', +expand('<abuf>'))

Executing WinClosed Autocommands for "*"
autocommand call s:HandleWinClosed(+expand('<amatch>'))

Executing BufWinLeave Autocommands for "*"
autocommand call s:Autocmd('BufWinLeave', +expand('<abuf>'), bufwinid(+expand('<abuf>')))

Executing BufHidden Autocommands for "*"
autocommand call s:Autocmd('BufHidden', +expand('<abuf>'))

Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing CursorHoldI Autocommands for "*"
autocommand call s:Autocmd('CursorHoldI', +expand('<abuf>'), [line('.'), col('.')])

Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing CursorHoldI Autocommands for "*"
autocommand call s:Autocmd('CursorHoldI', +expand('<abuf>'), [line('.'), col('.')])

Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing CursorHoldI Autocommands for "*"
autocommand call s:Autocmd('CursorHoldI', +expand('<abuf>'), [line('.'), col('.')])

Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing InsertLeave Autocommands for "*"
autocommand call s:Autocmd('InsertLeave', +expand('<abuf>'))

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing WinClosed Autocommands for "*"
autocommand call s:HandleWinClosed(+expand('<amatch>'))

Executing BufWinLeave Autocommands for "*"
autocommand call s:Autocmd('BufWinLeave', +expand('<abuf>'), bufwinid(+expand('<abuf>')))

Executing BufHidden Autocommands for "*"
autocommand call s:Autocmd('BufHidden', +expand('<abuf>'))

Executing WinClosed Autocommands for "*"
autocommand call s:HandleWinClosed(+expand('<amatch>'))

Executing BufWinLeave Autocommands for "*"
autocommand call s:Autocmd('BufWinLeave', +expand('<abuf>'), bufwinid(+expand('<abuf>')))

Executing BufHidden Autocommands for "*"
autocommand call s:Autocmd('BufHidden', +expand('<abuf>'))

Executing WinClosed Autocommands for "*"
autocommand call s:HandleWinClosed(+expand('<amatch>'))

Executing BufWinLeave Autocommands for "*"
autocommand call s:Autocmd('BufWinLeave', +expand('<abuf>'), bufwinid(+expand('<abuf>')))

Executing BufHidden Autocommands for "*"
autocommand call s:Autocmd('BufHidden', +expand('<abuf>'))

Executing CursorHold Autocommands for "*"
autocommand silent call CocActionAsync('highlight')

autocommand silent call CocActionAsync('highlight')

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing InsertEnter Autocommands for "*"
autocommand call s:Autocmd('InsertEnter', +expand('<abuf>'))

Executing InsertEnter Autocommands for "*"
autocommand call lexima#insmode#clear_stack()

autocommand call s:setup_insmode()

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing InsertLeave Autocommands for "*"
autocommand call s:Autocmd('InsertLeave', +expand('<abuf>'))

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorHold Autocommands for "*"
autocommand silent call CocActionAsync('highlight')

autocommand silent call CocActionAsync('highlight')

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorHold Autocommands for "*"
autocommand silent call CocActionAsync('highlight')

autocommand silent call CocActionAsync('highlight')

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing InsertEnter Autocommands for "*"
autocommand call s:Autocmd('InsertEnter', +expand('<abuf>'))

Executing InsertEnter Autocommands for "*"
autocommand call lexima#insmode#clear_stack()

autocommand call s:setup_insmode()

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing CursorHoldI Autocommands for "*"
autocommand call s:Autocmd('CursorHoldI', +expand('<abuf>'), [line('.'), col('.')])

Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

not found in runtime path: "parser/comment.*"
Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing InsertLeave Autocommands for "*"
autocommand call s:Autocmd('InsertLeave', +expand('<abuf>'))

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChanged Autocommands for "*"
autocommand call s:Autocmd('TextChanged', +expand('<abuf>'), getbufvar(+expand('<abuf>'), 'changedtick'))

Executing TextChanged Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorHold Autocommands for "*"
autocommand silent call CocActionAsync('highlight')

autocommand silent call CocActionAsync('highlight')

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorHold Autocommands for "*"
autocommand silent call CocActionAsync('highlight')

autocommand silent call CocActionAsync('highlight')

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing command: "'/usr/bin/pbcopy'"


Executing TextYankPost Autocommands for "*"
autocommand call highlightedyank#debounce()

Executing TextYankPost Autocommands for "*"
autocommand call coc#rpc#notify('doAutocmd', [2, v:event, +expand('<abuf>'), win_getid()])

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing CursorHold Autocommands for "*"
autocommand silent call CocActionAsync('highlight')

autocommand silent call CocActionAsync('highlight')

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing command: "'/usr/bin/pbpaste'"


Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChanged Autocommands for "*"
autocommand call s:Autocmd('TextChanged', +expand('<abuf>'), getbufvar(+expand('<abuf>'), 'changedtick'))

Executing TextChanged Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorHold Autocommands for "*"
autocommand silent call CocActionAsync('highlight')

autocommand silent call CocActionAsync('highlight')

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorHold Autocommands for "*"
autocommand silent call CocActionAsync('highlight')

autocommand silent call CocActionAsync('highlight')

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing command: "'/usr/bin/pbcopy'"


Executing TextYankPost Autocommands for "*"
autocommand call highlightedyank#debounce()

Executing TextYankPost Autocommands for "*"
autocommand call coc#rpc#notify('doAutocmd', [2, v:event, +expand('<abuf>'), win_getid()])

Executing InsertEnter Autocommands for "*"
autocommand call s:Autocmd('InsertEnter', +expand('<abuf>'))

Executing InsertEnter Autocommands for "*"
autocommand call lexima#insmode#clear_stack()

autocommand call s:setup_insmode()

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing InsertLeave Autocommands for "*"
autocommand call s:Autocmd('InsertLeave', +expand('<abuf>'))

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing WinClosed Autocommands for "*"
autocommand call s:HandleWinClosed(+expand('<amatch>'))

Executing BufWinLeave Autocommands for "*"
autocommand call s:Autocmd('BufWinLeave', +expand('<abuf>'), bufwinid(+expand('<abuf>')))

Executing BufHidden Autocommands for "*"
autocommand call s:Autocmd('BufHidden', +expand('<abuf>'))

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorHold Autocommands for "*"
autocommand silent call CocActionAsync('highlight')

autocommand silent call CocActionAsync('highlight')

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChanged Autocommands for "*"
autocommand call s:Autocmd('TextChanged', +expand('<abuf>'), getbufvar(+expand('<abuf>'), 'changedtick'))

Executing TextChanged Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing WinClosed Autocommands for "*"
autocommand call s:HandleWinClosed(+expand('<amatch>'))

Executing BufWinLeave Autocommands for "*"
autocommand call s:Autocmd('BufWinLeave', +expand('<abuf>'), bufwinid(+expand('<abuf>')))

Executing BufHidden Autocommands for "*"
autocommand call s:Autocmd('BufHidden', +expand('<abuf>'))

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorHold Autocommands for "*"
autocommand silent call CocActionAsync('highlight')

autocommand silent call CocActionAsync('highlight')

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing command: "'/usr/bin/pbcopy'"


Executing TextYankPost Autocommands for "*"
autocommand call highlightedyank#debounce()

Executing TextYankPost Autocommands for "*"
autocommand call coc#rpc#notify('doAutocmd', [2, v:event, +expand('<abuf>'), win_getid()])

Executing InsertEnter Autocommands for "*"
autocommand call s:Autocmd('InsertEnter', +expand('<abuf>'))

Executing InsertEnter Autocommands for "*"
autocommand call lexima#insmode#clear_stack()

autocommand call s:setup_insmode()

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing InsertLeave Autocommands for "*"
autocommand call s:Autocmd('InsertLeave', +expand('<abuf>'))

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing WinClosed Autocommands for "*"
autocommand call s:HandleWinClosed(+expand('<amatch>'))

Executing BufWinLeave Autocommands for "*"
autocommand call s:Autocmd('BufWinLeave', +expand('<abuf>'), bufwinid(+expand('<abuf>')))

Executing BufHidden Autocommands for "*"
autocommand call s:Autocmd('BufHidden', +expand('<abuf>'))

Executing WinClosed Autocommands for "*"
autocommand call s:HandleWinClosed(+expand('<amatch>'))

Executing BufWinLeave Autocommands for "*"
autocommand call s:Autocmd('BufWinLeave', +expand('<abuf>'), bufwinid(+expand('<abuf>')))

Executing BufHidden Autocommands for "*"
autocommand call s:Autocmd('BufHidden', +expand('<abuf>'))

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorHold Autocommands for "*"
autocommand silent call CocActionAsync('highlight')

autocommand silent call CocActionAsync('highlight')

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing command: "'/usr/bin/pbcopy'"


Executing TextYankPost Autocommands for "*"
autocommand call highlightedyank#debounce()

Executing TextYankPost Autocommands for "*"
autocommand call coc#rpc#notify('doAutocmd', [2, v:event, +expand('<abuf>'), win_getid()])

Executing InsertEnter Autocommands for "*"
autocommand call s:Autocmd('InsertEnter', +expand('<abuf>'))

Executing InsertEnter Autocommands for "*"
autocommand call lexima#insmode#clear_stack()

autocommand call s:setup_insmode()

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing CursorHoldI Autocommands for "*"
autocommand call s:Autocmd('CursorHoldI', +expand('<abuf>'), [line('.'), col('.')])

Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing CursorHoldI Autocommands for "*"
autocommand call s:Autocmd('CursorHoldI', +expand('<abuf>'), [line('.'), col('.')])

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing InsertLeave Autocommands for "*"
autocommand call s:Autocmd('InsertLeave', +expand('<abuf>'))

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing WinClosed Autocommands for "*"
autocommand call s:HandleWinClosed(+expand('<amatch>'))

Executing BufWinLeave Autocommands for "*"
autocommand call s:Autocmd('BufWinLeave', +expand('<abuf>'), bufwinid(+expand('<abuf>')))

Executing BufHidden Autocommands for "*"
autocommand call s:Autocmd('BufHidden', +expand('<abuf>'))

Executing WinClosed Autocommands for "*"
autocommand call s:HandleWinClosed(+expand('<amatch>'))

Executing BufWinLeave Autocommands for "*"
autocommand call s:Autocmd('BufWinLeave', +expand('<abuf>'), bufwinid(+expand('<abuf>')))

Executing BufHidden Autocommands for "*"
autocommand call s:Autocmd('BufHidden', +expand('<abuf>'))

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()


Executing BufWritePre Autocommands for "*"
autocommand call s:SyncAutocmd('BufWritePre', +expand('<abuf>'), bufname(+expand('<abuf>')), getbufvar(+expand('<abuf>'), 'changedtick'))

"index.cpp" 
"index.cpp" 49L, 909B written
Executing BufWritePost Autocommands for "*"
autocommand call s:Autocmd('BufWritePost', +expand('<abuf>'), getbufvar(+expand('<abuf>'), 'changedtick'))

Executing BufWritePost Autocommands for "*"
autocommand call s:reset_untracked_cache(0)

Executing BufWritePost Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing BufWritePost Autocommands for "*"
autocommand call s:mru_append(expand('<amatch>'))

autocommand call s:mrw_append(expand('<amatch>'))

"index.cpp" 49L, 909B written
Executing CursorHold Autocommands for "*"
autocommand silent call CocActionAsync('highlight')

autocommand silent call CocActionAsync('highlight')

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorHold Autocommands for "*"
autocommand silent call CocActionAsync('highlight')

autocommand silent call CocActionAsync('highlight')

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorHold Autocommands for "*"
autocommand silent call CocActionAsync('highlight')

autocommand silent call CocActionAsync('highlight')

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorHold Autocommands for "*"
autocommand silent call CocActionAsync('highlight')

autocommand silent call CocActionAsync('highlight')

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorHold Autocommands for "*"
autocommand silent call CocActionAsync('highlight')

autocommand silent call CocActionAsync('highlight')

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorHold Autocommands for "*"
autocommand silent call CocActionAsync('highlight')

autocommand silent call CocActionAsync('highlight')

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()


Executing BufWritePre Autocommands for "*"
autocommand call s:SyncAutocmd('BufWritePre', +expand('<abuf>'), bufname(+expand('<abuf>')), getbufvar(+expand('<abuf>'), 'changedtick'))

"index.cpp" 
"index.cpp" 49L, 909B written
Executing BufWritePost Autocommands for "*"
autocommand call s:Autocmd('BufWritePost', +expand('<abuf>'), getbufvar(+expand('<abuf>'), 'changedtick'))

Executing BufWritePost Autocommands for "*"
autocommand call s:reset_untracked_cache(0)

Executing BufWritePost Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing BufWritePost Autocommands for "*"
autocommand call s:mru_append(expand('<amatch>'))

autocommand call s:mrw_append(expand('<amatch>'))

"index.cpp" 49L, 909B written
Executing CursorHold Autocommands for "*"
autocommand silent call CocActionAsync('highlight')

autocommand silent call CocActionAsync('highlight')

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing InsertEnter Autocommands for "*"
autocommand call s:Autocmd('InsertEnter', +expand('<abuf>'))

Executing InsertEnter Autocommands for "*"
autocommand call lexima#insmode#clear_stack()

autocommand call s:setup_insmode()

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing CursorHoldI Autocommands for "*"
autocommand call s:Autocmd('CursorHoldI', +expand('<abuf>'), [line('.'), col('.')])

Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing WinClosed Autocommands for "*"
autocommand call s:HandleWinClosed(+expand('<amatch>'))

Executing BufWinLeave Autocommands for "*"
autocommand call s:Autocmd('BufWinLeave', +expand('<abuf>'), bufwinid(+expand('<abuf>')))

Executing BufHidden Autocommands for "*"
autocommand call s:Autocmd('BufHidden', +expand('<abuf>'))

Executing CursorHoldI Autocommands for "*"
autocommand call s:Autocmd('CursorHoldI', +expand('<abuf>'), [line('.'), col('.')])

Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Error detected while processing function coc#pum#_close[2]..<SNR>189_close_pum[2]..coc#float#close[1]..coc#float#close_related:
line   19:
E5555: API call: Invalid window id: 1256
Executing WinClosed Autocommands for "*"
autocommand call s:HandleWinClosed(+expand('<amatch>'))

Executing BufWinLeave Autocommands for "*"
autocommand call s:Autocmd('BufWinLeave', +expand('<abuf>'), bufwinid(+expand('<abuf>')))

Executing BufHidden Autocommands for "*"
autocommand call s:Autocmd('BufHidden', +expand('<abuf>'))

Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing CursorHoldI Autocommands for "*"
autocommand call s:Autocmd('CursorHoldI', +expand('<abuf>'), [line('.'), col('.')])

Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing CursorHoldI Autocommands for "*"
autocommand call s:Autocmd('CursorHoldI', +expand('<abuf>'), [line('.'), col('.')])

Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing WinClosed Autocommands for "*"
autocommand call s:HandleWinClosed(+expand('<amatch>'))

Executing BufWinLeave Autocommands for "*"
autocommand call s:Autocmd('BufWinLeave', +expand('<abuf>'), bufwinid(+expand('<abuf>')))

Executing BufHidden Autocommands for "*"
autocommand call s:Autocmd('BufHidden', +expand('<abuf>'))

Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing CursorHoldI Autocommands for "*"
autocommand call s:Autocmd('CursorHoldI', +expand('<abuf>'), [line('.'), col('.')])

Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing CursorHoldI Autocommands for "*"
autocommand call s:Autocmd('CursorHoldI', +expand('<abuf>'), [line('.'), col('.')])

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing CursorHoldI Autocommands for "*"
autocommand call s:Autocmd('CursorHoldI', +expand('<abuf>'), [line('.'), col('.')])

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing CursorHoldI Autocommands for "*"
autocommand call s:Autocmd('CursorHoldI', +expand('<abuf>'), [line('.'), col('.')])

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing CursorHoldI Autocommands for "*"
autocommand call s:Autocmd('CursorHoldI', +expand('<abuf>'), [line('.'), col('.')])

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing InsertLeave Autocommands for "*"
autocommand call s:Autocmd('InsertLeave', +expand('<abuf>'))

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing WinClosed Autocommands for "*"
autocommand call s:HandleWinClosed(+expand('<amatch>'))

Executing BufWinLeave Autocommands for "*"
autocommand call s:Autocmd('BufWinLeave', +expand('<abuf>'), bufwinid(+expand('<abuf>')))

Executing BufHidden Autocommands for "*"
autocommand call s:Autocmd('BufHidden', +expand('<abuf>'))

Executing WinClosed Autocommands for "*"
autocommand call s:HandleWinClosed(+expand('<amatch>'))

Executing BufWinLeave Autocommands for "*"
autocommand call s:Autocmd('BufWinLeave', +expand('<abuf>'), bufwinid(+expand('<abuf>')))

Executing BufHidden Autocommands for "*"
autocommand call s:Autocmd('BufHidden', +expand('<abuf>'))

Executing InsertEnter Autocommands for "*"
autocommand call s:Autocmd('InsertEnter', +expand('<abuf>'))

Executing InsertEnter Autocommands for "*"
autocommand call lexima#insmode#clear_stack()

autocommand call s:setup_insmode()

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing CursorHoldI Autocommands for "*"
autocommand call s:Autocmd('CursorHoldI', +expand('<abuf>'), [line('.'), col('.')])

Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing InsertLeave Autocommands for "*"
autocommand call s:Autocmd('InsertLeave', +expand('<abuf>'))

Executing InsertEnter Autocommands for "*"
autocommand call s:Autocmd('InsertEnter', +expand('<abuf>'))

Executing InsertEnter Autocommands for "*"
autocommand call lexima#insmode#clear_stack()

autocommand call s:setup_insmode()

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing CursorHoldI Autocommands for "*"
autocommand call s:Autocmd('CursorHoldI', +expand('<abuf>'), [line('.'), col('.')])

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing InsertLeave Autocommands for "*"
autocommand call s:Autocmd('InsertLeave', +expand('<abuf>'))

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChanged Autocommands for "*"
autocommand call s:Autocmd('TextChanged', +expand('<abuf>'), getbufvar(+expand('<abuf>'), 'changedtick'))

Executing TextChanged Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing WinScrolled Autocommands for "*"
autocommand call s:HandleWinScrolled(+expand('<amatch>'))

Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing WinScrolled Autocommands for "*"
autocommand call s:HandleWinScrolled(+expand('<amatch>'))

Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing WinScrolled Autocommands for "*"
autocommand call s:HandleWinScrolled(+expand('<amatch>'))

Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing WinScrolled Autocommands for "*"
autocommand call s:HandleWinScrolled(+expand('<amatch>'))

Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorHold Autocommands for "*"
autocommand silent call CocActionAsync('highlight')

autocommand silent call CocActionAsync('highlight')

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing InsertEnter Autocommands for "*"
autocommand call s:Autocmd('InsertEnter', +expand('<abuf>'))

Executing InsertEnter Autocommands for "*"
autocommand call lexima#insmode#clear_stack()

autocommand call s:setup_insmode()

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing CursorHoldI Autocommands for "*"
autocommand call s:Autocmd('CursorHoldI', +expand('<abuf>'), [line('.'), col('.')])

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing InsertLeave Autocommands for "*"
autocommand call s:Autocmd('InsertLeave', +expand('<abuf>'))

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChanged Autocommands for "*"
autocommand call s:Autocmd('TextChanged', +expand('<abuf>'), getbufvar(+expand('<abuf>'), 'changedtick'))

Executing TextChanged Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing CursorHold Autocommands for "*"
autocommand silent call CocActionAsync('highlight')

autocommand silent call CocActionAsync('highlight')

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChanged Autocommands for "*"
autocommand call s:Autocmd('TextChanged', +expand('<abuf>'), getbufvar(+expand('<abuf>'), 'changedtick'))

Executing TextChanged Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing CursorHold Autocommands for "*"
autocommand silent call CocActionAsync('highlight')

autocommand silent call CocActionAsync('highlight')

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing InsertEnter Autocommands for "*"
autocommand call s:Autocmd('InsertEnter', +expand('<abuf>'))

Executing InsertEnter Autocommands for "*"
autocommand call lexima#insmode#clear_stack()

autocommand call s:setup_insmode()

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorHoldI Autocommands for "*"
autocommand call s:Autocmd('CursorHoldI', +expand('<abuf>'), [line('.'), col('.')])

Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing CursorHoldI Autocommands for "*"
autocommand call s:Autocmd('CursorHoldI', +expand('<abuf>'), [line('.'), col('.')])

Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing CursorHoldI Autocommands for "*"
autocommand call s:Autocmd('CursorHoldI', +expand('<abuf>'), [line('.'), col('.')])

Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing WinClosed Autocommands for "*"
autocommand call s:HandleWinClosed(+expand('<amatch>'))

Executing BufWinLeave Autocommands for "*"
autocommand call s:Autocmd('BufWinLeave', +expand('<abuf>'), bufwinid(+expand('<abuf>')))

Executing BufHidden Autocommands for "*"
autocommand call s:Autocmd('BufHidden', +expand('<abuf>'))

Executing WinClosed Autocommands for "*"
autocommand call s:HandleWinClosed(+expand('<amatch>'))

Executing BufWinLeave Autocommands for "*"
autocommand call s:Autocmd('BufWinLeave', +expand('<abuf>'), bufwinid(+expand('<abuf>')))

Executing BufHidden Autocommands for "*"
autocommand call s:Autocmd('BufHidden', +expand('<abuf>'))

Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing CursorHoldI Autocommands for "*"
autocommand call s:Autocmd('CursorHoldI', +expand('<abuf>'), [line('.'), col('.')])

Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing CursorHoldI Autocommands for "*"
autocommand call s:Autocmd('CursorHoldI', +expand('<abuf>'), [line('.'), col('.')])

Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing InsertLeave Autocommands for "*"
autocommand call s:Autocmd('InsertLeave', +expand('<abuf>'))

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()


Executing BufWritePre Autocommands for "*"
autocommand call s:SyncAutocmd('BufWritePre', +expand('<abuf>'), bufname(+expand('<abuf>')), getbufvar(+expand('<abuf>'), 'changedtick'))

"index.cpp" 
"index.cpp" 50L, 936B written
Executing BufWritePost Autocommands for "*"
autocommand call s:Autocmd('BufWritePost', +expand('<abuf>'), getbufvar(+expand('<abuf>'), 'changedtick'))

Executing BufWritePost Autocommands for "*"
autocommand call s:reset_untracked_cache(0)

Executing BufWritePost Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing BufWritePost Autocommands for "*"
autocommand call s:mru_append(expand('<amatch>'))

autocommand call s:mrw_append(expand('<amatch>'))

"index.cpp" 50L, 936B written
Executing CursorHold Autocommands for "*"
autocommand silent call CocActionAsync('highlight')

autocommand silent call CocActionAsync('highlight')

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing InsertEnter Autocommands for "*"
autocommand call s:Autocmd('InsertEnter', +expand('<abuf>'))

Executing InsertEnter Autocommands for "*"
autocommand call lexima#insmode#clear_stack()

autocommand call s:setup_insmode()

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing InsertLeave Autocommands for "*"
autocommand call s:Autocmd('InsertLeave', +expand('<abuf>'))

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorHold Autocommands for "*"
autocommand silent call CocActionAsync('highlight')

autocommand silent call CocActionAsync('highlight')

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing InsertEnter Autocommands for "*"
autocommand call s:Autocmd('InsertEnter', +expand('<abuf>'))

Executing InsertEnter Autocommands for "*"
autocommand call lexima#insmode#clear_stack()

autocommand call s:setup_insmode()

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing CursorHoldI Autocommands for "*"
autocommand call s:Autocmd('CursorHoldI', +expand('<abuf>'), [line('.'), col('.')])

Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()


Executing BufWritePre Autocommands for "*"
autocommand call s:SyncAutocmd('BufWritePre', +expand('<abuf>'), bufname(+expand('<abuf>')), getbufvar(+expand('<abuf>'), 'changedtick'))

"index.cpp" 
"index.cpp" 50L, 938B written
Executing BufWritePost Autocommands for "*"
autocommand call s:Autocmd('BufWritePost', +expand('<abuf>'), getbufvar(+expand('<abuf>'), 'changedtick'))

Executing BufWritePost Autocommands for "*"
autocommand call s:reset_untracked_cache(0)

Executing BufWritePost Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing BufWritePost Autocommands for "*"
autocommand call s:mru_append(expand('<amatch>'))

autocommand call s:mrw_append(expand('<amatch>'))

"index.cpp" 50L, 938B written
Executing CursorHold Autocommands for "*"
autocommand silent call CocActionAsync('highlight')

autocommand silent call CocActionAsync('highlight')

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing InsertEnter Autocommands for "*"
autocommand call s:Autocmd('InsertEnter', +expand('<abuf>'))

Executing InsertEnter Autocommands for "*"
autocommand call lexima#insmode#clear_stack()

autocommand call s:setup_insmode()

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing InsertLeave Autocommands for "*"
autocommand call s:Autocmd('InsertLeave', +expand('<abuf>'))

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing InsertEnter Autocommands for "*"
autocommand call s:Autocmd('InsertEnter', +expand('<abuf>'))

Executing InsertEnter Autocommands for "*"
autocommand call lexima#insmode#clear_stack()

autocommand call s:setup_insmode()

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing CursorHoldI Autocommands for "*"
autocommand call s:Autocmd('CursorHoldI', +expand('<abuf>'), [line('.'), col('.')])

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing InsertLeave Autocommands for "*"
autocommand call s:Autocmd('InsertLeave', +expand('<abuf>'))

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()


Executing BufWritePre Autocommands for "*"
autocommand call s:SyncAutocmd('BufWritePre', +expand('<abuf>'), bufname(+expand('<abuf>')), getbufvar(+expand('<abuf>'), 'changedtick'))

"index.cpp" 
"index.cpp" 50L, 934B written
Executing BufWritePost Autocommands for "*"
autocommand call s:Autocmd('BufWritePost', +expand('<abuf>'), getbufvar(+expand('<abuf>'), 'changedtick'))

Executing BufWritePost Autocommands for "*"
autocommand call s:reset_untracked_cache(0)

Executing BufWritePost Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing BufWritePost Autocommands for "*"
autocommand call s:mru_append(expand('<amatch>'))

autocommand call s:mrw_append(expand('<amatch>'))

"index.cpp" 50L, 934B written
Executing CursorHold Autocommands for "*"
autocommand silent call CocActionAsync('highlight')

autocommand silent call CocActionAsync('highlight')

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorHold Autocommands for "*"
autocommand silent call CocActionAsync('highlight')

autocommand silent call CocActionAsync('highlight')

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorHold Autocommands for "*"
autocommand silent call CocActionAsync('highlight')

autocommand silent call CocActionAsync('highlight')

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorHold Autocommands for "*"
autocommand silent call CocActionAsync('highlight')

autocommand silent call CocActionAsync('highlight')

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing InsertEnter Autocommands for "*"
autocommand call s:Autocmd('InsertEnter', +expand('<abuf>'))

Executing InsertEnter Autocommands for "*"
autocommand call lexima#insmode#clear_stack()

autocommand call s:setup_insmode()

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing CursorHoldI Autocommands for "*"
autocommand call s:Autocmd('CursorHoldI', +expand('<abuf>'), [line('.'), col('.')])

Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing CursorHoldI Autocommands for "*"
autocommand call s:Autocmd('CursorHoldI', +expand('<abuf>'), [line('.'), col('.')])

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing InsertLeave Autocommands for "*"
autocommand call s:Autocmd('InsertLeave', +expand('<abuf>'))

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()


Executing BufWritePre Autocommands for "*"
autocommand call s:SyncAutocmd('BufWritePre', +expand('<abuf>'), bufname(+expand('<abuf>')), getbufvar(+expand('<abuf>'), 'changedtick'))

"index.cpp" 
"index.cpp" 50L, 934B written
Executing BufWritePost Autocommands for "*"
autocommand call s:Autocmd('BufWritePost', +expand('<abuf>'), getbufvar(+expand('<abuf>'), 'changedtick'))

Executing BufWritePost Autocommands for "*"
autocommand call s:reset_untracked_cache(0)

Executing BufWritePost Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing BufWritePost Autocommands for "*"
autocommand call s:mru_append(expand('<amatch>'))

autocommand call s:mrw_append(expand('<amatch>'))

"index.cpp" 50L, 934B written
Executing CursorHold Autocommands for "*"
autocommand silent call CocActionAsync('highlight')

autocommand silent call CocActionAsync('highlight')

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()


Executing BufWritePre Autocommands for "*"
autocommand call s:SyncAutocmd('BufWritePre', +expand('<abuf>'), bufname(+expand('<abuf>')), getbufvar(+expand('<abuf>'), 'changedtick'))

"index.cpp" 
"index.cpp" 50L, 934B written
Executing BufWritePost Autocommands for "*"
autocommand call s:Autocmd('BufWritePost', +expand('<abuf>'), getbufvar(+expand('<abuf>'), 'changedtick'))

Executing BufWritePost Autocommands for "*"
autocommand call s:reset_untracked_cache(0)

Executing BufWritePost Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing BufWritePost Autocommands for "*"
autocommand call s:mru_append(expand('<amatch>'))

autocommand call s:mrw_append(expand('<amatch>'))

"index.cpp" 50L, 934B written
Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorHold Autocommands for "*"
autocommand silent call CocActionAsync('highlight')

autocommand silent call CocActionAsync('highlight')

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()


[coc.nvim] hover not found
[coc.nvim] hover not found
Executing CursorHold Autocommands for "*"
autocommand silent call CocActionAsync('highlight')

autocommand silent call CocActionAsync('highlight')

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()


Executing BufWritePre Autocommands for "*"
autocommand call s:SyncAutocmd('BufWritePre', +expand('<abuf>'), bufname(+expand('<abuf>')), getbufvar(+expand('<abuf>'), 'changedtick'))

"index.cpp" 
"index.cpp" 50L, 934B written
Executing BufWritePost Autocommands for "*"
autocommand call s:Autocmd('BufWritePost', +expand('<abuf>'), getbufvar(+expand('<abuf>'), 'changedtick'))

Executing BufWritePost Autocommands for "*"
autocommand call s:reset_untracked_cache(0)

Executing BufWritePost Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing BufWritePost Autocommands for "*"
autocommand call s:mru_append(expand('<amatch>'))

autocommand call s:mrw_append(expand('<amatch>'))

"index.cpp" 50L, 934B written
Executing CursorHold Autocommands for "*"
autocommand silent call CocActionAsync('highlight')

autocommand silent call CocActionAsync('highlight')

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()


Executing command: "'/bin/zsh' '-c' 'git rev-parse --show-toplevel 2>/dev/null'"


Executing command: "'/bin/zsh' '-c' 'rg --files --hidden --no-messages --glob '!.git/*' --glob !'* *''"


Executing WinLeave Autocommands for "*"
autocommand call s:Autocmd('WinLeave', win_getid())

Executing WinLeave Autocommands for "*"
autocommand call s:Remove_Matches()

Executing WinEnter Autocommands for "*"
autocommand call s:dopopd()

Executing WinEnter Autocommands for "*"
autocommand call <sid>on_window_changed('WinEnter')

Executing WinEnter Autocommands for "*"
autocommand call coc#float#nvim_win_enter(win_getid())

autocommand call s:Autocmd('WinEnter', win_getid())

Executing WinEnter Autocommands for "*"
autocommand let g:fzf#vim#buffers[bufnr('')] = reltimefloat(reltime())

Executing WinEnter Autocommands for "*"
autocommand let s:tmux_is_last_pane = 0

Executing WinEnter Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing BufEnter Autocommands for "*"
autocommand set fo-=c fo-=r fo-=o

Executing BufEnter Autocommands for "*"
autocommand call s:Autocmd('BufEnter', +expand('<abuf>'))

Executing BufEnter Autocommands for "*"
autocommand if conflict_marker#detect#markers() | call s:on_detected() | endif

Executing BufEnter Autocommands for "*"
autocommand call s:mru_append(expand('<amatch>'))

Executing BufWinEnter Autocommands for "*"
autocommand call <sid>on_window_changed('BufWinEnter')

Executing BufWinEnter Autocommands for "*"
autocommand call s:Autocmd('BufWinEnter', +expand('<abuf>'), win_getid())

Executing BufWinEnter Autocommands for "*"
autocommand let g:fzf#vim#buffers[bufnr('')] = reltimefloat(reltime())

Executing BufWinEnter Autocommands for "*"
autocommand call s:mru_append(expand('<amatch>'))

[window] /Users/tomoya_tanaka/projects/git...om/txxxxc/competitive-programming/ABC_207/c
Executing BufFilePost Autocommands for "*"
autocommand call s:UseConfigFiles()

Executing TermOpen Autocommands for "*"
autocommand startinsert

Executing TermOpen Autocommands for "term://*"
autocommand <Lua 12: ~/.cache/dein/.cache/init.vim/.dein/lua/toggleterm.lua:25>

Executing TermOpen Autocommands for "*"
autocommand call s:Autocmd('TermOpen', +expand('<abuf>'))

[global] /Users/tomoya_tanaka/projects/git...om/txxxxc/competitive-programming/ABC_207/c
Executing FileType Autocommands for "*"
autocommand call s:LoadFTPlugin()

not found in runtime path: "ftplugin/fzf.vim ftplugin/fzf_*.vim ftplugin/fzf/*.vim"
not found in runtime path: "ftplugin/fzf.lua ftplugin/fzf_*.lua ftplugin/fzf/*.lua"
Executing FileType Autocommands for "*"
autocommand call s:LoadIndent()

not found in runtime path: "indent/fzf.vim"
not found in runtime path: "indent/fzf.lua"
Executing FileType Autocommands for "*?"
autocommand call dein#autoload#_on_default_event('FileType')

Executing FileType Autocommands for "*"
autocommand if !exists('b:ts_highlight') | 0verbose exe "set syntax=" . expand("<amatch>") | endif

Executing FileType Autocommands for "*"
autocommand set fo-=c fo-=r fo-=o

autocommand set fo-=c fo-=r fo-=o " 改行時の自動コメントアウトを無効化する 

autocommand <Lua 22: ~/.cache/dein/repos/github.com/nvim-treesitter/nvim-treesitter/lua/nvim-treesitter/install.lua:431>

Executing FileType Autocommands for "*"
autocommand call <sid>on_window_changed('FileType')

Executing FileType Autocommands for "*"
autocommand call s:Autocmd('FileType', expand('<amatch>'), +expand('<abuf>'))

Executing FileType Autocommands for "*"
autocommand <Lua 23: ~/.cache/dein/repos/github.com/nvim-treesitter/nvim-treesitter/lua/nvim-treesitter/configs.lua:107>

Executing FileType Autocommands for "fzf"
autocommand tnoremap <silent> <buffer> <Esc> <C-g>

autocommand nnoremap <silent> <buffer> <C-g> i<C-g>

autocommand vnoremap <silent> <buffer> <C-g> <Esc>i<C-g>

Executing FileType Autocommands for "fzf"
autocommand call fzf_preview#remote#window#set_fzf_last_query()

Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/coc)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/coc/highlight.vim"
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/coc/highlight.vim
Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing WinLeave Autocommands for "*"
autocommand call s:Autocmd('WinLeave', win_getid())

Executing WinLeave Autocommands for "*"
autocommand call s:Remove_Matches()

Executing WinClosed Autocommands for "*"
autocommand call s:HandleWinClosed(+expand('<amatch>'))

Executing BufWinLeave Autocommands for "*"
autocommand call s:Autocmd('BufWinLeave', +expand('<abuf>'), bufwinid(+expand('<abuf>')))

Executing BufUnload Autocommands for "*"
autocommand call <sid>on_window_changed('BufUnload')

Executing BufUnload Autocommands for "*"
autocommand call s:Autocmd('BufUnload', +expand('<abuf>'))

Executing WinEnter Autocommands for "*"
autocommand call s:dopopd()

Executing WinEnter Autocommands for "*"
autocommand call <sid>on_window_changed('WinEnter')

Executing WinEnter Autocommands for "*"
autocommand call coc#float#nvim_win_enter(win_getid())

autocommand call s:Autocmd('WinEnter', win_getid())

Executing WinEnter Autocommands for "*"
autocommand let g:fzf#vim#buffers[bufnr('')] = reltimefloat(reltime())

Executing WinEnter Autocommands for "*"
autocommand let s:tmux_is_last_pane = 0

Executing WinEnter Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing BufEnter Autocommands for "*"
autocommand set fo-=c fo-=r fo-=o

Executing BufEnter Autocommands for "*"
autocommand call s:Autocmd('BufEnter', +expand('<abuf>'))

Executing BufEnter Autocommands for "*"
autocommand if conflict_marker#detect#markers() | call s:on_detected() | endif

Executing BufEnter Autocommands for "*"
autocommand call s:mru_append(expand('<amatch>'))

[window] /Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c
Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing InsertEnter Autocommands for "*"
autocommand call s:Autocmd('InsertEnter', +expand('<abuf>'))

Executing InsertEnter Autocommands for "*"
autocommand call lexima#insmode#clear_stack()

autocommand call s:setup_insmode()

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing InsertLeave Autocommands for "*"
autocommand call s:Autocmd('InsertLeave', +expand('<abuf>'))

Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/coc)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 16: sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/coc/highlight.vim"
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/coc/highlight.vim
continuing in <SNR>61_request
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
Executing BufNew Autocommands for "*?"
autocommand call dein#autoload#_on_default_event('BufNew')

Executing BufWinLeave Autocommands for "*"
autocommand call s:Autocmd('BufWinLeave', +expand('<abuf>'), bufwinid(+expand('<abuf>')))

Executing BufHidden Autocommands for "*"
autocommand call s:Autocmd('BufHidden', +expand('<abuf>'))

Reading ShaDa file "/Users/tomoya_tanaka/.local/state/nvim/shada/main.shada" marks
Executing BufReadPost Autocommands for "*?"
autocommand call dein#autoload#_on_default_event('BufRead')

Executing BufReadPost Autocommands for "*"
autocommand <Lua 5: /opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/filetype.lua:11>

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
Executing FileType Autocommands for "*"
autocommand call s:LoadFTPlugin()

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/ftplugin)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 17: sourcing "/opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/ftplugin/text.vim"
finished sourcing /opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/ftplugin/text.vim
continuing in <SNR>2_LoadFTPlugin
not found in runtime path: "ftplugin/text.lua ftplugin/text_*.lua ftplugin/text/*.lua"
Executing FileType Autocommands for "*"
autocommand call s:LoadIndent()

not found in runtime path: "indent/text.vim"
not found in runtime path: "indent/text.lua"
Executing FileType Autocommands for "*?"
autocommand call dein#autoload#_on_default_event('FileType')

Executing FileType Autocommands for "*"
autocommand if !exists('b:ts_highlight') | 0verbose exe "set syntax=" . expand("<amatch>") | endif

Executing FileType Autocommands for "*"
autocommand set fo-=c fo-=r fo-=o

autocommand set fo-=c fo-=r fo-=o " 改行時の自動コメントアウトを無効化する 

autocommand <Lua 22: ~/.cache/dein/repos/github.com/nvim-treesitter/nvim-treesitter/lua/nvim-treesitter/install.lua:431>

Executing FileType Autocommands for "*"
autocommand call <sid>on_window_changed('FileType')

Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/airline/extensions/wordcount/formatters)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 1: sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/airline/extensions/wordcount/formatters/default.vim"
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/airline/extensions/wordcount/formatters/default.vim
continuing in <SNR>140_format_wordcount
Executing FileType Autocommands for "*"
autocommand call s:Autocmd('FileType', expand('<amatch>'), +expand('<abuf>'))

Executing FileType Autocommands for "*"
autocommand <Lua 23: ~/.cache/dein/repos/github.com/nvim-treesitter/nvim-treesitter/lua/nvim-treesitter/configs.lua:107>

Executing BufReadPost Autocommands for "*"
autocommand if getline(1) =~# '^#!.\+\<fish\>' |     setlocal filetype=fish | endif

Executing BufReadPost Autocommands for "*"
autocommand if !did_filetype() && expand('<amatch>') !~ g:ft_ignore_pat | runtime! scripts.vim | endif

Executing BufReadPost Autocommands for "*"
autocommand set laststatus=0 " This will work instead

Executing BufReadPost Autocommands for "*"
autocommand call s:Autocmd('BufCreate', +expand('<abuf>'))

Executing BufReadPost Autocommands for "*"
autocommand if conflict_marker#detect#markers() | call s:on_detected() | endif

Executing BufReadPost Autocommands for "*"
autocommand call s:UseConfigFiles()

Executing BufEnter Autocommands for "*"
autocommand set fo-=c fo-=r fo-=o

Executing BufEnter Autocommands for "*"
autocommand call s:Autocmd('BufEnter', +expand('<abuf>'))

Executing BufEnter Autocommands for "*"
autocommand if conflict_marker#detect#markers() | call s:on_detected() | endif

Executing BufEnter Autocommands for "*"
autocommand call s:mru_append(expand('<amatch>'))

Executing BufWinEnter Autocommands for "*"
autocommand call <sid>on_window_changed('BufWinEnter')

Executing BufWinEnter Autocommands for "*"
autocommand call s:Autocmd('BufWinEnter', +expand('<abuf>'), win_getid())

Executing BufWinEnter Autocommands for "*"
autocommand let g:fzf#vim#buffers[bufnr('')] = reltimefloat(reltime())

Executing BufWinEnter Autocommands for "*"
autocommand call s:mru_append(expand('<amatch>'))

[global] /Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c
Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing WinScrolled Autocommands for "*"
autocommand call s:HandleWinScrolled(+expand('<amatch>'))

Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorHold Autocommands for "*"
autocommand silent call CocActionAsync('highlight')

autocommand silent call CocActionAsync('highlight')

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing CursorHold Autocommands for "*"
autocommand silent call CocActionAsync('highlight')

autocommand silent call CocActionAsync('highlight')

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing command: "'/usr/bin/pbpaste'"


Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChanged Autocommands for "*"
autocommand call s:Autocmd('TextChanged', +expand('<abuf>'), getbufvar(+expand('<abuf>'), 'changedtick'))

Executing TextChanged Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorHold Autocommands for "*"
autocommand silent call CocActionAsync('highlight')

autocommand silent call CocActionAsync('highlight')

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing command: "'/usr/bin/pbcopy'"


Executing TextYankPost Autocommands for "*"
autocommand call highlightedyank#debounce()

Executing TextYankPost Autocommands for "*"
autocommand call coc#rpc#notify('doAutocmd', [2, v:event, +expand('<abuf>'), win_getid()])

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChanged Autocommands for "*"
autocommand call s:Autocmd('TextChanged', +expand('<abuf>'), getbufvar(+expand('<abuf>'), 'changedtick'))

Executing TextChanged Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()


Executing BufWritePre Autocommands for "*"
autocommand call s:SyncAutocmd('BufWritePre', +expand('<abuf>'), bufname(+expand('<abuf>')), getbufvar(+expand('<abuf>'), 'changedtick'))

"stdin.txt" 
"stdin.txt" 4L, 20B written
Executing BufWritePost Autocommands for "*"
autocommand call s:Autocmd('BufWritePost', +expand('<abuf>'), getbufvar(+expand('<abuf>'), 'changedtick'))

Executing BufWritePost Autocommands for "*"
autocommand call s:reset_untracked_cache(0)

Executing BufWritePost Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing BufWritePost Autocommands for "*"
autocommand call s:mru_append(expand('<amatch>'))

autocommand call s:mrw_append(expand('<amatch>'))

"stdin.txt" 4L, 20B written
Executing CursorHold Autocommands for "*"
autocommand silent call CocActionAsync('highlight')

autocommand silent call CocActionAsync('highlight')

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call <sid>ws_refresh()

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/projects/github.com/lit-kansai/dj-system-admin/src/pages/example)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
Executing BufNew Autocommands for "*?"
autocommand call dein#autoload#_on_default_event('BufNew')

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/projects/github.com/lit-kansai/dj-system-admin/.nuxt)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
Executing BufNew Autocommands for "*?"
autocommand call dein#autoload#_on_default_event('BufNew')

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/projects/github.com/lit-kansai/dj-system-admin/node_modules/@vue/runtime-core/dist)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
Executing BufNew Autocommands for "*?"
autocommand call dein#autoload#_on_default_event('BufNew')

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/projects/github.com/lit-kansai/dj-system-admin/src/features/post/components)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
Executing BufNew Autocommands for "*?"
autocommand call dein#autoload#_on_default_event('BufNew')

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/projects/github.com/lit-kansai/dj-system-admin/src/features/post/api)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
Executing BufNew Autocommands for "*?"
autocommand call dein#autoload#_on_default_event('BufNew')

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/projects/github.com/lit-kansai/dj-system-admin)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
Executing BufNew Autocommands for "*?"
autocommand call dein#autoload#_on_default_event('BufNew')

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/projects/github.com/lit-kansai/dj-system-admin/src/features/post/api)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
Executing BufNew Autocommands for "*?"
autocommand call dein#autoload#_on_default_event('BufNew')

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
Executing BufNew Autocommands for "*?"
autocommand call dein#autoload#_on_default_event('BufNew')

Executing BufWinLeave Autocommands for "*"
autocommand call s:Autocmd('BufWinLeave', +expand('<abuf>'), bufwinid(+expand('<abuf>')))

Executing BufHidden Autocommands for "*"
autocommand call s:Autocmd('BufHidden', +expand('<abuf>'))

Executing BufEnter Autocommands for "*"
autocommand set fo-=c fo-=r fo-=o

Executing BufEnter Autocommands for "*"
autocommand call s:Autocmd('BufEnter', +expand('<abuf>'))

Executing BufEnter Autocommands for "*"
autocommand if conflict_marker#detect#markers() | call s:on_detected() | endif

Executing BufEnter Autocommands for "*"
autocommand call s:mru_append(expand('<amatch>'))

Executing BufWinEnter Autocommands for "*"
autocommand call <sid>on_window_changed('BufWinEnter')

Executing BufWinEnter Autocommands for "*"
autocommand call s:Autocmd('BufWinEnter', +expand('<abuf>'), win_getid())

Executing BufWinEnter Autocommands for "*"
autocommand let g:fzf#vim#buffers[bufnr('')] = reltimefloat(reltime())

Executing BufWinEnter Autocommands for "*"
autocommand call s:mru_append(expand('<amatch>'))


Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing WinScrolled Autocommands for "*"
autocommand call s:HandleWinScrolled(+expand('<amatch>'))

Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorHold Autocommands for "*"
autocommand silent call CocActionAsync('highlight')

autocommand silent call CocActionAsync('highlight')

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing BufWinLeave Autocommands for "*"
autocommand call s:Autocmd('BufWinLeave', +expand('<abuf>'), bufwinid(+expand('<abuf>')))

Executing BufHidden Autocommands for "*"
autocommand call s:Autocmd('BufHidden', +expand('<abuf>'))

Executing BufEnter Autocommands for "*"
autocommand set fo-=c fo-=r fo-=o

Executing BufEnter Autocommands for "*"
autocommand call s:Autocmd('BufEnter', +expand('<abuf>'))

Executing BufEnter Autocommands for "*"
autocommand if conflict_marker#detect#markers() | call s:on_detected() | endif

Executing BufEnter Autocommands for "*"
autocommand call s:mru_append(expand('<amatch>'))

Executing BufWinEnter Autocommands for "*"
autocommand call <sid>on_window_changed('BufWinEnter')

Executing BufWinEnter Autocommands for "*"
autocommand call s:Autocmd('BufWinEnter', +expand('<abuf>'), win_getid())

Executing BufWinEnter Autocommands for "*"
autocommand let g:fzf#vim#buffers[bufnr('')] = reltimefloat(reltime())

Executing BufWinEnter Autocommands for "*"
autocommand call s:mru_append(expand('<amatch>'))


Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing WinScrolled Autocommands for "*"
autocommand call s:HandleWinScrolled(+expand('<amatch>'))

Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing BufWinLeave Autocommands for "*"
autocommand call s:Autocmd('BufWinLeave', +expand('<abuf>'), bufwinid(+expand('<abuf>')))

Executing BufHidden Autocommands for "*"
autocommand call s:Autocmd('BufHidden', +expand('<abuf>'))

Executing BufEnter Autocommands for "*"
autocommand set fo-=c fo-=r fo-=o

Executing BufEnter Autocommands for "*"
autocommand call s:Autocmd('BufEnter', +expand('<abuf>'))

Executing BufEnter Autocommands for "*"
autocommand if conflict_marker#detect#markers() | call s:on_detected() | endif

Executing BufEnter Autocommands for "*"
autocommand call s:mru_append(expand('<amatch>'))

Executing BufWinEnter Autocommands for "*"
autocommand call <sid>on_window_changed('BufWinEnter')

Executing BufWinEnter Autocommands for "*"
autocommand call s:Autocmd('BufWinEnter', +expand('<abuf>'), win_getid())

Executing BufWinEnter Autocommands for "*"
autocommand let g:fzf#vim#buffers[bufnr('')] = reltimefloat(reltime())

Executing BufWinEnter Autocommands for "*"
autocommand call s:mru_append(expand('<amatch>'))


Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing WinScrolled Autocommands for "*"
autocommand call s:HandleWinScrolled(+expand('<amatch>'))

Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorHold Autocommands for "*"
autocommand silent call CocActionAsync('highlight')

autocommand silent call CocActionAsync('highlight')

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()


Executing BufWritePre Autocommands for "*"
autocommand call s:SyncAutocmd('BufWritePre', +expand('<abuf>'), bufname(+expand('<abuf>')), getbufvar(+expand('<abuf>'), 'changedtick'))

"index.cpp" 
"index.cpp" 50L, 934B written
Executing BufWritePost Autocommands for "*"
autocommand call s:Autocmd('BufWritePost', +expand('<abuf>'), getbufvar(+expand('<abuf>'), 'changedtick'))

Executing BufWritePost Autocommands for "*"
autocommand call s:reset_untracked_cache(0)

Executing BufWritePost Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing BufWritePost Autocommands for "*"
autocommand call s:mru_append(expand('<amatch>'))

autocommand call s:mrw_append(expand('<amatch>'))

"index.cpp" 50L, 934B written
Executing CursorHold Autocommands for "*"
autocommand silent call CocActionAsync('highlight')

autocommand silent call CocActionAsync('highlight')

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()


chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/quickrun)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/quickrun/command.vim"
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 1: sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/quickrun.vim"
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/vital)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 5: sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/vital/quickrun.vim"
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/vital/quickrun.vim
continuing in /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/quickrun.vim
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/vital/_quickrun/Data)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 3: sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/vital/_quickrun/Data/List.vim"
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/vital/_quickrun/Data/List.vim
continuing in <SNR>202__get_module
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/vital)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 1: sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/vital/_quickrun.vim"
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/vital/_quickrun.vim
continuing in vital#_quickrun#Data#List#import
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/vital/_quickrun/System)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 3: sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/vital/_quickrun/System/File.vim"
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/vital/_quickrun/System/File.vim
continuing in <SNR>202__get_module
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/vital/_quickrun/System)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 3: sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/vital/_quickrun/System/Filepath.vim"
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/vital/_quickrun/System/Filepath.vim
continuing in <SNR>202__get_module
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/vital/_quickrun/Vim)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 3: sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/vital/_quickrun/Vim/Message.vim"
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/vital/_quickrun/Vim/Message.vim
continuing in <SNR>202__get_module
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/vital/_quickrun)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 3: sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/vital/_quickrun/Process.vim"
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/vital/_quickrun/Process.vim
continuing in <SNR>202__get_module
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/quickrun)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 804: sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/quickrun/module.vim"
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/quickrun/module.vim
continuing in /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/quickrun.vim
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/quickrun/hook)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 7: sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/quickrun/hook/cd.vim"
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/quickrun/hook/cd.vim
continuing in quickrun#module#load
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/quickrun/hook)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 7: sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/quickrun/hook/eval.vim"
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/quickrun/hook/eval.vim
continuing in quickrun#module#load
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/quickrun/hook)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 7: sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/quickrun/hook/output_encode.vim"
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/quickrun/hook/output_encode.vim
continuing in quickrun#module#load
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/quickrun/hook)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 7: sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/quickrun/hook/shebang.vim"
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/quickrun/hook/shebang.vim
continuing in quickrun#module#load
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/quickrun/hook)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 7: sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/quickrun/hook/sweep.vim"
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/quickrun/hook/sweep.vim
continuing in quickrun#module#load
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/quickrun/hook)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 7: sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/quickrun/hook/time.vim"
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/quickrun/hook/time.vim
continuing in quickrun#module#load
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/quickrun/outputter)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 7: sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/quickrun/outputter/browser.vim"
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/quickrun/outputter)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 7: sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/quickrun/outputter/file.vim"
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/quickrun/outputter/file.vim
continuing in /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/quickrun/outputter/browser.vim
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/quickrun/outputter/browser.vim
continuing in quickrun#module#load
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/quickrun/outputter)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 7: sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/quickrun/outputter/buffer.vim"
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/quickrun/outputter/buffer.vim
continuing in quickrun#module#load
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/quickrun/outputter)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 7: sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/quickrun/outputter/buffered.vim"
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/quickrun/outputter/buffered.vim
continuing in quickrun#module#load
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/quickrun/outputter)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 7: sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/quickrun/outputter/buffer_legacy.vim"
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/vital/_quickrun/Vim)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 3: sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/vital/_quickrun/Vim/ViewTracer.vim"
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/vital/_quickrun/Vim/ViewTracer.vim
continuing in <SNR>202__get_module
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/quickrun/outputter/buffer_legacy.vim
continuing in quickrun#module#load
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/quickrun/outputter)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 7: sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/quickrun/outputter/error.vim"
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/quickrun/outputter/error.vim
continuing in quickrun#module#load
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/quickrun/outputter)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 7: sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/quickrun/outputter/loclist.vim"
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/quickrun/outputter)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 5: sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/quickrun/outputter/quickfix.vim"
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/quickrun/outputter/quickfix.vim
continuing in /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/quickrun/outputter/loclist.vim
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/quickrun/outputter/loclist.vim
continuing in quickrun#module#load
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/quickrun/outputter)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 7: sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/quickrun/outputter/message.vim"
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/quickrun/outputter/message.vim
continuing in quickrun#module#load
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/quickrun/outputter)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 7: sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/quickrun/outputter/multi.vim"
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/quickrun/outputter/multi.vim
continuing in quickrun#module#load
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/quickrun/outputter)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 7: sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/quickrun/outputter/null.vim"
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/quickrun/outputter/null.vim
continuing in quickrun#module#load
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/quickrun/outputter)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 7: sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/quickrun/outputter/popup.vim"
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/quickrun/outputter/popup.vim
continuing in quickrun#module#load
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/quickrun/outputter)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 7: sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/quickrun/outputter/variable.vim"
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/quickrun/outputter/variable.vim
continuing in quickrun#module#load
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/quickrun/runner)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 7: sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/quickrun/runner/concurrent_process.vim"
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/vital/_quickrun/Vim)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 3: sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/vital/_quickrun/Vim/Buffer.vim"
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/vital/_quickrun/Vim/Buffer.vim
continuing in <SNR>202__get_module
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/vital/_quickrun/Vim)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 3: sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/vital/_quickrun/Vim/Guard.vim"
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/vital/_quickrun/Vim/Guard.vim
continuing in <SNR>202__get_module
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/vital/_quickrun)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 3: sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/vital/_quickrun/Prelude.vim"
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/vital/_quickrun/Prelude.vim
continuing in <SNR>202__get_module
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/vital/_quickrun/Data)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 3: sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/vital/_quickrun/Data/Dict.vim"
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/vital/_quickrun/Data/Dict.vim
continuing in <SNR>202__get_module
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/vital/_quickrun/Vim)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 3: sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/vital/_quickrun/Vim/Type.vim"
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/vital/_quickrun/Vim/Type.vim
continuing in <SNR>202__get_module
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/vital/_quickrun)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 3: sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/vital/_quickrun/ConcurrentProcess.vim"
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/vital/_quickrun/ConcurrentProcess.vim
continuing in <SNR>202__get_module
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/vital/_quickrun/Data)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 3: sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/vital/_quickrun/Data/String.vim"
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/vital/_quickrun/Data/String.vim
continuing in <SNR>202__get_module
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/quickrun/runner/concurrent_process.vim
continuing in quickrun#module#load
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/quickrun/runner)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 7: sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/quickrun/runner/job.vim"
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/quickrun/runner/job.vim
continuing in quickrun#module#load
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/quickrun/runner)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 7: sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/quickrun/runner/python.vim"
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/quickrun/runner/python.vim
continuing in quickrun#module#load
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/quickrun/runner)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 7: sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/quickrun/runner/remote.vim"
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/quickrun/runner/remote.vim
continuing in quickrun#module#load
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/quickrun/runner)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 7: sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/quickrun/runner/shell.vim"
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/quickrun/runner/shell.vim
continuing in quickrun#module#load
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/quickrun/runner)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 7: sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/quickrun/runner/system.vim"
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/quickrun/runner/system.vim
continuing in quickrun#module#load
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/quickrun/runner)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 7: sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/quickrun/runner/terminal.vim"
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/quickrun/runner/terminal.vim
continuing in quickrun#module#load
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/quickrun/runner)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 7: sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/quickrun/runner/vimproc.vim"
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/quickrun/runner/vimproc.vim
continuing in quickrun#module#load
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/quickrun/runner)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 7: sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/quickrun/runner/vimscript.vim"
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/quickrun/runner/vimscript.vim
continuing in quickrun#module#load
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/quickrun.vim
continuing in /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/quickrun/command.vim
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/quickrun/command.vim
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/quickrun)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 1: sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/quickrun/session.vim"
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/quickrun/session.vim
continuing in quickrun#run
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/quickrun)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 1: sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/quickrun/config.vim"
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/quickrun/config.vim
continuing in quickrun#new
Executing WinLeave Autocommands for "*"
autocommand call s:Autocmd('WinLeave', win_getid())

Executing WinLeave Autocommands for "*"
autocommand call s:Remove_Matches()

Executing WinEnter Autocommands for "*"
autocommand call s:dopopd()

Executing WinEnter Autocommands for "*"
autocommand call <sid>on_window_changed('WinEnter')

Executing WinEnter Autocommands for "*"
autocommand call coc#float#nvim_win_enter(win_getid())

autocommand call s:Autocmd('WinEnter', win_getid())

Executing WinEnter Autocommands for "*"
autocommand let g:fzf#vim#buffers[bufnr('')] = reltimefloat(reltime())

Executing WinEnter Autocommands for "*"
autocommand let s:tmux_is_last_pane = 0

Executing WinEnter Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing WinEnter Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing BufNew Autocommands for "*?"
autocommand call dein#autoload#_on_default_event('BufNew')

Reading ShaDa file "/Users/tomoya_tanaka/.local/state/nvim/shada/main.shada" marks
Executing BufNewFile Autocommands for "*?"
autocommand call dein#autoload#_on_default_event('BufNew')

Executing BufNewFile Autocommands for "*"
autocommand <Lua 6: /opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/filetype.lua:11>

Executing BufNewFile Autocommands for "*"
autocommand if !did_filetype() && expand('<amatch>') !~ g:ft_ignore_pat | runtime! scripts.vim | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 0: sourcing "/opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/scripts.vim"
finished sourcing /opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/scripts.vim
continuing in BufNewFile Autocommands for "*"
Executing BufNewFile Autocommands for "*"
autocommand set laststatus=0 " This will work instead

Executing BufNewFile Autocommands for "*"
autocommand call s:Autocmd('BufCreate', +expand('<abuf>'))

Executing BufNewFile Autocommands for "*"
autocommand call s:UseConfigFiles()

Executing BufEnter Autocommands for "*"
autocommand set fo-=c fo-=r fo-=o

Executing BufEnter Autocommands for "*"
autocommand call s:Autocmd('BufEnter', +expand('<abuf>'))

Executing BufEnter Autocommands for "*"
autocommand if conflict_marker#detect#markers() | call s:on_detected() | endif

Executing BufEnter Autocommands for "*"
autocommand call s:mru_append(expand('<amatch>'))

Executing BufWinEnter Autocommands for "*"
autocommand call <sid>on_window_changed('BufWinEnter')

Executing BufWinEnter Autocommands for "*"
autocommand call s:Autocmd('BufWinEnter', +expand('<abuf>'), win_getid())

Executing BufWinEnter Autocommands for "*"
autocommand let g:fzf#vim#buffers[bufnr('')] = reltimefloat(reltime())

Executing BufWinEnter Autocommands for "*"
autocommand call s:mru_append(expand('<amatch>'))

Executing BufDelete Autocommands for "*"
autocommand silent! call remove(g:fzf#vim#buffers, expand('<abuf>'))

Executing FileType Autocommands for "*"
autocommand call s:LoadFTPlugin()

not found in runtime path: "ftplugin/quickrun.vim ftplugin/quickrun_*.vim ftplugin/quickrun/*.vim"
not found in runtime path: "ftplugin/quickrun.lua ftplugin/quickrun_*.lua ftplugin/quickrun/*.lua"
Executing FileType Autocommands for "*"
autocommand call s:LoadIndent()

not found in runtime path: "indent/quickrun.vim"
not found in runtime path: "indent/quickrun.lua"
Executing FileType Autocommands for "*?"
autocommand call dein#autoload#_on_default_event('FileType')

Executing FileType Autocommands for "*"
autocommand if !exists('b:ts_highlight') | 0verbose exe "set syntax=" . expand("<amatch>") | endif

Executing FileType Autocommands for "*"
autocommand set fo-=c fo-=r fo-=o

autocommand set fo-=c fo-=r fo-=o " 改行時の自動コメントアウトを無効化する 

autocommand <Lua 22: ~/.cache/dein/repos/github.com/nvim-treesitter/nvim-treesitter/lua/nvim-treesitter/install.lua:431>

Executing FileType Autocommands for "*"
autocommand call <sid>on_window_changed('FileType')

Executing FileType Autocommands for "*"
autocommand call s:Autocmd('FileType', expand('<amatch>'), +expand('<abuf>'))

Executing FileType Autocommands for "*"
autocommand <Lua 23: ~/.cache/dein/repos/github.com/nvim-treesitter/nvim-treesitter/lua/nvim-treesitter/configs.lua:107>

Executing WinLeave Autocommands for "*"
autocommand call s:Autocmd('WinLeave', win_getid())

Executing WinLeave Autocommands for "*"
autocommand call s:Remove_Matches()

Executing WinEnter Autocommands for "*"
autocommand call s:dopopd()

Executing WinEnter Autocommands for "*"
autocommand call <sid>on_window_changed('WinEnter')

Executing WinEnter Autocommands for "*"
autocommand call coc#float#nvim_win_enter(win_getid())

autocommand call s:Autocmd('WinEnter', win_getid())

Executing WinEnter Autocommands for "*"
autocommand let g:fzf#vim#buffers[bufnr('')] = reltimefloat(reltime())

Executing WinEnter Autocommands for "*"
autocommand let s:tmux_is_last_pane = 0

Executing WinEnter Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing WinEnter Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing BufEnter Autocommands for "*"
autocommand set fo-=c fo-=r fo-=o

Executing BufEnter Autocommands for "*"
autocommand call s:Autocmd('BufEnter', +expand('<abuf>'))

Executing BufEnter Autocommands for "*"
autocommand if conflict_marker#detect#markers() | call s:on_detected() | endif

Executing BufEnter Autocommands for "*"
autocommand call s:mru_append(expand('<amatch>'))

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing command: "'/bin/zsh' '-c' ''/usr/bin/g++' -std=c++14 -Wall -Wextra --pedantic-errors '/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c/index.cpp' -o '/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207..."


Executing command: "'/bin/zsh' '-c' ''/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c/index' '"


Executing WinLeave Autocommands for "*"
autocommand call s:Autocmd('WinLeave', win_getid())

Executing WinLeave Autocommands for "*"
autocommand call s:Remove_Matches()

Executing WinEnter Autocommands for "*"
autocommand call s:dopopd()

Executing WinEnter Autocommands for "*"
autocommand call <sid>on_window_changed('WinEnter')

Executing WinEnter Autocommands for "*"
autocommand call coc#float#nvim_win_enter(win_getid())

autocommand call s:Autocmd('WinEnter', win_getid())

Executing WinEnter Autocommands for "*"
autocommand let g:fzf#vim#buffers[bufnr('')] = reltimefloat(reltime())

Executing WinEnter Autocommands for "*"
autocommand let s:tmux_is_last_pane = 0

Executing WinEnter Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing WinEnter Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing BufEnter Autocommands for "*"
autocommand set fo-=c fo-=r fo-=o

Executing BufEnter Autocommands for "*"
autocommand call s:Autocmd('BufEnter', +expand('<abuf>'))

Executing BufEnter Autocommands for "*"
autocommand if conflict_marker#detect#markers() | call s:on_detected() | endif

Executing BufEnter Autocommands for "*"
autocommand call s:mru_append(expand('<amatch>'))

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing WinLeave Autocommands for "*"
autocommand call s:Autocmd('WinLeave', win_getid())

Executing WinLeave Autocommands for "*"
autocommand call s:Remove_Matches()

Executing WinEnter Autocommands for "*"
autocommand call s:dopopd()

Executing WinEnter Autocommands for "*"
autocommand call <sid>on_window_changed('WinEnter')

Executing WinEnter Autocommands for "*"
autocommand call coc#float#nvim_win_enter(win_getid())

autocommand call s:Autocmd('WinEnter', win_getid())

Executing WinEnter Autocommands for "*"
autocommand let g:fzf#vim#buffers[bufnr('')] = reltimefloat(reltime())

Executing WinEnter Autocommands for "*"
autocommand let s:tmux_is_last_pane = 0

Executing WinEnter Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing WinEnter Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing BufEnter Autocommands for "*"
autocommand set fo-=c fo-=r fo-=o

Executing BufEnter Autocommands for "*"
autocommand call s:Autocmd('BufEnter', +expand('<abuf>'))

Executing BufEnter Autocommands for "*"
autocommand if conflict_marker#detect#markers() | call s:on_detected() | endif

Executing BufEnter Autocommands for "*"
autocommand call s:mru_append(expand('<amatch>'))

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing WinScrolled Autocommands for "*"
autocommand call s:HandleWinScrolled(+expand('<amatch>'))

Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing User Autocommands for "AirlineModeChanged"
autocommand call airline#mode_changed()

Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/coc)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/coc/highlight.vim"
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/coc/highlight.vim
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/coc)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/coc/highlight.vim"
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/coc/highlight.vim
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/coc)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/coc/highlight.vim"
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/coc/highlight.vim
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/coc)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/coc/highlight.vim"
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/coc/highlight.vim
Executing CursorHold Autocommands for "*"
autocommand silent call CocActionAsync('highlight')

autocommand silent call CocActionAsync('highlight')

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing WinScrolled Autocommands for "*"
autocommand call s:HandleWinScrolled(+expand('<amatch>'))

Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing WinScrolled Autocommands for "*"
autocommand call s:HandleWinScrolled(+expand('<amatch>'))

Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing WinScrolled Autocommands for "*"
autocommand call s:HandleWinScrolled(+expand('<amatch>'))

Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing WinScrolled Autocommands for "*"
autocommand call s:HandleWinScrolled(+expand('<amatch>'))

Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing WinScrolled Autocommands for "*"
autocommand call s:HandleWinScrolled(+expand('<amatch>'))

Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing WinScrolled Autocommands for "*"
autocommand call s:HandleWinScrolled(+expand('<amatch>'))

Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing WinScrolled Autocommands for "*"
autocommand call s:HandleWinScrolled(+expand('<amatch>'))

Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing WinScrolled Autocommands for "*"
autocommand call s:HandleWinScrolled(+expand('<amatch>'))

Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing WinScrolled Autocommands for "*"
autocommand call s:HandleWinScrolled(+expand('<amatch>'))

Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing WinScrolled Autocommands for "*"
autocommand call s:HandleWinScrolled(+expand('<amatch>'))

Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing WinScrolled Autocommands for "*"
autocommand call s:HandleWinScrolled(+expand('<amatch>'))

Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing WinScrolled Autocommands for "*"
autocommand call s:HandleWinScrolled(+expand('<amatch>'))

Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing WinScrolled Autocommands for "*"
autocommand call s:HandleWinScrolled(+expand('<amatch>'))

Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing WinScrolled Autocommands for "*"
autocommand call s:HandleWinScrolled(+expand('<amatch>'))

Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing WinScrolled Autocommands for "*"
autocommand call s:HandleWinScrolled(+expand('<amatch>'))

Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing WinScrolled Autocommands for "*"
autocommand call s:HandleWinScrolled(+expand('<amatch>'))

Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing WinScrolled Autocommands for "*"
autocommand call s:HandleWinScrolled(+expand('<amatch>'))

Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing WinScrolled Autocommands for "*"
autocommand call s:HandleWinScrolled(+expand('<amatch>'))

Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing WinScrolled Autocommands for "*"
autocommand call s:HandleWinScrolled(+expand('<amatch>'))

Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing WinScrolled Autocommands for "*"
autocommand call s:HandleWinScrolled(+expand('<amatch>'))

Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing WinScrolled Autocommands for "*"
autocommand call s:HandleWinScrolled(+expand('<amatch>'))

Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing WinScrolled Autocommands for "*"
autocommand call s:HandleWinScrolled(+expand('<amatch>'))

Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing WinScrolled Autocommands for "*"
autocommand call s:HandleWinScrolled(+expand('<amatch>'))

Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing WinScrolled Autocommands for "*"
autocommand call s:HandleWinScrolled(+expand('<amatch>'))

Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing WinScrolled Autocommands for "*"
autocommand call s:HandleWinScrolled(+expand('<amatch>'))

Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing WinScrolled Autocommands for "*"
autocommand call s:HandleWinScrolled(+expand('<amatch>'))

Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing WinScrolled Autocommands for "*"
autocommand call s:HandleWinScrolled(+expand('<amatch>'))

Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing WinScrolled Autocommands for "*"
autocommand call s:HandleWinScrolled(+expand('<amatch>'))

Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing WinScrolled Autocommands for "*"
autocommand call s:HandleWinScrolled(+expand('<amatch>'))

Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing WinScrolled Autocommands for "*"
autocommand call s:HandleWinScrolled(+expand('<amatch>'))

Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing WinScrolled Autocommands for "*"
autocommand call s:HandleWinScrolled(+expand('<amatch>'))

Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing WinScrolled Autocommands for "*"
autocommand call s:HandleWinScrolled(+expand('<amatch>'))

Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorHold Autocommands for "*"
autocommand silent call CocActionAsync('highlight')

autocommand silent call CocActionAsync('highlight')

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing WinScrolled Autocommands for "*"
autocommand call s:HandleWinScrolled(+expand('<amatch>'))

Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorHold Autocommands for "*"
autocommand silent call CocActionAsync('highlight')

autocommand silent call CocActionAsync('highlight')

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorHold Autocommands for "*"
autocommand silent call CocActionAsync('highlight')

autocommand silent call CocActionAsync('highlight')

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorHold Autocommands for "*"
autocommand silent call CocActionAsync('highlight')

autocommand silent call CocActionAsync('highlight')

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorHold Autocommands for "*"
autocommand silent call CocActionAsync('highlight')

autocommand silent call CocActionAsync('highlight')

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorHold Autocommands for "*"
autocommand silent call CocActionAsync('highlight')

autocommand silent call CocActionAsync('highlight')

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorHold Autocommands for "*"
autocommand silent call CocActionAsync('highlight')

autocommand silent call CocActionAsync('highlight')

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorHold Autocommands for "*"
autocommand silent call CocActionAsync('highlight')

autocommand silent call CocActionAsync('highlight')

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorHold Autocommands for "*"
autocommand silent call CocActionAsync('highlight')

autocommand silent call CocActionAsync('highlight')

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorHold Autocommands for "*"
autocommand silent call CocActionAsync('highlight')

autocommand silent call CocActionAsync('highlight')

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorHold Autocommands for "*"
autocommand silent call CocActionAsync('highlight')

autocommand silent call CocActionAsync('highlight')

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorHold Autocommands for "*"
autocommand silent call CocActionAsync('highlight')

autocommand silent call CocActionAsync('highlight')

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorHold Autocommands for "*"
autocommand silent call CocActionAsync('highlight')

autocommand silent call CocActionAsync('highlight')

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorHold Autocommands for "*"
autocommand silent call CocActionAsync('highlight')

autocommand silent call CocActionAsync('highlight')

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorHold Autocommands for "*"
autocommand silent call CocActionAsync('highlight')

autocommand silent call CocActionAsync('highlight')

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorHold Autocommands for "*"
autocommand silent call CocActionAsync('highlight')

autocommand silent call CocActionAsync('highlight')

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorHold Autocommands for "*"
autocommand silent call CocActionAsync('highlight')

autocommand silent call CocActionAsync('highlight')

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing WinScrolled Autocommands for "*"
autocommand call s:HandleWinScrolled(+expand('<amatch>'))

Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing WinScrolled Autocommands for "*"
autocommand call s:HandleWinScrolled(+expand('<amatch>'))

Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing WinScrolled Autocommands for "*"
autocommand call s:HandleWinScrolled(+expand('<amatch>'))

Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing WinScrolled Autocommands for "*"
autocommand call s:HandleWinScrolled(+expand('<amatch>'))

Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing WinScrolled Autocommands for "*"
autocommand call s:HandleWinScrolled(+expand('<amatch>'))

Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing WinScrolled Autocommands for "*"
autocommand call s:HandleWinScrolled(+expand('<amatch>'))

Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing WinScrolled Autocommands for "*"
autocommand call s:HandleWinScrolled(+expand('<amatch>'))

Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing WinScrolled Autocommands for "*"
autocommand call s:HandleWinScrolled(+expand('<amatch>'))

Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing WinScrolled Autocommands for "*"
autocommand call s:HandleWinScrolled(+expand('<amatch>'))

Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing WinScrolled Autocommands for "*"
autocommand call s:HandleWinScrolled(+expand('<amatch>'))

Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing WinScrolled Autocommands for "*"
autocommand call s:HandleWinScrolled(+expand('<amatch>'))

Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing WinScrolled Autocommands for "*"
autocommand call s:HandleWinScrolled(+expand('<amatch>'))

Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing WinScrolled Autocommands for "*"
autocommand call s:HandleWinScrolled(+expand('<amatch>'))

Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing WinScrolled Autocommands for "*"
autocommand call s:HandleWinScrolled(+expand('<amatch>'))

Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing WinScrolled Autocommands for "*"
autocommand call s:HandleWinScrolled(+expand('<amatch>'))

Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing WinScrolled Autocommands for "*"
autocommand call s:HandleWinScrolled(+expand('<amatch>'))

Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing WinScrolled Autocommands for "*"
autocommand call s:HandleWinScrolled(+expand('<amatch>'))

Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()


Executing BufWritePre Autocommands for "*"
autocommand call s:SyncAutocmd('BufWritePre', +expand('<abuf>'), bufname(+expand('<abuf>')), getbufvar(+expand('<abuf>'), 'changedtick'))

"index.cpp" 
"index.cpp" 50L, 934B written
Executing BufWritePost Autocommands for "*"
autocommand call s:Autocmd('BufWritePost', +expand('<abuf>'), getbufvar(+expand('<abuf>'), 'changedtick'))

Executing BufWritePost Autocommands for "*"
autocommand call s:reset_untracked_cache(0)

Executing BufWritePost Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing BufWritePost Autocommands for "*"
autocommand call s:mru_append(expand('<amatch>'))

autocommand call s:mrw_append(expand('<amatch>'))

"index.cpp" 50L, 934B written
Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing WinScrolled Autocommands for "*"
autocommand call s:HandleWinScrolled(+expand('<amatch>'))

Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing WinScrolled Autocommands for "*"
autocommand call s:HandleWinScrolled(+expand('<amatch>'))

Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing WinScrolled Autocommands for "*"
autocommand call s:HandleWinScrolled(+expand('<amatch>'))

Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing WinScrolled Autocommands for "*"
autocommand call s:HandleWinScrolled(+expand('<amatch>'))

Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing WinScrolled Autocommands for "*"
autocommand call s:HandleWinScrolled(+expand('<amatch>'))

Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing WinScrolled Autocommands for "*"
autocommand call s:HandleWinScrolled(+expand('<amatch>'))

Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing WinScrolled Autocommands for "*"
autocommand call s:HandleWinScrolled(+expand('<amatch>'))

Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing WinScrolled Autocommands for "*"
autocommand call s:HandleWinScrolled(+expand('<amatch>'))

Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing WinScrolled Autocommands for "*"
autocommand call s:HandleWinScrolled(+expand('<amatch>'))

Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorHold Autocommands for "*"
autocommand silent call CocActionAsync('highlight')

autocommand silent call CocActionAsync('highlight')

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing WinScrolled Autocommands for "*"
autocommand call s:HandleWinScrolled(+expand('<amatch>'))

Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing WinScrolled Autocommands for "*"
autocommand call s:HandleWinScrolled(+expand('<amatch>'))

Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing WinScrolled Autocommands for "*"
autocommand call s:HandleWinScrolled(+expand('<amatch>'))

Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing WinScrolled Autocommands for "*"
autocommand call s:HandleWinScrolled(+expand('<amatch>'))

Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing WinScrolled Autocommands for "*"
autocommand call s:HandleWinScrolled(+expand('<amatch>'))

Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing WinScrolled Autocommands for "*"
autocommand call s:HandleWinScrolled(+expand('<amatch>'))

Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorHold Autocommands for "*"
autocommand silent call CocActionAsync('highlight')

autocommand silent call CocActionAsync('highlight')

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing WinScrolled Autocommands for "*"
autocommand call s:HandleWinScrolled(+expand('<amatch>'))

Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorHold Autocommands for "*"
autocommand silent call CocActionAsync('highlight')

autocommand silent call CocActionAsync('highlight')

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing WinScrolled Autocommands for "*"
autocommand call s:HandleWinScrolled(+expand('<amatch>'))

Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorHold Autocommands for "*"
autocommand silent call CocActionAsync('highlight')

autocommand silent call CocActionAsync('highlight')

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing WinScrolled Autocommands for "*"
autocommand call s:HandleWinScrolled(+expand('<amatch>'))

Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorHold Autocommands for "*"
autocommand silent call CocActionAsync('highlight')

autocommand silent call CocActionAsync('highlight')

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing WinScrolled Autocommands for "*"
autocommand call s:HandleWinScrolled(+expand('<amatch>'))

Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorHold Autocommands for "*"
autocommand silent call CocActionAsync('highlight')

autocommand silent call CocActionAsync('highlight')

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing WinScrolled Autocommands for "*"
autocommand call s:HandleWinScrolled(+expand('<amatch>'))

Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorHold Autocommands for "*"
autocommand silent call CocActionAsync('highlight')

autocommand silent call CocActionAsync('highlight')

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorHold Autocommands for "*"
autocommand silent call CocActionAsync('highlight')

autocommand silent call CocActionAsync('highlight')

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorHold Autocommands for "*"
autocommand silent call CocActionAsync('highlight')

autocommand silent call CocActionAsync('highlight')

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorHold Autocommands for "*"
autocommand silent call CocActionAsync('highlight')

autocommand silent call CocActionAsync('highlight')

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorHold Autocommands for "*"
autocommand silent call CocActionAsync('highlight')

autocommand silent call CocActionAsync('highlight')

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorHold Autocommands for "*"
autocommand silent call CocActionAsync('highlight')

autocommand silent call CocActionAsync('highlight')

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorHold Autocommands for "*"
autocommand silent call CocActionAsync('highlight')

autocommand silent call CocActionAsync('highlight')

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing InsertEnter Autocommands for "*"
autocommand call s:Autocmd('InsertEnter', +expand('<abuf>'))

Executing InsertEnter Autocommands for "*"
autocommand call lexima#insmode#clear_stack()

autocommand call s:setup_insmode()

Executing InsertEnter Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMovedI Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMovedI Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing CursorHoldI Autocommands for "*"
autocommand call s:Autocmd('CursorHoldI', +expand('<abuf>'), [line('.'), col('.')])

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing InsertLeave Autocommands for "*"
autocommand call s:Autocmd('InsertLeave', +expand('<abuf>'))

Executing InsertLeave Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorHold Autocommands for "*"
autocommand silent call CocActionAsync('highlight')

autocommand silent call CocActionAsync('highlight')

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing InsertEnter Autocommands for "*"
autocommand call s:Autocmd('InsertEnter', +expand('<abuf>'))

Executing InsertEnter Autocommands for "*"
autocommand call lexima#insmode#clear_stack()

autocommand call s:setup_insmode()

Executing InsertEnter Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMovedI Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMovedI Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing CursorHoldI Autocommands for "*"
autocommand call s:Autocmd('CursorHoldI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()


Executing BufWritePre Autocommands for "*"
autocommand call s:SyncAutocmd('BufWritePre', +expand('<abuf>'), bufname(+expand('<abuf>')), getbufvar(+expand('<abuf>'), 'changedtick'))

"index.cpp" 
"index.cpp" 50L, 936B written
Executing BufWritePost Autocommands for "*"
autocommand call s:Autocmd('BufWritePost', +expand('<abuf>'), getbufvar(+expand('<abuf>'), 'changedtick'))

Executing BufWritePost Autocommands for "*"
autocommand call s:reset_untracked_cache(0)

Executing BufWritePost Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing BufWritePost Autocommands for "*"
autocommand call s:mru_append(expand('<amatch>'))

autocommand call s:mrw_append(expand('<amatch>'))

"index.cpp" 50L, 936B written
Executing CursorHold Autocommands for "*"
autocommand silent call CocActionAsync('highlight')

autocommand silent call CocActionAsync('highlight')

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorHold Autocommands for "*"
autocommand silent call CocActionAsync('highlight')

autocommand silent call CocActionAsync('highlight')

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorHold Autocommands for "*"
autocommand silent call CocActionAsync('highlight')

autocommand silent call CocActionAsync('highlight')

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorHold Autocommands for "*"
autocommand silent call CocActionAsync('highlight')

autocommand silent call CocActionAsync('highlight')

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorHold Autocommands for "*"
autocommand silent call CocActionAsync('highlight')

autocommand silent call CocActionAsync('highlight')

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorHold Autocommands for "*"
autocommand silent call CocActionAsync('highlight')

autocommand silent call CocActionAsync('highlight')

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing InsertEnter Autocommands for "*"
autocommand call s:Autocmd('InsertEnter', +expand('<abuf>'))

Executing InsertEnter Autocommands for "*"
autocommand call lexima#insmode#clear_stack()

autocommand call s:setup_insmode()

Executing InsertEnter Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMovedI Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing CursorHoldI Autocommands for "*"
autocommand call s:Autocmd('CursorHoldI', +expand('<abuf>'), [line('.'), col('.')])

Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMovedI Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMovedI Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMovedI Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMovedI Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMovedI Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMovedI Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 5: sourcing "/opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax/cpp.vim"
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 16: sourcing "/opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax/c.vim"
finished sourcing /opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax/c.vim
continuing in /opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax/cpp.vim
finished sourcing /opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax/cpp.vim
continuing in coc#compat#execute
Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMovedI Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing WinClosed Autocommands for "*"
autocommand call s:HandleWinClosed(+expand('<amatch>'))

Executing BufWinLeave Autocommands for "*"
autocommand call s:Autocmd('BufWinLeave', +expand('<abuf>'), bufwinid(+expand('<abuf>')))

Executing BufHidden Autocommands for "*"
autocommand call s:Autocmd('BufHidden', +expand('<abuf>'))

Executing WinClosed Autocommands for "*"
autocommand call s:HandleWinClosed(+expand('<amatch>'))

Executing BufWinLeave Autocommands for "*"
autocommand call s:Autocmd('BufWinLeave', +expand('<abuf>'), bufwinid(+expand('<abuf>')))

Executing BufHidden Autocommands for "*"
autocommand call s:Autocmd('BufHidden', +expand('<abuf>'))

Executing CursorHoldI Autocommands for "*"
autocommand call s:Autocmd('CursorHoldI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMovedI Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMovedI Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing InsertLeave Autocommands for "*"
autocommand call s:Autocmd('InsertLeave', +expand('<abuf>'))

Executing InsertLeave Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing command: "'/usr/bin/pbcopy'"


Executing TextYankPost Autocommands for "*"
autocommand call highlightedyank#debounce()

Executing TextYankPost Autocommands for "*"
autocommand call coc#rpc#notify('doAutocmd', [2, v:event, +expand('<abuf>'), win_getid()])

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing command: "'/usr/bin/pbpaste'"


Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing TextChanged Autocommands for "*"
autocommand call s:Autocmd('TextChanged', +expand('<abuf>'), getbufvar(+expand('<abuf>'), 'changedtick'))

Executing TextChanged Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChanged Autocommands for "*"
autocommand call s:_doautocmd('highlightedyank-highlight', 'TextChanged', '*')

not found in runtime path: "parser/comment.*"
Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorHold Autocommands for "*"
autocommand silent call CocActionAsync('highlight')

autocommand silent call CocActionAsync('highlight')

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing TextChanged Autocommands for "*"
autocommand call s:Autocmd('TextChanged', +expand('<abuf>'), getbufvar(+expand('<abuf>'), 'changedtick'))

Executing TextChanged Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing CursorHold Autocommands for "*"
autocommand silent call CocActionAsync('highlight')

autocommand silent call CocActionAsync('highlight')

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()


Executing BufWritePre Autocommands for "*"
autocommand call s:SyncAutocmd('BufWritePre', +expand('<abuf>'), bufname(+expand('<abuf>')), getbufvar(+expand('<abuf>'), 'changedtick'))

"index.cpp" 
"index.cpp" 52L, 962B written
Executing BufWritePost Autocommands for "*"
autocommand call s:Autocmd('BufWritePost', +expand('<abuf>'), getbufvar(+expand('<abuf>'), 'changedtick'))

Executing BufWritePost Autocommands for "*"
autocommand call s:reset_untracked_cache(0)

Executing BufWritePost Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing BufWritePost Autocommands for "*"
autocommand call s:mru_append(expand('<amatch>'))

autocommand call s:mrw_append(expand('<amatch>'))

"index.cpp" 52L, 962B written
Executing CursorHold Autocommands for "*"
autocommand silent call CocActionAsync('highlight')

autocommand silent call CocActionAsync('highlight')

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()


Executing WinLeave Autocommands for "*"
autocommand call s:Autocmd('WinLeave', win_getid())

Executing WinLeave Autocommands for "*"
autocommand call s:Remove_Matches()

Executing WinEnter Autocommands for "*"
autocommand call s:dopopd()

Executing WinEnter Autocommands for "*"
autocommand call <sid>on_window_changed('WinEnter')

Executing WinEnter Autocommands for "*"
autocommand call coc#float#nvim_win_enter(win_getid())

autocommand call s:Autocmd('WinEnter', win_getid())

Executing WinEnter Autocommands for "*"
autocommand let g:fzf#vim#buffers[bufnr('')] = reltimefloat(reltime())

Executing WinEnter Autocommands for "*"
autocommand let s:tmux_is_last_pane = 0

Executing WinEnter Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing WinEnter Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing BufEnter Autocommands for "*"
autocommand set fo-=c fo-=r fo-=o

Executing BufEnter Autocommands for "*"
autocommand call s:Autocmd('BufEnter', +expand('<abuf>'))

Executing BufEnter Autocommands for "*"
autocommand if conflict_marker#detect#markers() | call s:on_detected() | endif

Executing BufEnter Autocommands for "*"
autocommand call s:mru_append(expand('<amatch>'))

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing WinLeave Autocommands for "*"
autocommand call s:Autocmd('WinLeave', win_getid())

Executing WinLeave Autocommands for "*"
autocommand call s:Remove_Matches()

Executing WinEnter Autocommands for "*"
autocommand call s:dopopd()

Executing WinEnter Autocommands for "*"
autocommand call <sid>on_window_changed('WinEnter')

Executing WinEnter Autocommands for "*"
autocommand call coc#float#nvim_win_enter(win_getid())

autocommand call s:Autocmd('WinEnter', win_getid())

Executing WinEnter Autocommands for "*"
autocommand let g:fzf#vim#buffers[bufnr('')] = reltimefloat(reltime())

Executing WinEnter Autocommands for "*"
autocommand let s:tmux_is_last_pane = 0

Executing WinEnter Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing WinEnter Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing BufEnter Autocommands for "*"
autocommand set fo-=c fo-=r fo-=o

Executing BufEnter Autocommands for "*"
autocommand call s:Autocmd('BufEnter', +expand('<abuf>'))

Executing BufEnter Autocommands for "*"
autocommand if conflict_marker#detect#markers() | call s:on_detected() | endif

Executing BufEnter Autocommands for "*"
autocommand call s:mru_append(expand('<amatch>'))

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing command: "'/bin/zsh' '-c' ''/usr/bin/g++' -std=c++14 -Wall -Wextra --pedantic-errors '/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c/index.cpp' -o '/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207..."


Executing command: "'/bin/zsh' '-c' ''/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c/index' '"


Executing WinLeave Autocommands for "*"
autocommand call s:Autocmd('WinLeave', win_getid())

Executing WinLeave Autocommands for "*"
autocommand call s:Remove_Matches()

Executing WinEnter Autocommands for "*"
autocommand call s:dopopd()

Executing WinEnter Autocommands for "*"
autocommand call <sid>on_window_changed('WinEnter')

Executing WinEnter Autocommands for "*"
autocommand call coc#float#nvim_win_enter(win_getid())

autocommand call s:Autocmd('WinEnter', win_getid())

Executing WinEnter Autocommands for "*"
autocommand let g:fzf#vim#buffers[bufnr('')] = reltimefloat(reltime())

Executing WinEnter Autocommands for "*"
autocommand let s:tmux_is_last_pane = 0

Executing WinEnter Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing WinEnter Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing BufEnter Autocommands for "*"
autocommand set fo-=c fo-=r fo-=o

Executing BufEnter Autocommands for "*"
autocommand call s:Autocmd('BufEnter', +expand('<abuf>'))

Executing BufEnter Autocommands for "*"
autocommand if conflict_marker#detect#markers() | call s:on_detected() | endif

Executing BufEnter Autocommands for "*"
autocommand call s:mru_append(expand('<amatch>'))

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing WinLeave Autocommands for "*"
autocommand call s:Autocmd('WinLeave', win_getid())

Executing WinLeave Autocommands for "*"
autocommand call s:Remove_Matches()

Executing WinEnter Autocommands for "*"
autocommand call s:dopopd()

Executing WinEnter Autocommands for "*"
autocommand call <sid>on_window_changed('WinEnter')

Executing WinEnter Autocommands for "*"
autocommand call coc#float#nvim_win_enter(win_getid())

autocommand call s:Autocmd('WinEnter', win_getid())

Executing WinEnter Autocommands for "*"
autocommand let g:fzf#vim#buffers[bufnr('')] = reltimefloat(reltime())

Executing WinEnter Autocommands for "*"
autocommand let s:tmux_is_last_pane = 0

Executing WinEnter Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing WinEnter Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing BufEnter Autocommands for "*"
autocommand set fo-=c fo-=r fo-=o

Executing BufEnter Autocommands for "*"
autocommand call s:Autocmd('BufEnter', +expand('<abuf>'))

Executing BufEnter Autocommands for "*"
autocommand if conflict_marker#detect#markers() | call s:on_detected() | endif

Executing BufEnter Autocommands for "*"
autocommand call s:mru_append(expand('<amatch>'))

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/coc)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/coc/highlight.vim"
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/coc/highlight.vim
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/coc)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/coc/highlight.vim"
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/coc/highlight.vim
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/coc)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/coc/highlight.vim"
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/coc/highlight.vim
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/coc)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/coc/highlight.vim"
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/coc/highlight.vim
Executing CursorHold Autocommands for "*"
autocommand silent call CocActionAsync('highlight')

autocommand silent call CocActionAsync('highlight')

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorHold Autocommands for "*"
autocommand silent call CocActionAsync('highlight')

autocommand silent call CocActionAsync('highlight')

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorHold Autocommands for "*"
autocommand silent call CocActionAsync('highlight')

autocommand silent call CocActionAsync('highlight')

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing WinScrolled Autocommands for "*"
autocommand call s:HandleWinScrolled(+expand('<amatch>'))

Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing WinScrolled Autocommands for "*"
autocommand call s:HandleWinScrolled(+expand('<amatch>'))

Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorHold Autocommands for "*"
autocommand silent call CocActionAsync('highlight')

autocommand silent call CocActionAsync('highlight')

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing WinScrolled Autocommands for "*"
autocommand call s:HandleWinScrolled(+expand('<amatch>'))

Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing WinScrolled Autocommands for "*"
autocommand call s:HandleWinScrolled(+expand('<amatch>'))

Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing WinScrolled Autocommands for "*"
autocommand call s:HandleWinScrolled(+expand('<amatch>'))

Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorHold Autocommands for "*"
autocommand silent call CocActionAsync('highlight')

autocommand silent call CocActionAsync('highlight')

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing WinScrolled Autocommands for "*"
autocommand call s:HandleWinScrolled(+expand('<amatch>'))

Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing WinScrolled Autocommands for "*"
autocommand call s:HandleWinScrolled(+expand('<amatch>'))

Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorHold Autocommands for "*"
autocommand silent call CocActionAsync('highlight')

autocommand silent call CocActionAsync('highlight')

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing WinScrolled Autocommands for "*"
autocommand call s:HandleWinScrolled(+expand('<amatch>'))

Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing WinScrolled Autocommands for "*"
autocommand call s:HandleWinScrolled(+expand('<amatch>'))

Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorHold Autocommands for "*"
autocommand silent call CocActionAsync('highlight')

autocommand silent call CocActionAsync('highlight')

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing WinScrolled Autocommands for "*"
autocommand call s:HandleWinScrolled(+expand('<amatch>'))

Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing WinScrolled Autocommands for "*"
autocommand call s:HandleWinScrolled(+expand('<amatch>'))

Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing WinScrolled Autocommands for "*"
autocommand call s:HandleWinScrolled(+expand('<amatch>'))

Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorHold Autocommands for "*"
autocommand silent call CocActionAsync('highlight')

autocommand silent call CocActionAsync('highlight')

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing WinScrolled Autocommands for "*"
autocommand call s:HandleWinScrolled(+expand('<amatch>'))

Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing WinScrolled Autocommands for "*"
autocommand call s:HandleWinScrolled(+expand('<amatch>'))

Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorHold Autocommands for "*"
autocommand silent call CocActionAsync('highlight')

autocommand silent call CocActionAsync('highlight')

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing WinScrolled Autocommands for "*"
autocommand call s:HandleWinScrolled(+expand('<amatch>'))

Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing WinScrolled Autocommands for "*"
autocommand call s:HandleWinScrolled(+expand('<amatch>'))

Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorHold Autocommands for "*"
autocommand silent call CocActionAsync('highlight')

autocommand silent call CocActionAsync('highlight')

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing WinScrolled Autocommands for "*"
autocommand call s:HandleWinScrolled(+expand('<amatch>'))

Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing WinScrolled Autocommands for "*"
autocommand call s:HandleWinScrolled(+expand('<amatch>'))

Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorHold Autocommands for "*"
autocommand silent call CocActionAsync('highlight')

autocommand silent call CocActionAsync('highlight')

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing WinScrolled Autocommands for "*"
autocommand call s:HandleWinScrolled(+expand('<amatch>'))

Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorHold Autocommands for "*"
autocommand silent call CocActionAsync('highlight')

autocommand silent call CocActionAsync('highlight')

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing WinScrolled Autocommands for "*"
autocommand call s:HandleWinScrolled(+expand('<amatch>'))

Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorHold Autocommands for "*"
autocommand silent call CocActionAsync('highlight')

autocommand silent call CocActionAsync('highlight')

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing WinScrolled Autocommands for "*"
autocommand call s:HandleWinScrolled(+expand('<amatch>'))

Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorHold Autocommands for "*"
autocommand silent call CocActionAsync('highlight')

autocommand silent call CocActionAsync('highlight')

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing WinScrolled Autocommands for "*"
autocommand call s:HandleWinScrolled(+expand('<amatch>'))

Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing WinScrolled Autocommands for "*"
autocommand call s:HandleWinScrolled(+expand('<amatch>'))

Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorHold Autocommands for "*"
autocommand silent call CocActionAsync('highlight')

autocommand silent call CocActionAsync('highlight')

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing WinScrolled Autocommands for "*"
autocommand call s:HandleWinScrolled(+expand('<amatch>'))

Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorHold Autocommands for "*"
autocommand silent call CocActionAsync('highlight')

autocommand silent call CocActionAsync('highlight')

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing WinScrolled Autocommands for "*"
autocommand call s:HandleWinScrolled(+expand('<amatch>'))

Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorHold Autocommands for "*"
autocommand silent call CocActionAsync('highlight')

autocommand silent call CocActionAsync('highlight')

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing WinScrolled Autocommands for "*"
autocommand call s:HandleWinScrolled(+expand('<amatch>'))

Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing WinScrolled Autocommands for "*"
autocommand call s:HandleWinScrolled(+expand('<amatch>'))

Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorHold Autocommands for "*"
autocommand silent call CocActionAsync('highlight')

autocommand silent call CocActionAsync('highlight')

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing WinScrolled Autocommands for "*"
autocommand call s:HandleWinScrolled(+expand('<amatch>'))

Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorHold Autocommands for "*"
autocommand silent call CocActionAsync('highlight')

autocommand silent call CocActionAsync('highlight')

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing WinScrolled Autocommands for "*"
autocommand call s:HandleWinScrolled(+expand('<amatch>'))

Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing WinScrolled Autocommands for "*"
autocommand call s:HandleWinScrolled(+expand('<amatch>'))

Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing WinScrolled Autocommands for "*"
autocommand call s:HandleWinScrolled(+expand('<amatch>'))

Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorHold Autocommands for "*"
autocommand silent call CocActionAsync('highlight')

autocommand silent call CocActionAsync('highlight')

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing WinScrolled Autocommands for "*"
autocommand call s:HandleWinScrolled(+expand('<amatch>'))

Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing WinScrolled Autocommands for "*"
autocommand call s:HandleWinScrolled(+expand('<amatch>'))

Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing WinScrolled Autocommands for "*"
autocommand call s:HandleWinScrolled(+expand('<amatch>'))

Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorHold Autocommands for "*"
autocommand silent call CocActionAsync('highlight')

autocommand silent call CocActionAsync('highlight')

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing WinScrolled Autocommands for "*"
autocommand call s:HandleWinScrolled(+expand('<amatch>'))

Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing WinScrolled Autocommands for "*"
autocommand call s:HandleWinScrolled(+expand('<amatch>'))

Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing WinScrolled Autocommands for "*"
autocommand call s:HandleWinScrolled(+expand('<amatch>'))

Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorHold Autocommands for "*"
autocommand silent call CocActionAsync('highlight')

autocommand silent call CocActionAsync('highlight')

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing WinScrolled Autocommands for "*"
autocommand call s:HandleWinScrolled(+expand('<amatch>'))

Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing WinScrolled Autocommands for "*"
autocommand call s:HandleWinScrolled(+expand('<amatch>'))

Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorHold Autocommands for "*"
autocommand silent call CocActionAsync('highlight')

autocommand silent call CocActionAsync('highlight')

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing WinScrolled Autocommands for "*"
autocommand call s:HandleWinScrolled(+expand('<amatch>'))

Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing WinScrolled Autocommands for "*"
autocommand call s:HandleWinScrolled(+expand('<amatch>'))

Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorHold Autocommands for "*"
autocommand silent call CocActionAsync('highlight')

autocommand silent call CocActionAsync('highlight')

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing WinScrolled Autocommands for "*"
autocommand call s:HandleWinScrolled(+expand('<amatch>'))

Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorHold Autocommands for "*"
autocommand silent call CocActionAsync('highlight')

autocommand silent call CocActionAsync('highlight')

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorHold Autocommands for "*"
autocommand silent call CocActionAsync('highlight')

autocommand silent call CocActionAsync('highlight')

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorHold Autocommands for "*"
autocommand silent call CocActionAsync('highlight')

autocommand silent call CocActionAsync('highlight')

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorHold Autocommands for "*"
autocommand silent call CocActionAsync('highlight')

autocommand silent call CocActionAsync('highlight')

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorHold Autocommands for "*"
autocommand silent call CocActionAsync('highlight')

autocommand silent call CocActionAsync('highlight')

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing command: "'/usr/bin/pbcopy'"


Executing TextYankPost Autocommands for "*"
autocommand call highlightedyank#debounce()

Executing TextYankPost Autocommands for "*"
autocommand call coc#rpc#notify('doAutocmd', [2, v:event, +expand('<abuf>'), win_getid()])

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing command: "'/usr/bin/pbpaste'"


Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing TextChanged Autocommands for "*"
autocommand call s:Autocmd('TextChanged', +expand('<abuf>'), getbufvar(+expand('<abuf>'), 'changedtick'))

Executing TextChanged Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChanged Autocommands for "*"
autocommand call s:_doautocmd('highlightedyank-highlight', 'TextChanged', '*')

not found in runtime path: "parser/comment.*"
Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorHold Autocommands for "*"
autocommand silent call CocActionAsync('highlight')

autocommand silent call CocActionAsync('highlight')

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing InsertEnter Autocommands for "*"
autocommand call s:Autocmd('InsertEnter', +expand('<abuf>'))

Executing InsertEnter Autocommands for "*"
autocommand call lexima#insmode#clear_stack()

autocommand call s:setup_insmode()

Executing InsertEnter Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMovedI Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMovedI Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMovedI Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMovedI Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMovedI Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 5: sourcing "/opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax/cpp.vim"
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 16: sourcing "/opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax/c.vim"
finished sourcing /opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax/c.vim
continuing in /opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax/cpp.vim
finished sourcing /opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax/cpp.vim
continuing in coc#compat#execute
Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMovedI Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 5: sourcing "/opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax/cpp.vim"
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 16: sourcing "/opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax/c.vim"
finished sourcing /opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax/c.vim
continuing in /opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax/cpp.vim
finished sourcing /opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax/cpp.vim
continuing in coc#compat#execute
Executing CursorHoldI Autocommands for "*"
autocommand call s:Autocmd('CursorHoldI', +expand('<abuf>'), [line('.'), col('.')])

Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMovedI Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing WinClosed Autocommands for "*"
autocommand call s:HandleWinClosed(+expand('<amatch>'))

Executing BufWinLeave Autocommands for "*"
autocommand call s:Autocmd('BufWinLeave', +expand('<abuf>'), bufwinid(+expand('<abuf>')))

Executing BufHidden Autocommands for "*"
autocommand call s:Autocmd('BufHidden', +expand('<abuf>'))

Executing WinClosed Autocommands for "*"
autocommand call s:HandleWinClosed(+expand('<amatch>'))

Executing BufWinLeave Autocommands for "*"
autocommand call s:Autocmd('BufWinLeave', +expand('<abuf>'), bufwinid(+expand('<abuf>')))

Executing BufHidden Autocommands for "*"
autocommand call s:Autocmd('BufHidden', +expand('<abuf>'))

Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMovedI Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMovedI Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMovedI Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMovedI Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMovedI Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMovedI Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing CursorHoldI Autocommands for "*"
autocommand call s:Autocmd('CursorHoldI', +expand('<abuf>'), [line('.'), col('.')])

Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMovedI Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing WinClosed Autocommands for "*"
autocommand call s:HandleWinClosed(+expand('<amatch>'))

Executing BufWinLeave Autocommands for "*"
autocommand call s:Autocmd('BufWinLeave', +expand('<abuf>'), bufwinid(+expand('<abuf>')))

Executing BufHidden Autocommands for "*"
autocommand call s:Autocmd('BufHidden', +expand('<abuf>'))

Executing WinClosed Autocommands for "*"
autocommand call s:HandleWinClosed(+expand('<amatch>'))

Executing BufWinLeave Autocommands for "*"
autocommand call s:Autocmd('BufWinLeave', +expand('<abuf>'), bufwinid(+expand('<abuf>')))

Executing BufHidden Autocommands for "*"
autocommand call s:Autocmd('BufHidden', +expand('<abuf>'))

Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMovedI Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMovedI Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMovedI Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMovedI Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMovedI Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 5: sourcing "/opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax/cpp.vim"
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 16: sourcing "/opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax/c.vim"
finished sourcing /opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax/c.vim
continuing in /opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax/cpp.vim
finished sourcing /opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax/cpp.vim
continuing in coc#compat#execute
Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMovedI Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing WinClosed Autocommands for "*"
autocommand call s:HandleWinClosed(+expand('<amatch>'))

Executing BufWinLeave Autocommands for "*"
autocommand call s:Autocmd('BufWinLeave', +expand('<abuf>'), bufwinid(+expand('<abuf>')))

Executing BufHidden Autocommands for "*"
autocommand call s:Autocmd('BufHidden', +expand('<abuf>'))

Executing WinClosed Autocommands for "*"
autocommand call s:HandleWinClosed(+expand('<amatch>'))

Executing BufWinLeave Autocommands for "*"
autocommand call s:Autocmd('BufWinLeave', +expand('<abuf>'), bufwinid(+expand('<abuf>')))

Executing BufHidden Autocommands for "*"
autocommand call s:Autocmd('BufHidden', +expand('<abuf>'))

Executing CursorHoldI Autocommands for "*"
autocommand call s:Autocmd('CursorHoldI', +expand('<abuf>'), [line('.'), col('.')])

Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMovedI Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMovedI Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 5: sourcing "/opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax/cpp.vim"
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 16: sourcing "/opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax/c.vim"
finished sourcing /opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax/c.vim
continuing in /opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax/cpp.vim
finished sourcing /opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax/cpp.vim
continuing in coc#compat#execute
Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMovedI Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing WinClosed Autocommands for "*"
autocommand call s:HandleWinClosed(+expand('<amatch>'))

Executing BufWinLeave Autocommands for "*"
autocommand call s:Autocmd('BufWinLeave', +expand('<abuf>'), bufwinid(+expand('<abuf>')))

Executing BufHidden Autocommands for "*"
autocommand call s:Autocmd('BufHidden', +expand('<abuf>'))

Error detected while processing function coc#pum#_close[2]..<SNR>189_close_pum[7]..coc#float#close[1]..coc#float#close_related:
line   19:
E5555: API call: Invalid window id: 1289
Executing WinClosed Autocommands for "*"
autocommand call s:HandleWinClosed(+expand('<amatch>'))

Executing BufWinLeave Autocommands for "*"
autocommand call s:Autocmd('BufWinLeave', +expand('<abuf>'), bufwinid(+expand('<abuf>')))

Executing BufHidden Autocommands for "*"
autocommand call s:Autocmd('BufHidden', +expand('<abuf>'))

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 5: sourcing "/opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax/cpp.vim"
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 16: sourcing "/opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax/c.vim"
finished sourcing /opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax/c.vim
continuing in /opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax/cpp.vim
finished sourcing /opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax/cpp.vim
continuing in coc#compat#execute
Executing CursorHoldI Autocommands for "*"
autocommand call s:Autocmd('CursorHoldI', +expand('<abuf>'), [line('.'), col('.')])

Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMovedI Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMovedI Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMovedI Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMovedI Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMovedI Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing WinClosed Autocommands for "*"
autocommand call s:HandleWinClosed(+expand('<amatch>'))

Executing BufWinLeave Autocommands for "*"
autocommand call s:Autocmd('BufWinLeave', +expand('<abuf>'), bufwinid(+expand('<abuf>')))

Executing BufHidden Autocommands for "*"
autocommand call s:Autocmd('BufHidden', +expand('<abuf>'))

Executing WinClosed Autocommands for "*"
autocommand call s:HandleWinClosed(+expand('<amatch>'))

Executing BufWinLeave Autocommands for "*"
autocommand call s:Autocmd('BufWinLeave', +expand('<abuf>'), bufwinid(+expand('<abuf>')))

Executing BufHidden Autocommands for "*"
autocommand call s:Autocmd('BufHidden', +expand('<abuf>'))

Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMovedI Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 5: sourcing "/opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax/cpp.vim"
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 16: sourcing "/opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax/c.vim"
finished sourcing /opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax/c.vim
continuing in /opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax/cpp.vim
finished sourcing /opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax/cpp.vim
continuing in coc#compat#execute
Executing CursorHoldI Autocommands for "*"
autocommand call s:Autocmd('CursorHoldI', +expand('<abuf>'), [line('.'), col('.')])

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing InsertLeave Autocommands for "*"
autocommand call s:Autocmd('InsertLeave', +expand('<abuf>'))

Executing InsertLeave Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing WinClosed Autocommands for "*"
autocommand call s:HandleWinClosed(+expand('<amatch>'))

Executing BufWinLeave Autocommands for "*"
autocommand call s:Autocmd('BufWinLeave', +expand('<abuf>'), bufwinid(+expand('<abuf>')))

Executing BufHidden Autocommands for "*"
autocommand call s:Autocmd('BufHidden', +expand('<abuf>'))

Executing CursorHold Autocommands for "*"
autocommand silent call CocActionAsync('highlight')

autocommand silent call CocActionAsync('highlight')

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing command: "'/usr/bin/pbcopy'"


Executing TextYankPost Autocommands for "*"
autocommand call highlightedyank#debounce()

Executing TextYankPost Autocommands for "*"
autocommand call coc#rpc#notify('doAutocmd', [2, v:event, +expand('<abuf>'), win_getid()])

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing TextChanged Autocommands for "*"
autocommand call s:Autocmd('TextChanged', +expand('<abuf>'), getbufvar(+expand('<abuf>'), 'changedtick'))

Executing TextChanged Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorHold Autocommands for "*"
autocommand silent call CocActionAsync('highlight')

autocommand silent call CocActionAsync('highlight')

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing command: "'/usr/bin/pbpaste'"


Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing TextChanged Autocommands for "*"
autocommand call s:Autocmd('TextChanged', +expand('<abuf>'), getbufvar(+expand('<abuf>'), 'changedtick'))

Executing TextChanged Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()


Executing BufWritePre Autocommands for "*"
autocommand call s:SyncAutocmd('BufWritePre', +expand('<abuf>'), bufname(+expand('<abuf>')), getbufvar(+expand('<abuf>'), 'changedtick'))

"index.cpp" 
"index.cpp" 53L, 985B written
Executing BufWritePost Autocommands for "*"
autocommand call s:Autocmd('BufWritePost', +expand('<abuf>'), getbufvar(+expand('<abuf>'), 'changedtick'))

Executing BufWritePost Autocommands for "*"
autocommand call s:reset_untracked_cache(0)

Executing BufWritePost Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing BufWritePost Autocommands for "*"
autocommand call s:mru_append(expand('<amatch>'))

autocommand call s:mrw_append(expand('<amatch>'))

"index.cpp" 53L, 985B written
Executing CursorHold Autocommands for "*"
autocommand silent call CocActionAsync('highlight')

autocommand silent call CocActionAsync('highlight')

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()


Executing WinLeave Autocommands for "*"
autocommand call s:Autocmd('WinLeave', win_getid())

Executing WinLeave Autocommands for "*"
autocommand call s:Remove_Matches()

Executing WinEnter Autocommands for "*"
autocommand call s:dopopd()

Executing WinEnter Autocommands for "*"
autocommand call <sid>on_window_changed('WinEnter')

Executing WinEnter Autocommands for "*"
autocommand call coc#float#nvim_win_enter(win_getid())

autocommand call s:Autocmd('WinEnter', win_getid())

Executing WinEnter Autocommands for "*"
autocommand let g:fzf#vim#buffers[bufnr('')] = reltimefloat(reltime())

Executing WinEnter Autocommands for "*"
autocommand let s:tmux_is_last_pane = 0

Executing WinEnter Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing WinEnter Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing BufEnter Autocommands for "*"
autocommand set fo-=c fo-=r fo-=o

Executing BufEnter Autocommands for "*"
autocommand call s:Autocmd('BufEnter', +expand('<abuf>'))

Executing BufEnter Autocommands for "*"
autocommand if conflict_marker#detect#markers() | call s:on_detected() | endif

Executing BufEnter Autocommands for "*"
autocommand call s:mru_append(expand('<amatch>'))

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing WinLeave Autocommands for "*"
autocommand call s:Autocmd('WinLeave', win_getid())

Executing WinLeave Autocommands for "*"
autocommand call s:Remove_Matches()

Executing WinEnter Autocommands for "*"
autocommand call s:dopopd()

Executing WinEnter Autocommands for "*"
autocommand call <sid>on_window_changed('WinEnter')

Executing WinEnter Autocommands for "*"
autocommand call coc#float#nvim_win_enter(win_getid())

autocommand call s:Autocmd('WinEnter', win_getid())

Executing WinEnter Autocommands for "*"
autocommand let g:fzf#vim#buffers[bufnr('')] = reltimefloat(reltime())

Executing WinEnter Autocommands for "*"
autocommand let s:tmux_is_last_pane = 0

Executing WinEnter Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing WinEnter Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing BufEnter Autocommands for "*"
autocommand set fo-=c fo-=r fo-=o

Executing BufEnter Autocommands for "*"
autocommand call s:Autocmd('BufEnter', +expand('<abuf>'))

Executing BufEnter Autocommands for "*"
autocommand if conflict_marker#detect#markers() | call s:on_detected() | endif

Executing BufEnter Autocommands for "*"
autocommand call s:mru_append(expand('<amatch>'))

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing command: "'/bin/zsh' '-c' ''/usr/bin/g++' -std=c++14 -Wall -Wextra --pedantic-errors '/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c/index.cpp' -o '/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207..."


Executing command: "'/bin/zsh' '-c' ''/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c/index' '"


Executing WinLeave Autocommands for "*"
autocommand call s:Autocmd('WinLeave', win_getid())

Executing WinLeave Autocommands for "*"
autocommand call s:Remove_Matches()

Executing WinEnter Autocommands for "*"
autocommand call s:dopopd()

Executing WinEnter Autocommands for "*"
autocommand call <sid>on_window_changed('WinEnter')

Executing WinEnter Autocommands for "*"
autocommand call coc#float#nvim_win_enter(win_getid())

autocommand call s:Autocmd('WinEnter', win_getid())

Executing WinEnter Autocommands for "*"
autocommand let g:fzf#vim#buffers[bufnr('')] = reltimefloat(reltime())

Executing WinEnter Autocommands for "*"
autocommand let s:tmux_is_last_pane = 0

Executing WinEnter Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing WinEnter Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing BufEnter Autocommands for "*"
autocommand set fo-=c fo-=r fo-=o

Executing BufEnter Autocommands for "*"
autocommand call s:Autocmd('BufEnter', +expand('<abuf>'))

Executing BufEnter Autocommands for "*"
autocommand if conflict_marker#detect#markers() | call s:on_detected() | endif

Executing BufEnter Autocommands for "*"
autocommand call s:mru_append(expand('<amatch>'))

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing WinLeave Autocommands for "*"
autocommand call s:Autocmd('WinLeave', win_getid())

Executing WinLeave Autocommands for "*"
autocommand call s:Remove_Matches()

Executing WinEnter Autocommands for "*"
autocommand call s:dopopd()

Executing WinEnter Autocommands for "*"
autocommand call <sid>on_window_changed('WinEnter')

Executing WinEnter Autocommands for "*"
autocommand call coc#float#nvim_win_enter(win_getid())

autocommand call s:Autocmd('WinEnter', win_getid())

Executing WinEnter Autocommands for "*"
autocommand let g:fzf#vim#buffers[bufnr('')] = reltimefloat(reltime())

Executing WinEnter Autocommands for "*"
autocommand let s:tmux_is_last_pane = 0

Executing WinEnter Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing WinEnter Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing BufEnter Autocommands for "*"
autocommand set fo-=c fo-=r fo-=o

Executing BufEnter Autocommands for "*"
autocommand call s:Autocmd('BufEnter', +expand('<abuf>'))

Executing BufEnter Autocommands for "*"
autocommand if conflict_marker#detect#markers() | call s:on_detected() | endif

Executing BufEnter Autocommands for "*"
autocommand call s:mru_append(expand('<amatch>'))

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/coc)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/coc/highlight.vim"
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/coc/highlight.vim
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/coc)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/coc/highlight.vim"
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/coc/highlight.vim
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/coc)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/coc/highlight.vim"
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/coc/highlight.vim
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/coc)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/coc/highlight.vim"
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/coc/highlight.vim
Executing CursorHold Autocommands for "*"
autocommand silent call CocActionAsync('highlight')

autocommand silent call CocActionAsync('highlight')

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing TextChanged Autocommands for "*"
autocommand call s:Autocmd('TextChanged', +expand('<abuf>'), getbufvar(+expand('<abuf>'), 'changedtick'))

Executing TextChanged Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing CursorHold Autocommands for "*"
autocommand silent call CocActionAsync('highlight')

autocommand silent call CocActionAsync('highlight')

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorHold Autocommands for "*"
autocommand silent call CocActionAsync('highlight')

autocommand silent call CocActionAsync('highlight')

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorHold Autocommands for "*"
autocommand silent call CocActionAsync('highlight')

autocommand silent call CocActionAsync('highlight')

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorHold Autocommands for "*"
autocommand silent call CocActionAsync('highlight')

autocommand silent call CocActionAsync('highlight')

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorHold Autocommands for "*"
autocommand silent call CocActionAsync('highlight')

autocommand silent call CocActionAsync('highlight')

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorHold Autocommands for "*"
autocommand silent call CocActionAsync('highlight')

autocommand silent call CocActionAsync('highlight')

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorHold Autocommands for "*"
autocommand silent call CocActionAsync('highlight')

autocommand silent call CocActionAsync('highlight')

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorHold Autocommands for "*"
autocommand silent call CocActionAsync('highlight')

autocommand silent call CocActionAsync('highlight')

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorHold Autocommands for "*"
autocommand silent call CocActionAsync('highlight')

autocommand silent call CocActionAsync('highlight')

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing InsertEnter Autocommands for "*"
autocommand call s:Autocmd('InsertEnter', +expand('<abuf>'))

Executing InsertEnter Autocommands for "*"
autocommand call lexima#insmode#clear_stack()

autocommand call s:setup_insmode()

Executing InsertEnter Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMovedI Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorHoldI Autocommands for "*"
autocommand call s:Autocmd('CursorHoldI', +expand('<abuf>'), [line('.'), col('.')])

Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMovedI Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMovedI Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 5: sourcing "/opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax/cpp.vim"
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 16: sourcing "/opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax/c.vim"
finished sourcing /opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax/c.vim
continuing in /opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax/cpp.vim
finished sourcing /opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax/cpp.vim
continuing in coc#compat#execute
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 5: sourcing "/opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax/cpp.vim"
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 16: sourcing "/opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax/c.vim"
finished sourcing /opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax/c.vim
continuing in /opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax/cpp.vim
finished sourcing /opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax/cpp.vim
continuing in coc#compat#execute
Executing CursorHoldI Autocommands for "*"
autocommand call s:Autocmd('CursorHoldI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing WinClosed Autocommands for "*"
autocommand call s:HandleWinClosed(+expand('<amatch>'))

Executing BufWinLeave Autocommands for "*"
autocommand call s:Autocmd('BufWinLeave', +expand('<abuf>'), bufwinid(+expand('<abuf>')))

Executing BufHidden Autocommands for "*"
autocommand call s:Autocmd('BufHidden', +expand('<abuf>'))

Executing WinClosed Autocommands for "*"
autocommand call s:HandleWinClosed(+expand('<amatch>'))

Executing BufWinLeave Autocommands for "*"
autocommand call s:Autocmd('BufWinLeave', +expand('<abuf>'), bufwinid(+expand('<abuf>')))

Executing BufHidden Autocommands for "*"
autocommand call s:Autocmd('BufHidden', +expand('<abuf>'))

Executing CursorHold Autocommands for "*"
autocommand silent call CocActionAsync('highlight')

autocommand silent call CocActionAsync('highlight')

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()


Executing BufWritePre Autocommands for "*"
autocommand call s:SyncAutocmd('BufWritePre', +expand('<abuf>'), bufname(+expand('<abuf>')), getbufvar(+expand('<abuf>'), 'changedtick'))

"index.cpp" 
"index.cpp" 52L, 964B written
Executing BufWritePost Autocommands for "*"
autocommand call s:Autocmd('BufWritePost', +expand('<abuf>'), getbufvar(+expand('<abuf>'), 'changedtick'))

Executing BufWritePost Autocommands for "*"
autocommand call s:reset_untracked_cache(0)

Executing BufWritePost Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing BufWritePost Autocommands for "*"
autocommand call s:mru_append(expand('<amatch>'))

autocommand call s:mrw_append(expand('<amatch>'))

"index.cpp" 52L, 964B written
Executing CursorHold Autocommands for "*"
autocommand silent call CocActionAsync('highlight')

autocommand silent call CocActionAsync('highlight')

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()


Executing WinLeave Autocommands for "*"
autocommand call s:Autocmd('WinLeave', win_getid())

Executing WinLeave Autocommands for "*"
autocommand call s:Remove_Matches()

Executing WinEnter Autocommands for "*"
autocommand call s:dopopd()

Executing WinEnter Autocommands for "*"
autocommand call <sid>on_window_changed('WinEnter')

Executing WinEnter Autocommands for "*"
autocommand call coc#float#nvim_win_enter(win_getid())

autocommand call s:Autocmd('WinEnter', win_getid())

Executing WinEnter Autocommands for "*"
autocommand let g:fzf#vim#buffers[bufnr('')] = reltimefloat(reltime())

Executing WinEnter Autocommands for "*"
autocommand let s:tmux_is_last_pane = 0

Executing WinEnter Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing WinEnter Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing BufEnter Autocommands for "*"
autocommand set fo-=c fo-=r fo-=o

Executing BufEnter Autocommands for "*"
autocommand call s:Autocmd('BufEnter', +expand('<abuf>'))

Executing BufEnter Autocommands for "*"
autocommand if conflict_marker#detect#markers() | call s:on_detected() | endif

Executing BufEnter Autocommands for "*"
autocommand call s:mru_append(expand('<amatch>'))

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing WinLeave Autocommands for "*"
autocommand call s:Autocmd('WinLeave', win_getid())

Executing WinLeave Autocommands for "*"
autocommand call s:Remove_Matches()

Executing WinEnter Autocommands for "*"
autocommand call s:dopopd()

Executing WinEnter Autocommands for "*"
autocommand call <sid>on_window_changed('WinEnter')

Executing WinEnter Autocommands for "*"
autocommand call coc#float#nvim_win_enter(win_getid())

autocommand call s:Autocmd('WinEnter', win_getid())

Executing WinEnter Autocommands for "*"
autocommand let g:fzf#vim#buffers[bufnr('')] = reltimefloat(reltime())

Executing WinEnter Autocommands for "*"
autocommand let s:tmux_is_last_pane = 0

Executing WinEnter Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing WinEnter Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing BufEnter Autocommands for "*"
autocommand set fo-=c fo-=r fo-=o

Executing BufEnter Autocommands for "*"
autocommand call s:Autocmd('BufEnter', +expand('<abuf>'))

Executing BufEnter Autocommands for "*"
autocommand if conflict_marker#detect#markers() | call s:on_detected() | endif

Executing BufEnter Autocommands for "*"
autocommand call s:mru_append(expand('<amatch>'))

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing command: "'/bin/zsh' '-c' ''/usr/bin/g++' -std=c++14 -Wall -Wextra --pedantic-errors '/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c/index.cpp' -o '/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207..."


Executing command: "'/bin/zsh' '-c' ''/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c/index' '"


Executing WinLeave Autocommands for "*"
autocommand call s:Autocmd('WinLeave', win_getid())

Executing WinLeave Autocommands for "*"
autocommand call s:Remove_Matches()

Executing WinEnter Autocommands for "*"
autocommand call s:dopopd()

Executing WinEnter Autocommands for "*"
autocommand call <sid>on_window_changed('WinEnter')

Executing WinEnter Autocommands for "*"
autocommand call coc#float#nvim_win_enter(win_getid())

autocommand call s:Autocmd('WinEnter', win_getid())

Executing WinEnter Autocommands for "*"
autocommand let g:fzf#vim#buffers[bufnr('')] = reltimefloat(reltime())

Executing WinEnter Autocommands for "*"
autocommand let s:tmux_is_last_pane = 0

Executing WinEnter Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing WinEnter Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing BufEnter Autocommands for "*"
autocommand set fo-=c fo-=r fo-=o

Executing BufEnter Autocommands for "*"
autocommand call s:Autocmd('BufEnter', +expand('<abuf>'))

Executing BufEnter Autocommands for "*"
autocommand if conflict_marker#detect#markers() | call s:on_detected() | endif

Executing BufEnter Autocommands for "*"
autocommand call s:mru_append(expand('<amatch>'))

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing WinLeave Autocommands for "*"
autocommand call s:Autocmd('WinLeave', win_getid())

Executing WinLeave Autocommands for "*"
autocommand call s:Remove_Matches()

Executing WinEnter Autocommands for "*"
autocommand call s:dopopd()

Executing WinEnter Autocommands for "*"
autocommand call <sid>on_window_changed('WinEnter')

Executing WinEnter Autocommands for "*"
autocommand call coc#float#nvim_win_enter(win_getid())

autocommand call s:Autocmd('WinEnter', win_getid())

Executing WinEnter Autocommands for "*"
autocommand let g:fzf#vim#buffers[bufnr('')] = reltimefloat(reltime())

Executing WinEnter Autocommands for "*"
autocommand let s:tmux_is_last_pane = 0

Executing WinEnter Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing WinEnter Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing BufEnter Autocommands for "*"
autocommand set fo-=c fo-=r fo-=o

Executing BufEnter Autocommands for "*"
autocommand call s:Autocmd('BufEnter', +expand('<abuf>'))

Executing BufEnter Autocommands for "*"
autocommand if conflict_marker#detect#markers() | call s:on_detected() | endif

Executing BufEnter Autocommands for "*"
autocommand call s:mru_append(expand('<amatch>'))

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/coc)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/coc/highlight.vim"
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/coc/highlight.vim
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/coc)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/coc/highlight.vim"
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/coc/highlight.vim
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/coc)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/coc/highlight.vim"
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/coc/highlight.vim
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/coc)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/coc/highlight.vim"
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/coc/highlight.vim
Executing CursorHold Autocommands for "*"
autocommand silent call CocActionAsync('highlight')

autocommand silent call CocActionAsync('highlight')

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()


Executing WinLeave Autocommands for "*"
autocommand call s:Autocmd('WinLeave', win_getid())

Executing WinLeave Autocommands for "*"
autocommand call s:Remove_Matches()

Executing WinEnter Autocommands for "*"
autocommand call s:dopopd()

Executing WinEnter Autocommands for "*"
autocommand call <sid>on_window_changed('WinEnter')

Executing WinEnter Autocommands for "*"
autocommand call coc#float#nvim_win_enter(win_getid())

autocommand call s:Autocmd('WinEnter', win_getid())

Executing WinEnter Autocommands for "*"
autocommand let g:fzf#vim#buffers[bufnr('')] = reltimefloat(reltime())

Executing WinEnter Autocommands for "*"
autocommand let s:tmux_is_last_pane = 0

Executing WinEnter Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing WinEnter Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing BufEnter Autocommands for "*"
autocommand set fo-=c fo-=r fo-=o

Executing BufEnter Autocommands for "*"
autocommand call s:Autocmd('BufEnter', +expand('<abuf>'))

Executing BufEnter Autocommands for "*"
autocommand if conflict_marker#detect#markers() | call s:on_detected() | endif

Executing BufEnter Autocommands for "*"
autocommand call s:mru_append(expand('<amatch>'))

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing TextChanged Autocommands for "*"
autocommand call s:Autocmd('TextChanged', +expand('<abuf>'), getbufvar(+expand('<abuf>'), 'changedtick'))

Executing TextChanged Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing WinScrolled Autocommands for "*"
autocommand call s:HandleWinScrolled(+expand('<amatch>'))

Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing User Autocommands for "AirlineModeChanged"
autocommand call airline#mode_changed()

Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 3: sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component/repo.vim"
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/vital)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 3: sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/vital/gina.vim"
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/vital/gina.vim
continuing in /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component/repo.vim
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

not found in runtime path: "autoload/vital/_gina/Git.vim"
  1: ~/projects/github.com/txxxxc/competitive-programming/ABC_207/c/vim/_editor.lua
  2: /opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/ftplugin.vim
  3: /opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/indent.vim
  4: ~/dotfiles/.config/nvim/init.vim
  5: ~/dotfiles/.config/nvim/settings/init/dein.vim
  6: ~/.cache/dein/repos/github.com/Shougo/dein.vim/autoload/dein.vim
  7: ~/.cache/dein/repos/github.com/Shougo/dein.vim/autoload/dein/min.vim
  8: ~/.cache/dein/state_nvim.vim
  9: /opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/ftoff.vim
 10: ~/.cache/dein/.cache/init.vim/.dein/autoload/lexima.vim
 11: ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/lexima.vim
 12: ~/.cache/dein/repos/github.com/Shougo/dein.vim/autoload/dein/autoload.vim
 13: ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/_lexima/Data/List.vim
 14: ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/_lexima.vim
 15: ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/_lexima/Data/String.vim
 16: ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/_lexima/Vim/Buffer.vim
 17: ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/_lexima/Vim/Guard.vim
 18: ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/_lexima/Prelude.vim
 19: ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/_lexima/Data/Dict.vim
 20: ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/_lexima/Vim/Type.vim
 21: ~/.cache/dein/.cache/init.vim/.dein/autoload/lexima/insmode.vim
 22: ~/.cache/dein/.cache/init.vim/.dein/autoload/lexima/charstack.vim
 23: ~/.cache/dein/.cache/init.vim/.dein/autoload/lexima/cmdmode.vim
 24: ~/.cache/dein/.cache/init.vim/.dein/autoload/lexima/string.vim
 25: ~/.cache/dein/.cache/init.vim/.dein/autoload/lexima/sortedlist.vim
 26: ~/.cache/dein/.cache/init.vim/.dein/autoload/lexima/endwise_rule.vim
 27: ~/.cache/dein/repos/github.com/Shougo/dein.vim/autoload/dein/util.vim
 28: ~/dotfiles/.config/nvim/settings/user/appearance.vim
 29: /opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax/syntax.vim
 30: /opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax/synload.vim
 31: /opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/filetype.lua
 32: ~/.cache/dein/.cache/init.vim/.dein/ftdetect/ftdetect.vim
 33: /opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/filetype.vim
 34: /opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/ftplugin/cpp.vim
 35: /opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/ftplugin/c.vim
 36: /opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/indent/cpp.vim
 37: /opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax/cpp.vim
 38: /opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax/c.vim
 39: /opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax/nosyntax.vim
 40: ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim
 41: ~/dotfiles/.config/nvim/settings/user/editor.vim
 42: ~/.cache/dein/.cache/init.vim/.dein/lua/toggleterm.lua
 43: ~/.cache/dein/repos/github.com/nvim-treesitter/nvim-treesitter/lua/nvim-treesitter/install.lua
 44: ~/dotfiles/.config/nvim/settings/user/fzf-preview.vim
 45: ~/dotfiles/.config/nvim/settings/user/keybind.vim
 46: ~/dotfiles/.config/nvim/settings/user/leader.vim
 47: ~/dotfiles/.config/nvim/settings/plugins/coc.vim
 48: ~/dotfiles/.config/nvim/settings/scripts/coc-jump-to-definition.vim
 49: ~/dotfiles/.config/nvim/settings/scripts/tig-status.vim
 50: ~/.cache/dein/repos/github.com/junegunn/fzf/plugin/fzf.vim
 51: ~/.cache/dein/repos/github.com/Shougo/vimproc.vim/plugin/vimproc.vim
 52: ~/.cache/dein/.cache/init.vim/.dein/plugin/airline-themes.vim
 53: ~/.cache/dein/.cache/init.vim/.dein/plugin/airline.vim
 54: ~/.cache/dein/.cache/init.vim/.dein/autoload/airline/init.vim
 55: ~/.cache/dein/.cache/init.vim/.dein/autoload/airline/parts.vim
 56: ~/.cache/dein/.cache/init.vim/.dein/autoload/airline/formatter/short_path.vim
 57: ~/.cache/dein/.cache/init.vim/.dein/autoload/airline/util.vim
 58: ~/.cache/dein/.cache/init.vim/.dein/plugin/coc.vim
 59: ~/.cache/dein/.cache/init.vim/.dein/autoload/coc/rpc.vim
 60: ~/.cache/dein/.cache/init.vim/.dein/autoload/coc/util.vim
 61: ~/.cache/dein/.cache/init.vim/.dein/autoload/coc/client.vim
 62: ~/.cache/dein/.cache/init.vim/.dein/autoload/coc/highlight.vim
 63: ~/.cache/dein/.cache/init.vim/.dein/autoload/coc/color.vim
 64: ~/.cache/dein/.cache/init.vim/.dein/plugin/commentary.vim
 65: ~/.cache/dein/.cache/init.vim/.dein/plugin/conflict_marker.vim
 66: ~/.cache/dein/.cache/init.vim/.dein/plugin/denops/debug.vim
 67: ~/.cache/dein/.cache/init.vim/.dein/plugin/denops.vim
 68: ~/.cache/dein/.cache/init.vim/.dein/autoload/denops.vim
 69: ~/.cache/dein/.cache/init.vim/.dein/plugin/EasyMotion.vim
 70: ~/.cache/dein/.cache/init.vim/.dein/plugin/editorconfig.vim
 71: ~/.cache/dein/.cache/init.vim/.dein/plugin/emmet.vim
 72: ~/.cache/dein/.cache/init.vim/.dein/plugin/far.vim
 73: ~/.cache/dein/.cache/init.vim/.dein/plugin/fern.vim
 74: ~/.cache/dein/.cache/init.vim/.dein/plugin/fern_git_status.vim
 75: ~/.cache/dein/.cache/init.vim/.dein/plugin/fern_renderer_nerdfont.vim
 76: ~/.cache/dein/.cache/init.vim/.dein/autoload/fern.vim
 77: ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/fern.vim
 78: ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/_fern/Config.vim
 79: ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/_fern.vim
 80: ~/.cache/dein/.cache/init.vim/.dein/plugin/fzf.vim
 81: ~/.cache/dein/.cache/init.vim/.dein/plugin/fzf_preview.vim
 82: ~/.cache/dein/.cache/init.vim/.dein/plugin/gin-branch.vim
 83: ~/.cache/dein/.cache/init.vim/.dein/plugin/gin-chaperon.vim
 84: ~/.cache/dein/.cache/init.vim/.dein/plugin/gin-diff.vim
 85: ~/.cache/dein/.cache/init.vim/.dein/plugin/gin-edit.vim
 86: ~/.cache/dein/.cache/init.vim/.dein/plugin/gin-patch.vim
 87: ~/.cache/dein/.cache/init.vim/.dein/plugin/gin-status.vim
 88: ~/.cache/dein/.cache/init.vim/.dein/plugin/gin.vim
 89: ~/.cache/dein/.cache/init.vim/.dein/plugin/gina.vim
 90: ~/.cache/dein/.cache/init.vim/.dein/plugin/glyph_palette.vim
 91: ~/.cache/dein/.cache/init.vim/.dein/autoload/glyph_palette/defaults.vim
 92: ~/.cache/dein/.cache/init.vim/.dein/plugin/goimports.vim
 93: ~/.cache/dein/.cache/init.vim/.dein/plugin/highlightedyank.vim
 94: ~/.cache/dein/.cache/init.vim/.dein/plugin/lexima.vim
 95: ~/.cache/dein/.cache/init.vim/.dein/plugin/operator/sandwich.vim
 96: ~/.cache/dein/.cache/init.vim/.dein/plugin/preview_markdown.vim
 97: ~/.cache/dein/.cache/init.vim/.dein/plugin/quickrun.vim
 98: ~/.cache/dein/.cache/init.vim/.dein/plugin/sandwich.vim
 99: ~/.cache/dein/.cache/init.vim/.dein/plugin/surround.vim
100: ~/.cache/dein/.cache/init.vim/.dein/plugin/textobj/sandwich.vim
101: ~/.cache/dein/.cache/init.vim/.dein/plugin/tmux_navigator.vim
102: ~/.cache/dein/.cache/init.vim/.dein/plugin/vim-gotests.vim
103: ~/.cache/dein/.cache/init.vim/.dein/plugin/webdevicons.vim
104: ~/.cache/dein/.cache/init.vim/.dein/autoload/airline.vim
105: /opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/plugin/gzip.vim
106: /opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/plugin/health.vim
107: /opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/plugin/matchit.vim
108: /opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/pack/dist/opt/matchit/plugin/matchit.vim
109: /opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/plugin/matchparen.vim
110: /opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/plugin/netrwPlugin.vim
111: /opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/plugin/rplugin.vim
112: ~/.local/share/nvim/rplugin.vim
113: /opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/autoload/remote/host.vim
114: /opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/autoload/remote/define.vim
115: /opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/plugin/shada.vim
116: /opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/plugin/spellfile.vim
117: /opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/plugin/tarPlugin.vim
118: /opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/plugin/tohtml.vim
119: /opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/plugin/tutor.vim
120: /opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/plugin/zipPlugin.vim
121: ~/.cache/dein/repos/github.com/nvim-treesitter/nvim-treesitter/plugin/nvim-treesitter.lua
122: ~/.cache/dein/repos/github.com/nvim-treesitter/nvim-treesitter/lua/nvim-treesitter/utils.lua
123: ~/.cache/dein/repos/github.com/nvim-treesitter/nvim-treesitter/lua/nvim-treesitter/configs.lua
124: /opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/plugin/man.lua
125: ~/dotfiles/.config/nvim/pack/plugins/start/session.vim/plugin/session.vim
126: ~/.cache/dein/.cache/init.vim/.dein/autoload/airline/extensions.vim
127: ~/.cache/dein/.cache/init.vim/.dein/autoload/airline/extensions/quickfix.vim
128: ~/.cache/dein/.cache/init.vim/.dein/autoload/airline/extensions/gina.vim
129: ~/.cache/dein/.cache/init.vim/.dein/autoload/airline/extensions/fern.vim
130: ~/.cache/dein/.cache/init.vim/.dein/autoload/airline/extensions/fzf.vim
131: ~/.cache/dein/.cache/init.vim/.dein/autoload/airline/extensions/term.vim
132: ~/.cache/dein/.cache/init.vim/.dein/autoload/airline/section.vim
133: ~/.cache/dein/.cache/init.vim/.dein/autoload/airline/highlighter.vim
134: ~/.cache/dein/.cache/init.vim/.dein/autoload/airline/extensions/hunks.vim
135: ~/.cache/dein/.cache/init.vim/.dein/autoload/airline/extensions/branch.vim
136: /opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/lua/vim/lsp.lua
137: ~/.cache/dein/.cache/init.vim/.dein/autoload/airline/extensions/nvimlsp.vim
138: ~/.cache/dein/.cache/init.vim/.dein/autoload/airline/extensions/whitespace.vim
139: ~/.cache/dein/.cache/init.vim/.dein/autoload/airline/extensions/po.vim
140: ~/.cache/dein/.cache/init.vim/.dein/autoload/airline/extensions/wordcount.vim
141: ~/.cache/dein/.cache/init.vim/.dein/autoload/airline/extensions/keymap.vim
142: ~/.cache/dein/.cache/init.vim/.dein/autoload/airline/extensions/searchcount.vim
143: ~/.cache/dein/.cache/init.vim/.dein/autoload/airline/themes/nord.vim
144: ~/.cache/dein/.cache/init.vim/.dein/autoload/airline/themes.vim
145: ~/.cache/dein/.cache/init.vim/.dein/autoload/airline/builder.vim
146: ~/.cache/dein/.cache/init.vim/.dein/autoload/airline/extensions/default.vim
147: ~/.cache/dein/.cache/init.vim/.dein/autoload/conflict_marker/detect.vim
148: ~/.cache/dein/.cache/init.vim/.dein/autoload/fzf_preview/remote/mr.vim
149: ~/.cache/dein/.cache/init.vim/.dein/autoload/fzf_preview/remote/util.vim
150: ~/.cache/dein/.cache/init.vim/.dein/autoload/denops/server.vim
151: ~/.cache/dein/.cache/init.vim/.dein/autoload/denops/util.vim
152: ~/.cache/dein/.cache/init.vim/.dein/autoload/denops/job.vim
153: ~/.cache/dein/.cache/init.vim/.dein/autoload/fern_git_status.vim
154: ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/_fern/Async/CancellationToken.vim
155: ~/.cache/dein/.cache/init.vim/.dein/autoload/fern/hook.vim
156: ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/_fern/Async/Promise.vim
157: ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/_fern/Async/Later.vim
158: ~/.cache/dein/.cache/init.vim/.dein/autoload/fzf_preview/rpc.vim
159: ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/fzf_preview.vim
160: ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/_fzf_preview/Async/Promise.vim
161: ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/_fzf_preview.vim
162: ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/_fzf_preview/Async/Later.vim
163: ~/.cache/dein/.cache/init.vim/.dein/autoload/fzf_preview/rpc/server.vim
164: ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/_fzf_preview/VS/RPC/JSON.vim
165: ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/_fzf_preview/VS/System/Job.vim
166: ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/_fzf_preview/VS/Event/Emitter.vim
167: /opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/autoload/provider/clipboard.vim
168: ~/.cache/dein/.cache/init.vim/.dein/autoload/denops/plugin.vim
169: ~/.cache/dein/.cache/init.vim/.dein/autoload/denops/api.vim
170: ~/.cache/dein/.cache/init.vim/.dein/autoload/coc/compat.vim
171: ~/.cache/dein/.cache/init.vim/.dein/autoload/coc/ui.vim
172: ~/.config/coc/extensions/node_modules/coc-fzf-preview/plugin/fzf_preview.vim
173: ~/.cache/dein/.cache/init.vim/.dein/autoload/coc/float.vim
174: ~/.cache/dein/.cache/init.vim/.dein/autoload/coc/notify.vim
175: ~/.cache/dein/.cache/init.vim/.dein/autoload/coc/dict.vim
176: ~/.cache/dein/.cache/init.vim/.dein/autoload/coc/window.vim
177: ~/.cache/dein/.cache/init.vim/.dein/autoload/coc/string.vim
178: ~/.cache/dein/.cache/init.vim/.dein/autoload/coc/cursor.vim
179: ~/.cache/dein/.cache/init.vim/.dein/autoload/coc/math.vim
180: /opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/autoload/provider/python3.vim
181: /opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/autoload/provider/pythonx.vim
182: /opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/autoload/provider.vim
183: ~/.config/coc/extensions/node_modules/coc-fzf-preview/autoload/fzf_preview/remote/variable.vim
184: ~/.config/coc/extensions/node_modules/coc-fzf-preview/autoload/fzf_preview/remote/resource/project_files.vim
185: ~/.config/coc/extensions/node_modules/coc-fzf-preview/autoload/fzf_preview/remote/window.vim
186: ~/.config/coc/extensions/node_modules/coc-fzf-preview/autoload/fzf_preview/remote/runner.vim
187: /opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/autoload/provider/node.vim
188: ~/.config/coc/extensions/node_modules/coc-fzf-preview/autoload/fzf_preview/remote/handler_to_process.vim
189: ~/.cache/dein/.cache/init.vim/.dein/autoload/coc/pum.vim
190: ~/.cache/dein/.cache/init.vim/.dein/autoload/coc/dialog.vim
191: ~/.cache/dein/.cache/init.vim/.dein/autoload/coc.vim
192: ~/.cache/dein/.cache/init.vim/.dein/autoload/highlightedyank.vim
193: ~/.cache/dein/.cache/init.vim/.dein/autoload/highlightedyank/highlight.vim
194: ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/highlightedyank.vim
195: ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/_highlightedyank/Schedule.vim
196: ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/_highlightedyank.vim
197: ~/.cache/dein/.cache/init.vim/.dein/autoload/coc/prompt.vim
198: /opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/ftplugin/text.vim
199: ~/.cache/dein/.cache/init.vim/.dein/autoload/airline/extensions/wordcount/formatters/default.vim
200: ~/.cache/dein/.cache/init.vim/.dein/autoload/quickrun/command.vim
201: ~/.cache/dein/.cache/init.vim/.dein/autoload/quickrun.vim
202: ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/quickrun.vim
203: ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/_quickrun/Data/List.vim
204: ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/_quickrun.vim
205: ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/_quickrun/System/File.vim
206: ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/_quickrun/System/Filepath.vim
207: ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/_quickrun/Vim/Message.vim
208: ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/_quickrun/Process.vim
209: ~/.cache/dein/.cache/init.vim/.dein/autoload/quickrun/module.vim
210: ~/.cache/dein/.cache/init.vim/.dein/autoload/quickrun/hook/cd.vim
211: ~/.cache/dein/.cache/init.vim/.dein/autoload/quickrun/hook/eval.vim
212: ~/.cache/dein/.cache/init.vim/.dein/autoload/quickrun/hook/output_encode.vim
213: ~/.cache/dein/.cache/init.vim/.dein/autoload/quickrun/hook/shebang.vim
214: ~/.cache/dein/.cache/init.vim/.dein/autoload/quickrun/hook/sweep.vim
215: ~/.cache/dein/.cache/init.vim/.dein/autoload/quickrun/hook/time.vim
216: ~/.cache/dein/.cache/init.vim/.dein/autoload/quickrun/outputter/browser.vim
217: ~/.cache/dein/.cache/init.vim/.dein/autoload/quickrun/outputter/file.vim
218: ~/.cache/dein/.cache/init.vim/.dein/autoload/quickrun/outputter/buffer.vim
219: ~/.cache/dein/.cache/init.vim/.dein/autoload/quickrun/outputter/buffered.vim
220: ~/.cache/dein/.cache/init.vim/.dein/autoload/quickrun/outputter/buffer_legacy.vim
221: ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/_quickrun/Vim/ViewTracer.vim
222: ~/.cache/dein/.cache/init.vim/.dein/autoload/quickrun/outputter/error.vim
223: ~/.cache/dein/.cache/init.vim/.dein/autoload/quickrun/outputter/loclist.vim
224: ~/.cache/dein/.cache/init.vim/.dein/autoload/quickrun/outputter/quickfix.vim
225: ~/.cache/dein/.cache/init.vim/.dein/autoload/quickrun/outputter/message.vim
226: ~/.cache/dein/.cache/init.vim/.dein/autoload/quickrun/outputter/multi.vim
227: ~/.cache/dein/.cache/init.vim/.dein/autoload/quickrun/outputter/null.vim
228: ~/.cache/dein/.cache/init.vim/.dein/autoload/quickrun/outputter/popup.vim
229: ~/.cache/dein/.cache/init.vim/.dein/autoload/quickrun/outputter/variable.vim
230: ~/.cache/dein/.cache/init.vim/.dein/autoload/quickrun/runner/concurrent_process.vim
231: ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/_quickrun/Vim/Buffer.vim
232: ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/_quickrun/Vim/Guard.vim
233: ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/_quickrun/Prelude.vim
234: ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/_quickrun/Data/Dict.vim
235: ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/_quickrun/Vim/Type.vim
236: ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/_quickrun/ConcurrentProcess.vim
237: ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/_quickrun/Data/String.vim
238: ~/.cache/dein/.cache/init.vim/.dein/autoload/quickrun/runner/job.vim
239: ~/.cache/dein/.cache/init.vim/.dein/autoload/quickrun/runner/python.vim
240: ~/.cache/dein/.cache/init.vim/.dein/autoload/quickrun/runner/remote.vim
241: ~/.cache/dein/.cache/init.vim/.dein/autoload/quickrun/runner/shell.vim
242: ~/.cache/dein/.cache/init.vim/.dein/autoload/quickrun/runner/system.vim
243: ~/.cache/dein/.cache/init.vim/.dein/autoload/quickrun/runner/terminal.vim
244: ~/.cache/dein/.cache/init.vim/.dein/autoload/quickrun/runner/vimproc.vim
245: ~/.cache/dein/.cache/init.vim/.dein/autoload/quickrun/runner/vimscript.vim
246: ~/.cache/dein/.cache/init.vim/.dein/autoload/quickrun/session.vim
247: ~/.cache/dein/.cache/init.vim/.dein/autoload/quickrun/config.vim
248: /opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/scripts.vim
249: ~/.cache/dein/.cache/init.vim/.dein/autoload/gina/component/repo.vim
250: ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/gina.vim
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 1: sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim"
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim
continuing in <SNR>250__source
  1: ~/projects/github.com/txxxxc/competitive-programming/ABC_207/c/vim/_editor.lua
  2: /opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/ftplugin.vim
  3: /opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/indent.vim
  4: ~/dotfiles/.config/nvim/init.vim
  5: ~/dotfiles/.config/nvim/settings/init/dein.vim
  6: ~/.cache/dein/repos/github.com/Shougo/dein.vim/autoload/dein.vim
  7: ~/.cache/dein/repos/github.com/Shougo/dein.vim/autoload/dein/min.vim
  8: ~/.cache/dein/state_nvim.vim
  9: /opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/ftoff.vim
 10: ~/.cache/dein/.cache/init.vim/.dein/autoload/lexima.vim
 11: ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/lexima.vim
 12: ~/.cache/dein/repos/github.com/Shougo/dein.vim/autoload/dein/autoload.vim
 13: ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/_lexima/Data/List.vim
 14: ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/_lexima.vim
 15: ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/_lexima/Data/String.vim
 16: ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/_lexima/Vim/Buffer.vim
 17: ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/_lexima/Vim/Guard.vim
 18: ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/_lexima/Prelude.vim
 19: ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/_lexima/Data/Dict.vim
 20: ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/_lexima/Vim/Type.vim
 21: ~/.cache/dein/.cache/init.vim/.dein/autoload/lexima/insmode.vim
 22: ~/.cache/dein/.cache/init.vim/.dein/autoload/lexima/charstack.vim
 23: ~/.cache/dein/.cache/init.vim/.dein/autoload/lexima/cmdmode.vim
 24: ~/.cache/dein/.cache/init.vim/.dein/autoload/lexima/string.vim
 25: ~/.cache/dein/.cache/init.vim/.dein/autoload/lexima/sortedlist.vim
 26: ~/.cache/dein/.cache/init.vim/.dein/autoload/lexima/endwise_rule.vim
 27: ~/.cache/dein/repos/github.com/Shougo/dein.vim/autoload/dein/util.vim
 28: ~/dotfiles/.config/nvim/settings/user/appearance.vim
 29: /opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax/syntax.vim
 30: /opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax/synload.vim
 31: /opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/filetype.lua
 32: ~/.cache/dein/.cache/init.vim/.dein/ftdetect/ftdetect.vim
 33: /opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/filetype.vim
 34: /opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/ftplugin/cpp.vim
 35: /opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/ftplugin/c.vim
 36: /opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/indent/cpp.vim
 37: /opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax/cpp.vim
 38: /opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax/c.vim
 39: /opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax/nosyntax.vim
 40: ~/.cache/dein/.cache/init.vim/.dein/colors/nord.vim
 41: ~/dotfiles/.config/nvim/settings/user/editor.vim
 42: ~/.cache/dein/.cache/init.vim/.dein/lua/toggleterm.lua
 43: ~/.cache/dein/repos/github.com/nvim-treesitter/nvim-treesitter/lua/nvim-treesitter/install.lua
 44: ~/dotfiles/.config/nvim/settings/user/fzf-preview.vim
 45: ~/dotfiles/.config/nvim/settings/user/keybind.vim
 46: ~/dotfiles/.config/nvim/settings/user/leader.vim
 47: ~/dotfiles/.config/nvim/settings/plugins/coc.vim
 48: ~/dotfiles/.config/nvim/settings/scripts/coc-jump-to-definition.vim
 49: ~/dotfiles/.config/nvim/settings/scripts/tig-status.vim
 50: ~/.cache/dein/repos/github.com/junegunn/fzf/plugin/fzf.vim
 51: ~/.cache/dein/repos/github.com/Shougo/vimproc.vim/plugin/vimproc.vim
 52: ~/.cache/dein/.cache/init.vim/.dein/plugin/airline-themes.vim
 53: ~/.cache/dein/.cache/init.vim/.dein/plugin/airline.vim
 54: ~/.cache/dein/.cache/init.vim/.dein/autoload/airline/init.vim
 55: ~/.cache/dein/.cache/init.vim/.dein/autoload/airline/parts.vim
 56: ~/.cache/dein/.cache/init.vim/.dein/autoload/airline/formatter/short_path.vim
 57: ~/.cache/dein/.cache/init.vim/.dein/autoload/airline/util.vim
 58: ~/.cache/dein/.cache/init.vim/.dein/plugin/coc.vim
 59: ~/.cache/dein/.cache/init.vim/.dein/autoload/coc/rpc.vim
 60: ~/.cache/dein/.cache/init.vim/.dein/autoload/coc/util.vim
 61: ~/.cache/dein/.cache/init.vim/.dein/autoload/coc/client.vim
 62: ~/.cache/dein/.cache/init.vim/.dein/autoload/coc/highlight.vim
 63: ~/.cache/dein/.cache/init.vim/.dein/autoload/coc/color.vim
 64: ~/.cache/dein/.cache/init.vim/.dein/plugin/commentary.vim
 65: ~/.cache/dein/.cache/init.vim/.dein/plugin/conflict_marker.vim
 66: ~/.cache/dein/.cache/init.vim/.dein/plugin/denops/debug.vim
 67: ~/.cache/dein/.cache/init.vim/.dein/plugin/denops.vim
 68: ~/.cache/dein/.cache/init.vim/.dein/autoload/denops.vim
 69: ~/.cache/dein/.cache/init.vim/.dein/plugin/EasyMotion.vim
 70: ~/.cache/dein/.cache/init.vim/.dein/plugin/editorconfig.vim
 71: ~/.cache/dein/.cache/init.vim/.dein/plugin/emmet.vim
 72: ~/.cache/dein/.cache/init.vim/.dein/plugin/far.vim
 73: ~/.cache/dein/.cache/init.vim/.dein/plugin/fern.vim
 74: ~/.cache/dein/.cache/init.vim/.dein/plugin/fern_git_status.vim
 75: ~/.cache/dein/.cache/init.vim/.dein/plugin/fern_renderer_nerdfont.vim
 76: ~/.cache/dein/.cache/init.vim/.dein/autoload/fern.vim
 77: ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/fern.vim
 78: ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/_fern/Config.vim
 79: ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/_fern.vim
 80: ~/.cache/dein/.cache/init.vim/.dein/plugin/fzf.vim
 81: ~/.cache/dein/.cache/init.vim/.dein/plugin/fzf_preview.vim
 82: ~/.cache/dein/.cache/init.vim/.dein/plugin/gin-branch.vim
 83: ~/.cache/dein/.cache/init.vim/.dein/plugin/gin-chaperon.vim
 84: ~/.cache/dein/.cache/init.vim/.dein/plugin/gin-diff.vim
 85: ~/.cache/dein/.cache/init.vim/.dein/plugin/gin-edit.vim
 86: ~/.cache/dein/.cache/init.vim/.dein/plugin/gin-patch.vim
 87: ~/.cache/dein/.cache/init.vim/.dein/plugin/gin-status.vim
 88: ~/.cache/dein/.cache/init.vim/.dein/plugin/gin.vim
 89: ~/.cache/dein/.cache/init.vim/.dein/plugin/gina.vim
 90: ~/.cache/dein/.cache/init.vim/.dein/plugin/glyph_palette.vim
 91: ~/.cache/dein/.cache/init.vim/.dein/autoload/glyph_palette/defaults.vim
 92: ~/.cache/dein/.cache/init.vim/.dein/plugin/goimports.vim
 93: ~/.cache/dein/.cache/init.vim/.dein/plugin/highlightedyank.vim
 94: ~/.cache/dein/.cache/init.vim/.dein/plugin/lexima.vim
 95: ~/.cache/dein/.cache/init.vim/.dein/plugin/operator/sandwich.vim
 96: ~/.cache/dein/.cache/init.vim/.dein/plugin/preview_markdown.vim
 97: ~/.cache/dein/.cache/init.vim/.dein/plugin/quickrun.vim
 98: ~/.cache/dein/.cache/init.vim/.dein/plugin/sandwich.vim
 99: ~/.cache/dein/.cache/init.vim/.dein/plugin/surround.vim
100: ~/.cache/dein/.cache/init.vim/.dein/plugin/textobj/sandwich.vim
101: ~/.cache/dein/.cache/init.vim/.dein/plugin/tmux_navigator.vim
102: ~/.cache/dein/.cache/init.vim/.dein/plugin/vim-gotests.vim
103: ~/.cache/dein/.cache/init.vim/.dein/plugin/webdevicons.vim
104: ~/.cache/dein/.cache/init.vim/.dein/autoload/airline.vim
105: /opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/plugin/gzip.vim
106: /opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/plugin/health.vim
107: /opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/plugin/matchit.vim
108: /opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/pack/dist/opt/matchit/plugin/matchit.vim
109: /opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/plugin/matchparen.vim
110: /opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/plugin/netrwPlugin.vim
111: /opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/plugin/rplugin.vim
112: ~/.local/share/nvim/rplugin.vim
113: /opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/autoload/remote/host.vim
114: /opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/autoload/remote/define.vim
115: /opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/plugin/shada.vim
116: /opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/plugin/spellfile.vim
117: /opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/plugin/tarPlugin.vim
118: /opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/plugin/tohtml.vim
119: /opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/plugin/tutor.vim
120: /opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/plugin/zipPlugin.vim
121: ~/.cache/dein/repos/github.com/nvim-treesitter/nvim-treesitter/plugin/nvim-treesitter.lua
122: ~/.cache/dein/repos/github.com/nvim-treesitter/nvim-treesitter/lua/nvim-treesitter/utils.lua
123: ~/.cache/dein/repos/github.com/nvim-treesitter/nvim-treesitter/lua/nvim-treesitter/configs.lua
124: /opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/plugin/man.lua
125: ~/dotfiles/.config/nvim/pack/plugins/start/session.vim/plugin/session.vim
126: ~/.cache/dein/.cache/init.vim/.dein/autoload/airline/extensions.vim
127: ~/.cache/dein/.cache/init.vim/.dein/autoload/airline/extensions/quickfix.vim
128: ~/.cache/dein/.cache/init.vim/.dein/autoload/airline/extensions/gina.vim
129: ~/.cache/dein/.cache/init.vim/.dein/autoload/airline/extensions/fern.vim
130: ~/.cache/dein/.cache/init.vim/.dein/autoload/airline/extensions/fzf.vim
131: ~/.cache/dein/.cache/init.vim/.dein/autoload/airline/extensions/term.vim
132: ~/.cache/dein/.cache/init.vim/.dein/autoload/airline/section.vim
133: ~/.cache/dein/.cache/init.vim/.dein/autoload/airline/highlighter.vim
134: ~/.cache/dein/.cache/init.vim/.dein/autoload/airline/extensions/hunks.vim
135: ~/.cache/dein/.cache/init.vim/.dein/autoload/airline/extensions/branch.vim
136: /opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/lua/vim/lsp.lua
137: ~/.cache/dein/.cache/init.vim/.dein/autoload/airline/extensions/nvimlsp.vim
138: ~/.cache/dein/.cache/init.vim/.dein/autoload/airline/extensions/whitespace.vim
139: ~/.cache/dein/.cache/init.vim/.dein/autoload/airline/extensions/po.vim
140: ~/.cache/dein/.cache/init.vim/.dein/autoload/airline/extensions/wordcount.vim
141: ~/.cache/dein/.cache/init.vim/.dein/autoload/airline/extensions/keymap.vim
142: ~/.cache/dein/.cache/init.vim/.dein/autoload/airline/extensions/searchcount.vim
143: ~/.cache/dein/.cache/init.vim/.dein/autoload/airline/themes/nord.vim
144: ~/.cache/dein/.cache/init.vim/.dein/autoload/airline/themes.vim
145: ~/.cache/dein/.cache/init.vim/.dein/autoload/airline/builder.vim
146: ~/.cache/dein/.cache/init.vim/.dein/autoload/airline/extensions/default.vim
147: ~/.cache/dein/.cache/init.vim/.dein/autoload/conflict_marker/detect.vim
148: ~/.cache/dein/.cache/init.vim/.dein/autoload/fzf_preview/remote/mr.vim
149: ~/.cache/dein/.cache/init.vim/.dein/autoload/fzf_preview/remote/util.vim
150: ~/.cache/dein/.cache/init.vim/.dein/autoload/denops/server.vim
151: ~/.cache/dein/.cache/init.vim/.dein/autoload/denops/util.vim
152: ~/.cache/dein/.cache/init.vim/.dein/autoload/denops/job.vim
153: ~/.cache/dein/.cache/init.vim/.dein/autoload/fern_git_status.vim
154: ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/_fern/Async/CancellationToken.vim
155: ~/.cache/dein/.cache/init.vim/.dein/autoload/fern/hook.vim
156: ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/_fern/Async/Promise.vim
157: ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/_fern/Async/Later.vim
158: ~/.cache/dein/.cache/init.vim/.dein/autoload/fzf_preview/rpc.vim
159: ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/fzf_preview.vim
160: ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/_fzf_preview/Async/Promise.vim
161: ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/_fzf_preview.vim
162: ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/_fzf_preview/Async/Later.vim
163: ~/.cache/dein/.cache/init.vim/.dein/autoload/fzf_preview/rpc/server.vim
164: ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/_fzf_preview/VS/RPC/JSON.vim
165: ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/_fzf_preview/VS/System/Job.vim
166: ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/_fzf_preview/VS/Event/Emitter.vim
167: /opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/autoload/provider/clipboard.vim
168: ~/.cache/dein/.cache/init.vim/.dein/autoload/denops/plugin.vim
169: ~/.cache/dein/.cache/init.vim/.dein/autoload/denops/api.vim
170: ~/.cache/dein/.cache/init.vim/.dein/autoload/coc/compat.vim
171: ~/.cache/dein/.cache/init.vim/.dein/autoload/coc/ui.vim
172: ~/.config/coc/extensions/node_modules/coc-fzf-preview/plugin/fzf_preview.vim
173: ~/.cache/dein/.cache/init.vim/.dein/autoload/coc/float.vim
174: ~/.cache/dein/.cache/init.vim/.dein/autoload/coc/notify.vim
175: ~/.cache/dein/.cache/init.vim/.dein/autoload/coc/dict.vim
176: ~/.cache/dein/.cache/init.vim/.dein/autoload/coc/window.vim
177: ~/.cache/dein/.cache/init.vim/.dein/autoload/coc/string.vim
178: ~/.cache/dein/.cache/init.vim/.dein/autoload/coc/cursor.vim
179: ~/.cache/dein/.cache/init.vim/.dein/autoload/coc/math.vim
180: /opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/autoload/provider/python3.vim
181: /opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/autoload/provider/pythonx.vim
182: /opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/autoload/provider.vim
183: ~/.config/coc/extensions/node_modules/coc-fzf-preview/autoload/fzf_preview/remote/variable.vim
184: ~/.config/coc/extensions/node_modules/coc-fzf-preview/autoload/fzf_preview/remote/resource/project_files.vim
185: ~/.config/coc/extensions/node_modules/coc-fzf-preview/autoload/fzf_preview/remote/window.vim
186: ~/.config/coc/extensions/node_modules/coc-fzf-preview/autoload/fzf_preview/remote/runner.vim
187: /opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/autoload/provider/node.vim
188: ~/.config/coc/extensions/node_modules/coc-fzf-preview/autoload/fzf_preview/remote/handler_to_process.vim
189: ~/.cache/dein/.cache/init.vim/.dein/autoload/coc/pum.vim
190: ~/.cache/dein/.cache/init.vim/.dein/autoload/coc/dialog.vim
191: ~/.cache/dein/.cache/init.vim/.dein/autoload/coc.vim
192: ~/.cache/dein/.cache/init.vim/.dein/autoload/highlightedyank.vim
193: ~/.cache/dein/.cache/init.vim/.dein/autoload/highlightedyank/highlight.vim
194: ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/highlightedyank.vim
195: ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/_highlightedyank/Schedule.vim
196: ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/_highlightedyank.vim
197: ~/.cache/dein/.cache/init.vim/.dein/autoload/coc/prompt.vim
198: /opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/ftplugin/text.vim
199: ~/.cache/dein/.cache/init.vim/.dein/autoload/airline/extensions/wordcount/formatters/default.vim
200: ~/.cache/dein/.cache/init.vim/.dein/autoload/quickrun/command.vim
201: ~/.cache/dein/.cache/init.vim/.dein/autoload/quickrun.vim
202: ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/quickrun.vim
203: ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/_quickrun/Data/List.vim
204: ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/_quickrun.vim
205: ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/_quickrun/System/File.vim
206: ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/_quickrun/System/Filepath.vim
207: ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/_quickrun/Vim/Message.vim
208: ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/_quickrun/Process.vim
209: ~/.cache/dein/.cache/init.vim/.dein/autoload/quickrun/module.vim
210: ~/.cache/dein/.cache/init.vim/.dein/autoload/quickrun/hook/cd.vim
211: ~/.cache/dein/.cache/init.vim/.dein/autoload/quickrun/hook/eval.vim
212: ~/.cache/dein/.cache/init.vim/.dein/autoload/quickrun/hook/output_encode.vim
213: ~/.cache/dein/.cache/init.vim/.dein/autoload/quickrun/hook/shebang.vim
214: ~/.cache/dein/.cache/init.vim/.dein/autoload/quickrun/hook/sweep.vim
215: ~/.cache/dein/.cache/init.vim/.dein/autoload/quickrun/hook/time.vim
216: ~/.cache/dein/.cache/init.vim/.dein/autoload/quickrun/outputter/browser.vim
217: ~/.cache/dein/.cache/init.vim/.dein/autoload/quickrun/outputter/file.vim
218: ~/.cache/dein/.cache/init.vim/.dein/autoload/quickrun/outputter/buffer.vim
219: ~/.cache/dein/.cache/init.vim/.dein/autoload/quickrun/outputter/buffered.vim
220: ~/.cache/dein/.cache/init.vim/.dein/autoload/quickrun/outputter/buffer_legacy.vim
221: ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/_quickrun/Vim/ViewTracer.vim
222: ~/.cache/dein/.cache/init.vim/.dein/autoload/quickrun/outputter/error.vim
223: ~/.cache/dein/.cache/init.vim/.dein/autoload/quickrun/outputter/loclist.vim
224: ~/.cache/dein/.cache/init.vim/.dein/autoload/quickrun/outputter/quickfix.vim
225: ~/.cache/dein/.cache/init.vim/.dein/autoload/quickrun/outputter/message.vim
226: ~/.cache/dein/.cache/init.vim/.dein/autoload/quickrun/outputter/multi.vim
227: ~/.cache/dein/.cache/init.vim/.dein/autoload/quickrun/outputter/null.vim
228: ~/.cache/dein/.cache/init.vim/.dein/autoload/quickrun/outputter/popup.vim
229: ~/.cache/dein/.cache/init.vim/.dein/autoload/quickrun/outputter/variable.vim
230: ~/.cache/dein/.cache/init.vim/.dein/autoload/quickrun/runner/concurrent_process.vim
231: ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/_quickrun/Vim/Buffer.vim
232: ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/_quickrun/Vim/Guard.vim
233: ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/_quickrun/Prelude.vim
234: ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/_quickrun/Data/Dict.vim
235: ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/_quickrun/Vim/Type.vim
236: ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/_quickrun/ConcurrentProcess.vim
237: ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/_quickrun/Data/String.vim
238: ~/.cache/dein/.cache/init.vim/.dein/autoload/quickrun/runner/job.vim
239: ~/.cache/dein/.cache/init.vim/.dein/autoload/quickrun/runner/python.vim
240: ~/.cache/dein/.cache/init.vim/.dein/autoload/quickrun/runner/remote.vim
241: ~/.cache/dein/.cache/init.vim/.dein/autoload/quickrun/runner/shell.vim
242: ~/.cache/dein/.cache/init.vim/.dein/autoload/quickrun/runner/system.vim
243: ~/.cache/dein/.cache/init.vim/.dein/autoload/quickrun/runner/terminal.vim
244: ~/.cache/dein/.cache/init.vim/.dein/autoload/quickrun/runner/vimproc.vim
245: ~/.cache/dein/.cache/init.vim/.dein/autoload/quickrun/runner/vimscript.vim
246: ~/.cache/dein/.cache/init.vim/.dein/autoload/quickrun/session.vim
247: ~/.cache/dein/.cache/init.vim/.dein/autoload/quickrun/config.vim
248: /opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/scripts.vim
249: ~/.cache/dein/.cache/init.vim/.dein/autoload/gina/component/repo.vim
250: ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/gina.vim
251: ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim
function <SNR>251__get_reference(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 139
function <SNR>251_relpath(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 76
function <SNR>251__vital_loaded(V) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 1
function <SNR>251__get_reference_trad(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 147
function <SNR>251_abspath(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 68
function <SNR>251_ref(git, refname) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 102
function <SNR>251_new(path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 17
function <SNR>251__vital_depends() abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 8
function <SNR>251__get_packed_refs(git) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 124
function <SNR>251_resolve(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 87
function <SNR>251__get_reference_packed(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 168
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component/repo.vim
continuing in <SNR>135_config_gina_branch
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 3: sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component/repo.vim"
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

not found in runtime path: "autoload/vital/_gina/Git.vim"
function <SNR>251__get_reference(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 139
function <SNR>251_relpath(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 76
function <SNR>251__vital_loaded(V) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 1
function <SNR>251__get_reference_trad(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 147
function <SNR>251_abspath(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 68
function <SNR>251_ref(git, refname) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 102
function <SNR>251_new(path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 17
function <SNR>251__vital_depends() abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 8
function <SNR>251__get_packed_refs(git) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 124
function <SNR>251_resolve(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 87
function <SNR>251__get_reference_packed(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 168
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component/repo.vim
continuing in <SNR>135_config_gina_branch
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/coc)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/coc/highlight.vim"
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/coc/highlight.vim
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 3: sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component/repo.vim"
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

not found in runtime path: "autoload/vital/_gina/Git.vim"
function <SNR>251__get_reference(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 139
function <SNR>251_relpath(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 76
function <SNR>251__vital_loaded(V) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 1
function <SNR>251__get_reference_trad(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 147
function <SNR>251_abspath(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 68
function <SNR>251_ref(git, refname) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 102
function <SNR>251_new(path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 17
function <SNR>251__vital_depends() abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 8
function <SNR>251__get_packed_refs(git) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 124
function <SNR>251_resolve(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 87
function <SNR>251__get_reference_packed(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 168
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component/repo.vim
continuing in <SNR>135_config_gina_branch
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 3: sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component/repo.vim"
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

not found in runtime path: "autoload/vital/_gina/Git.vim"
function <SNR>251__get_reference(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 139
function <SNR>251_relpath(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 76
function <SNR>251__vital_loaded(V) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 1
function <SNR>251__get_reference_trad(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 147
function <SNR>251_abspath(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 68
function <SNR>251_ref(git, refname) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 102
function <SNR>251_new(path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 17
function <SNR>251__vital_depends() abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 8
function <SNR>251__get_packed_refs(git) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 124
function <SNR>251_resolve(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 87
function <SNR>251__get_reference_packed(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 168
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component/repo.vim
continuing in <SNR>135_config_gina_branch
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 3: sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component/repo.vim"
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

not found in runtime path: "autoload/vital/_gina/Git.vim"
function <SNR>251__get_reference(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 139
function <SNR>251_relpath(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 76
function <SNR>251__vital_loaded(V) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 1
function <SNR>251__get_reference_trad(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 147
function <SNR>251_abspath(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 68
function <SNR>251_ref(git, refname) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 102
function <SNR>251_new(path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 17
function <SNR>251__vital_depends() abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 8
function <SNR>251__get_packed_refs(git) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 124
function <SNR>251_resolve(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 87
function <SNR>251__get_reference_packed(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 168
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component/repo.vim
continuing in <SNR>135_config_gina_branch
Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 3: sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component/repo.vim"
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

not found in runtime path: "autoload/vital/_gina/Git.vim"
function <SNR>251__get_reference(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 139
function <SNR>251_relpath(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 76
function <SNR>251__vital_loaded(V) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 1
function <SNR>251__get_reference_trad(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 147
function <SNR>251_abspath(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 68
function <SNR>251_ref(git, refname) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 102
function <SNR>251_new(path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 17
function <SNR>251__vital_depends() abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 8
function <SNR>251__get_packed_refs(git) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 124
function <SNR>251_resolve(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 87
function <SNR>251__get_reference_packed(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 168
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component/repo.vim
continuing in <SNR>135_config_gina_branch
Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 3: sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component/repo.vim"
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

not found in runtime path: "autoload/vital/_gina/Git.vim"
function <SNR>251__get_reference(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 139
function <SNR>251_relpath(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 76
function <SNR>251__vital_loaded(V) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 1
function <SNR>251__get_reference_trad(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 147
function <SNR>251_abspath(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 68
function <SNR>251_ref(git, refname) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 102
function <SNR>251_new(path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 17
function <SNR>251__vital_depends() abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 8
function <SNR>251__get_packed_refs(git) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 124
function <SNR>251_resolve(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 87
function <SNR>251__get_reference_packed(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 168
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component/repo.vim
continuing in <SNR>135_config_gina_branch
Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 3: sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component/repo.vim"
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

not found in runtime path: "autoload/vital/_gina/Git.vim"
function <SNR>251__get_reference(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 139
function <SNR>251_relpath(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 76
function <SNR>251__vital_loaded(V) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 1
function <SNR>251__get_reference_trad(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 147
function <SNR>251_abspath(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 68
function <SNR>251_ref(git, refname) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 102
function <SNR>251_new(path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 17
function <SNR>251__vital_depends() abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 8
function <SNR>251__get_packed_refs(git) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 124
function <SNR>251_resolve(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 87
function <SNR>251__get_reference_packed(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 168
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component/repo.vim
continuing in <SNR>135_config_gina_branch
Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 3: sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component/repo.vim"
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

not found in runtime path: "autoload/vital/_gina/Git.vim"
function <SNR>251__get_reference(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 139
function <SNR>251_relpath(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 76
function <SNR>251__vital_loaded(V) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 1
function <SNR>251__get_reference_trad(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 147
function <SNR>251_abspath(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 68
function <SNR>251_ref(git, refname) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 102
function <SNR>251_new(path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 17
function <SNR>251__vital_depends() abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 8
function <SNR>251__get_packed_refs(git) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 124
function <SNR>251_resolve(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 87
function <SNR>251__get_reference_packed(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 168
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component/repo.vim
continuing in <SNR>135_config_gina_branch
Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 3: sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component/repo.vim"
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

not found in runtime path: "autoload/vital/_gina/Git.vim"
function <SNR>251__get_reference(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 139
function <SNR>251_relpath(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 76
function <SNR>251__vital_loaded(V) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 1
function <SNR>251__get_reference_trad(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 147
function <SNR>251_abspath(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 68
function <SNR>251_ref(git, refname) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 102
function <SNR>251_new(path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 17
function <SNR>251__vital_depends() abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 8
function <SNR>251__get_packed_refs(git) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 124
function <SNR>251_resolve(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 87
function <SNR>251__get_reference_packed(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 168
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component/repo.vim
continuing in <SNR>135_config_gina_branch
Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()


Executing WinLeave Autocommands for "*"
autocommand call s:Autocmd('WinLeave', win_getid())

Executing WinLeave Autocommands for "*"
autocommand call s:Remove_Matches()

Executing WinEnter Autocommands for "*"
autocommand call s:dopopd()

Executing WinEnter Autocommands for "*"
autocommand call <sid>on_window_changed('WinEnter')

Executing WinEnter Autocommands for "*"
autocommand call coc#float#nvim_win_enter(win_getid())

autocommand call s:Autocmd('WinEnter', win_getid())

Executing WinEnter Autocommands for "*"
autocommand let g:fzf#vim#buffers[bufnr('')] = reltimefloat(reltime())

Executing WinEnter Autocommands for "*"
autocommand let s:tmux_is_last_pane = 0

Executing WinEnter Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing WinEnter Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing BufEnter Autocommands for "*"
autocommand set fo-=c fo-=r fo-=o

Executing BufEnter Autocommands for "*"
autocommand call s:Autocmd('BufEnter', +expand('<abuf>'))

Executing BufEnter Autocommands for "*"
autocommand if conflict_marker#detect#markers() | call s:on_detected() | endif

Executing BufEnter Autocommands for "*"
autocommand call s:mru_append(expand('<amatch>'))

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing User Autocommands for "AirlineModeChanged"
autocommand call airline#mode_changed()

Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/coc)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/coc/highlight.vim"
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/coc/highlight.vim
Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()


Executing WinLeave Autocommands for "*"
autocommand call s:Autocmd('WinLeave', win_getid())

Executing WinLeave Autocommands for "*"
autocommand call s:Remove_Matches()

Executing WinEnter Autocommands for "*"
autocommand call s:dopopd()

Executing WinEnter Autocommands for "*"
autocommand call <sid>on_window_changed('WinEnter')

Executing WinEnter Autocommands for "*"
autocommand call coc#float#nvim_win_enter(win_getid())

autocommand call s:Autocmd('WinEnter', win_getid())

Executing WinEnter Autocommands for "*"
autocommand let g:fzf#vim#buffers[bufnr('')] = reltimefloat(reltime())

Executing WinEnter Autocommands for "*"
autocommand let s:tmux_is_last_pane = 0

Executing WinEnter Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing WinEnter Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing BufEnter Autocommands for "*"
autocommand set fo-=c fo-=r fo-=o

Executing BufEnter Autocommands for "*"
autocommand call s:Autocmd('BufEnter', +expand('<abuf>'))

Executing BufEnter Autocommands for "*"
autocommand if conflict_marker#detect#markers() | call s:on_detected() | endif

Executing BufEnter Autocommands for "*"
autocommand call s:mru_append(expand('<amatch>'))

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing User Autocommands for "AirlineModeChanged"
autocommand call airline#mode_changed()

Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 3: sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component/repo.vim"
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

not found in runtime path: "autoload/vital/_gina/Git.vim"
function <SNR>251__get_reference(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 139
function <SNR>251_relpath(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 76
function <SNR>251__vital_loaded(V) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 1
function <SNR>251__get_reference_trad(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 147
function <SNR>251_abspath(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 68
function <SNR>251_ref(git, refname) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 102
function <SNR>251_new(path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 17
function <SNR>251__vital_depends() abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 8
function <SNR>251__get_packed_refs(git) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 124
function <SNR>251_resolve(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 87
function <SNR>251__get_reference_packed(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 168
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component/repo.vim
continuing in <SNR>135_config_gina_branch
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 3: sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component/repo.vim"
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

not found in runtime path: "autoload/vital/_gina/Git.vim"
function <SNR>251__get_reference(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 139
function <SNR>251_relpath(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 76
function <SNR>251__vital_loaded(V) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 1
function <SNR>251__get_reference_trad(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 147
function <SNR>251_abspath(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 68
function <SNR>251_ref(git, refname) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 102
function <SNR>251_new(path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 17
function <SNR>251__vital_depends() abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 8
function <SNR>251__get_packed_refs(git) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 124
function <SNR>251_resolve(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 87
function <SNR>251__get_reference_packed(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 168
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component/repo.vim
continuing in <SNR>135_config_gina_branch
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/coc)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/coc/highlight.vim"
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/coc/highlight.vim
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 3: sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component/repo.vim"
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

not found in runtime path: "autoload/vital/_gina/Git.vim"
function <SNR>251__get_reference(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 139
function <SNR>251_relpath(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 76
function <SNR>251__vital_loaded(V) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 1
function <SNR>251__get_reference_trad(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 147
function <SNR>251_abspath(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 68
function <SNR>251_ref(git, refname) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 102
function <SNR>251_new(path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 17
function <SNR>251__vital_depends() abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 8
function <SNR>251__get_packed_refs(git) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 124
function <SNR>251_resolve(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 87
function <SNR>251__get_reference_packed(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 168
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component/repo.vim
continuing in <SNR>135_config_gina_branch
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 3: sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component/repo.vim"
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

not found in runtime path: "autoload/vital/_gina/Git.vim"
function <SNR>251__get_reference(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 139
function <SNR>251_relpath(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 76
function <SNR>251__vital_loaded(V) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 1
function <SNR>251__get_reference_trad(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 147
function <SNR>251_abspath(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 68
function <SNR>251_ref(git, refname) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 102
function <SNR>251_new(path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 17
function <SNR>251__vital_depends() abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 8
function <SNR>251__get_packed_refs(git) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 124
function <SNR>251_resolve(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 87
function <SNR>251__get_reference_packed(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 168
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component/repo.vim
continuing in <SNR>135_config_gina_branch
Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()


Executing command: "'/bin/zsh' '-c' 'tmux -S /private/tmp/tmux-501/default select-pane -t '%77' -U'"


Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 3: sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component/repo.vim"
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

not found in runtime path: "autoload/vital/_gina/Git.vim"
function <SNR>251__get_reference(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 139
function <SNR>251_relpath(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 76
function <SNR>251__vital_loaded(V) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 1
function <SNR>251__get_reference_trad(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 147
function <SNR>251_abspath(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 68
function <SNR>251_ref(git, refname) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 102
function <SNR>251_new(path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 17
function <SNR>251__vital_depends() abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 8
function <SNR>251__get_packed_refs(git) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 124
function <SNR>251_resolve(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 87
function <SNR>251__get_reference_packed(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 168
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component/repo.vim
continuing in <SNR>135_config_gina_branch
Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()


Executing WinLeave Autocommands for "*"
autocommand call s:Autocmd('WinLeave', win_getid())

Executing WinLeave Autocommands for "*"
autocommand call s:Remove_Matches()

Executing WinEnter Autocommands for "*"
autocommand call s:dopopd()

Executing WinEnter Autocommands for "*"
autocommand call <sid>on_window_changed('WinEnter')

Executing WinEnter Autocommands for "*"
autocommand call coc#float#nvim_win_enter(win_getid())

autocommand call s:Autocmd('WinEnter', win_getid())

Executing WinEnter Autocommands for "*"
autocommand let g:fzf#vim#buffers[bufnr('')] = reltimefloat(reltime())

Executing WinEnter Autocommands for "*"
autocommand let s:tmux_is_last_pane = 0

Executing WinEnter Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing WinEnter Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing BufEnter Autocommands for "*"
autocommand set fo-=c fo-=r fo-=o

Executing BufEnter Autocommands for "*"
autocommand call s:Autocmd('BufEnter', +expand('<abuf>'))

Executing BufEnter Autocommands for "*"
autocommand if conflict_marker#detect#markers() | call s:on_detected() | endif

Executing BufEnter Autocommands for "*"
autocommand call s:mru_append(expand('<amatch>'))

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing User Autocommands for "AirlineModeChanged"
autocommand call airline#mode_changed()

Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/coc)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/coc/highlight.vim"
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/coc/highlight.vim
Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()


Executing WinLeave Autocommands for "*"
autocommand call s:Autocmd('WinLeave', win_getid())

Executing WinLeave Autocommands for "*"
autocommand call s:Remove_Matches()

Executing WinEnter Autocommands for "*"
autocommand call s:dopopd()

Executing WinEnter Autocommands for "*"
autocommand call <sid>on_window_changed('WinEnter')

Executing WinEnter Autocommands for "*"
autocommand call coc#float#nvim_win_enter(win_getid())

autocommand call s:Autocmd('WinEnter', win_getid())

Executing WinEnter Autocommands for "*"
autocommand let g:fzf#vim#buffers[bufnr('')] = reltimefloat(reltime())

Executing WinEnter Autocommands for "*"
autocommand let s:tmux_is_last_pane = 0

Executing WinEnter Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing WinEnter Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing BufEnter Autocommands for "*"
autocommand set fo-=c fo-=r fo-=o

Executing BufEnter Autocommands for "*"
autocommand call s:Autocmd('BufEnter', +expand('<abuf>'))

Executing BufEnter Autocommands for "*"
autocommand if conflict_marker#detect#markers() | call s:on_detected() | endif

Executing BufEnter Autocommands for "*"
autocommand call s:mru_append(expand('<amatch>'))

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing User Autocommands for "AirlineModeChanged"
autocommand call airline#mode_changed()

Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 3: sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component/repo.vim"
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

not found in runtime path: "autoload/vital/_gina/Git.vim"
function <SNR>251__get_reference(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 139
function <SNR>251_relpath(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 76
function <SNR>251__vital_loaded(V) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 1
function <SNR>251__get_reference_trad(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 147
function <SNR>251_abspath(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 68
function <SNR>251_ref(git, refname) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 102
function <SNR>251_new(path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 17
function <SNR>251__vital_depends() abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 8
function <SNR>251__get_packed_refs(git) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 124
function <SNR>251_resolve(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 87
function <SNR>251__get_reference_packed(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 168
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component/repo.vim
continuing in <SNR>135_config_gina_branch
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 3: sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component/repo.vim"
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

not found in runtime path: "autoload/vital/_gina/Git.vim"
function <SNR>251__get_reference(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 139
function <SNR>251_relpath(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 76
function <SNR>251__vital_loaded(V) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 1
function <SNR>251__get_reference_trad(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 147
function <SNR>251_abspath(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 68
function <SNR>251_ref(git, refname) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 102
function <SNR>251_new(path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 17
function <SNR>251__vital_depends() abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 8
function <SNR>251__get_packed_refs(git) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 124
function <SNR>251_resolve(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 87
function <SNR>251__get_reference_packed(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 168
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component/repo.vim
continuing in <SNR>135_config_gina_branch
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/coc)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/coc/highlight.vim"
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/coc/highlight.vim
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 3: sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component/repo.vim"
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

not found in runtime path: "autoload/vital/_gina/Git.vim"
function <SNR>251__get_reference(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 139
function <SNR>251_relpath(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 76
function <SNR>251__vital_loaded(V) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 1
function <SNR>251__get_reference_trad(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 147
function <SNR>251_abspath(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 68
function <SNR>251_ref(git, refname) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 102
function <SNR>251_new(path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 17
function <SNR>251__vital_depends() abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 8
function <SNR>251__get_packed_refs(git) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 124
function <SNR>251_resolve(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 87
function <SNR>251__get_reference_packed(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 168
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component/repo.vim
continuing in <SNR>135_config_gina_branch
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 3: sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component/repo.vim"
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

not found in runtime path: "autoload/vital/_gina/Git.vim"
function <SNR>251__get_reference(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 139
function <SNR>251_relpath(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 76
function <SNR>251__vital_loaded(V) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 1
function <SNR>251__get_reference_trad(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 147
function <SNR>251_abspath(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 68
function <SNR>251_ref(git, refname) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 102
function <SNR>251_new(path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 17
function <SNR>251__vital_depends() abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 8
function <SNR>251__get_packed_refs(git) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 124
function <SNR>251_resolve(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 87
function <SNR>251__get_reference_packed(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 168
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component/repo.vim
continuing in <SNR>135_config_gina_branch
Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()


Executing WinLeave Autocommands for "*"
autocommand call s:Autocmd('WinLeave', win_getid())

Executing WinLeave Autocommands for "*"
autocommand call s:Remove_Matches()

Executing WinEnter Autocommands for "*"
autocommand call s:dopopd()

Executing WinEnter Autocommands for "*"
autocommand call <sid>on_window_changed('WinEnter')

Executing WinEnter Autocommands for "*"
autocommand call coc#float#nvim_win_enter(win_getid())

autocommand call s:Autocmd('WinEnter', win_getid())

Executing WinEnter Autocommands for "*"
autocommand let g:fzf#vim#buffers[bufnr('')] = reltimefloat(reltime())

Executing WinEnter Autocommands for "*"
autocommand let s:tmux_is_last_pane = 0

Executing WinEnter Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing WinEnter Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing BufEnter Autocommands for "*"
autocommand set fo-=c fo-=r fo-=o

Executing BufEnter Autocommands for "*"
autocommand call s:Autocmd('BufEnter', +expand('<abuf>'))

Executing BufEnter Autocommands for "*"
autocommand if conflict_marker#detect#markers() | call s:on_detected() | endif

Executing BufEnter Autocommands for "*"
autocommand call s:mru_append(expand('<amatch>'))

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing User Autocommands for "AirlineModeChanged"
autocommand call airline#mode_changed()

Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/coc)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/coc/highlight.vim"
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/coc/highlight.vim
Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()


Executing WinLeave Autocommands for "*"
autocommand call s:Autocmd('WinLeave', win_getid())

Executing WinLeave Autocommands for "*"
autocommand call s:Remove_Matches()

Executing WinEnter Autocommands for "*"
autocommand call s:dopopd()

Executing WinEnter Autocommands for "*"
autocommand call <sid>on_window_changed('WinEnter')

Executing WinEnter Autocommands for "*"
autocommand call coc#float#nvim_win_enter(win_getid())

autocommand call s:Autocmd('WinEnter', win_getid())

Executing WinEnter Autocommands for "*"
autocommand let g:fzf#vim#buffers[bufnr('')] = reltimefloat(reltime())

Executing WinEnter Autocommands for "*"
autocommand let s:tmux_is_last_pane = 0

Executing WinEnter Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing WinEnter Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing BufEnter Autocommands for "*"
autocommand set fo-=c fo-=r fo-=o

Executing BufEnter Autocommands for "*"
autocommand call s:Autocmd('BufEnter', +expand('<abuf>'))

Executing BufEnter Autocommands for "*"
autocommand if conflict_marker#detect#markers() | call s:on_detected() | endif

Executing BufEnter Autocommands for "*"
autocommand call s:mru_append(expand('<amatch>'))

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing User Autocommands for "AirlineModeChanged"
autocommand call airline#mode_changed()

Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 3: sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component/repo.vim"
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

not found in runtime path: "autoload/vital/_gina/Git.vim"
function <SNR>251__get_reference(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 139
function <SNR>251_relpath(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 76
function <SNR>251__vital_loaded(V) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 1
function <SNR>251__get_reference_trad(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 147
function <SNR>251_abspath(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 68
function <SNR>251_ref(git, refname) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 102
function <SNR>251_new(path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 17
function <SNR>251__vital_depends() abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 8
function <SNR>251__get_packed_refs(git) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 124
function <SNR>251_resolve(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 87
function <SNR>251__get_reference_packed(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 168
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component/repo.vim
continuing in <SNR>135_config_gina_branch
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 3: sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component/repo.vim"
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

not found in runtime path: "autoload/vital/_gina/Git.vim"
function <SNR>251__get_reference(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 139
function <SNR>251_relpath(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 76
function <SNR>251__vital_loaded(V) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 1
function <SNR>251__get_reference_trad(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 147
function <SNR>251_abspath(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 68
function <SNR>251_ref(git, refname) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 102
function <SNR>251_new(path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 17
function <SNR>251__vital_depends() abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 8
function <SNR>251__get_packed_refs(git) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 124
function <SNR>251_resolve(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 87
function <SNR>251__get_reference_packed(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 168
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component/repo.vim
continuing in <SNR>135_config_gina_branch
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/coc)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/coc/highlight.vim"
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/coc/highlight.vim
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 3: sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component/repo.vim"
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

not found in runtime path: "autoload/vital/_gina/Git.vim"
function <SNR>251__get_reference(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 139
function <SNR>251_relpath(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 76
function <SNR>251__vital_loaded(V) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 1
function <SNR>251__get_reference_trad(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 147
function <SNR>251_abspath(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 68
function <SNR>251_ref(git, refname) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 102
function <SNR>251_new(path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 17
function <SNR>251__vital_depends() abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 8
function <SNR>251__get_packed_refs(git) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 124
function <SNR>251_resolve(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 87
function <SNR>251__get_reference_packed(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 168
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component/repo.vim
continuing in <SNR>135_config_gina_branch
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 3: sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component/repo.vim"
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

not found in runtime path: "autoload/vital/_gina/Git.vim"
function <SNR>251__get_reference(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 139
function <SNR>251_relpath(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 76
function <SNR>251__vital_loaded(V) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 1
function <SNR>251__get_reference_trad(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 147
function <SNR>251_abspath(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 68
function <SNR>251_ref(git, refname) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 102
function <SNR>251_new(path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 17
function <SNR>251__vital_depends() abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 8
function <SNR>251__get_packed_refs(git) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 124
function <SNR>251_resolve(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 87
function <SNR>251__get_reference_packed(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 168
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component/repo.vim
continuing in <SNR>135_config_gina_branch
Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()


Executing WinLeave Autocommands for "*"
autocommand call s:Autocmd('WinLeave', win_getid())

Executing WinLeave Autocommands for "*"
autocommand call s:Remove_Matches()

Executing WinEnter Autocommands for "*"
autocommand call s:dopopd()

Executing WinEnter Autocommands for "*"
autocommand call <sid>on_window_changed('WinEnter')

Executing WinEnter Autocommands for "*"
autocommand call coc#float#nvim_win_enter(win_getid())

autocommand call s:Autocmd('WinEnter', win_getid())

Executing WinEnter Autocommands for "*"
autocommand let g:fzf#vim#buffers[bufnr('')] = reltimefloat(reltime())

Executing WinEnter Autocommands for "*"
autocommand let s:tmux_is_last_pane = 0

Executing WinEnter Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing WinEnter Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing BufEnter Autocommands for "*"
autocommand set fo-=c fo-=r fo-=o

Executing BufEnter Autocommands for "*"
autocommand call s:Autocmd('BufEnter', +expand('<abuf>'))

Executing BufEnter Autocommands for "*"
autocommand if conflict_marker#detect#markers() | call s:on_detected() | endif

Executing BufEnter Autocommands for "*"
autocommand call s:mru_append(expand('<amatch>'))

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing User Autocommands for "AirlineModeChanged"
autocommand call airline#mode_changed()

Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/coc)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/coc/highlight.vim"
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/coc/highlight.vim
Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()


Executing WinLeave Autocommands for "*"
autocommand call s:Autocmd('WinLeave', win_getid())

Executing WinLeave Autocommands for "*"
autocommand call s:Remove_Matches()

Executing WinEnter Autocommands for "*"
autocommand call s:dopopd()

Executing WinEnter Autocommands for "*"
autocommand call <sid>on_window_changed('WinEnter')

Executing WinEnter Autocommands for "*"
autocommand call coc#float#nvim_win_enter(win_getid())

autocommand call s:Autocmd('WinEnter', win_getid())

Executing WinEnter Autocommands for "*"
autocommand let g:fzf#vim#buffers[bufnr('')] = reltimefloat(reltime())

Executing WinEnter Autocommands for "*"
autocommand let s:tmux_is_last_pane = 0

Executing WinEnter Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing WinEnter Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing BufEnter Autocommands for "*"
autocommand set fo-=c fo-=r fo-=o

Executing BufEnter Autocommands for "*"
autocommand call s:Autocmd('BufEnter', +expand('<abuf>'))

Executing BufEnter Autocommands for "*"
autocommand if conflict_marker#detect#markers() | call s:on_detected() | endif

Executing BufEnter Autocommands for "*"
autocommand call s:mru_append(expand('<amatch>'))

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing User Autocommands for "AirlineModeChanged"
autocommand call airline#mode_changed()

Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 3: sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component/repo.vim"
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

not found in runtime path: "autoload/vital/_gina/Git.vim"
function <SNR>251__get_reference(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 139
function <SNR>251_relpath(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 76
function <SNR>251__vital_loaded(V) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 1
function <SNR>251__get_reference_trad(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 147
function <SNR>251_abspath(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 68
function <SNR>251_ref(git, refname) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 102
function <SNR>251_new(path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 17
function <SNR>251__vital_depends() abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 8
function <SNR>251__get_packed_refs(git) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 124
function <SNR>251_resolve(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 87
function <SNR>251__get_reference_packed(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 168
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component/repo.vim
continuing in <SNR>135_config_gina_branch
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 3: sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component/repo.vim"
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

not found in runtime path: "autoload/vital/_gina/Git.vim"
function <SNR>251__get_reference(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 139
function <SNR>251_relpath(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 76
function <SNR>251__vital_loaded(V) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 1
function <SNR>251__get_reference_trad(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 147
function <SNR>251_abspath(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 68
function <SNR>251_ref(git, refname) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 102
function <SNR>251_new(path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 17
function <SNR>251__vital_depends() abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 8
function <SNR>251__get_packed_refs(git) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 124
function <SNR>251_resolve(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 87
function <SNR>251__get_reference_packed(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 168
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component/repo.vim
continuing in <SNR>135_config_gina_branch
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/coc)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/coc/highlight.vim"
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/coc/highlight.vim
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 3: sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component/repo.vim"
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

not found in runtime path: "autoload/vital/_gina/Git.vim"
function <SNR>251__get_reference(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 139
function <SNR>251_relpath(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 76
function <SNR>251__vital_loaded(V) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 1
function <SNR>251__get_reference_trad(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 147
function <SNR>251_abspath(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 68
function <SNR>251_ref(git, refname) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 102
function <SNR>251_new(path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 17
function <SNR>251__vital_depends() abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 8
function <SNR>251__get_packed_refs(git) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 124
function <SNR>251_resolve(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 87
function <SNR>251__get_reference_packed(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 168
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component/repo.vim
continuing in <SNR>135_config_gina_branch
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 3: sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component/repo.vim"
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

not found in runtime path: "autoload/vital/_gina/Git.vim"
function <SNR>251__get_reference(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 139
function <SNR>251_relpath(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 76
function <SNR>251__vital_loaded(V) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 1
function <SNR>251__get_reference_trad(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 147
function <SNR>251_abspath(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 68
function <SNR>251_ref(git, refname) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 102
function <SNR>251_new(path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 17
function <SNR>251__vital_depends() abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 8
function <SNR>251__get_packed_refs(git) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 124
function <SNR>251_resolve(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 87
function <SNR>251__get_reference_packed(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 168
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component/repo.vim
continuing in <SNR>135_config_gina_branch
Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()


Executing WinLeave Autocommands for "*"
autocommand call s:Autocmd('WinLeave', win_getid())

Executing WinLeave Autocommands for "*"
autocommand call s:Remove_Matches()

Executing WinEnter Autocommands for "*"
autocommand call s:dopopd()

Executing WinEnter Autocommands for "*"
autocommand call <sid>on_window_changed('WinEnter')

Executing WinEnter Autocommands for "*"
autocommand call coc#float#nvim_win_enter(win_getid())

autocommand call s:Autocmd('WinEnter', win_getid())

Executing WinEnter Autocommands for "*"
autocommand let g:fzf#vim#buffers[bufnr('')] = reltimefloat(reltime())

Executing WinEnter Autocommands for "*"
autocommand let s:tmux_is_last_pane = 0

Executing WinEnter Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing WinEnter Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing BufEnter Autocommands for "*"
autocommand set fo-=c fo-=r fo-=o

Executing BufEnter Autocommands for "*"
autocommand call s:Autocmd('BufEnter', +expand('<abuf>'))

Executing BufEnter Autocommands for "*"
autocommand if conflict_marker#detect#markers() | call s:on_detected() | endif

Executing BufEnter Autocommands for "*"
autocommand call s:mru_append(expand('<amatch>'))

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing User Autocommands for "AirlineModeChanged"
autocommand call airline#mode_changed()

Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/coc)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/coc/highlight.vim"
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/coc/highlight.vim
Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()


Executing WinLeave Autocommands for "*"
autocommand call s:Autocmd('WinLeave', win_getid())

Executing WinLeave Autocommands for "*"
autocommand call s:Remove_Matches()

Executing WinEnter Autocommands for "*"
autocommand call s:dopopd()

Executing WinEnter Autocommands for "*"
autocommand call <sid>on_window_changed('WinEnter')

Executing WinEnter Autocommands for "*"
autocommand call coc#float#nvim_win_enter(win_getid())

autocommand call s:Autocmd('WinEnter', win_getid())

Executing WinEnter Autocommands for "*"
autocommand let g:fzf#vim#buffers[bufnr('')] = reltimefloat(reltime())

Executing WinEnter Autocommands for "*"
autocommand let s:tmux_is_last_pane = 0

Executing WinEnter Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing WinEnter Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing BufEnter Autocommands for "*"
autocommand set fo-=c fo-=r fo-=o

Executing BufEnter Autocommands for "*"
autocommand call s:Autocmd('BufEnter', +expand('<abuf>'))

Executing BufEnter Autocommands for "*"
autocommand if conflict_marker#detect#markers() | call s:on_detected() | endif

Executing BufEnter Autocommands for "*"
autocommand call s:mru_append(expand('<amatch>'))

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing User Autocommands for "AirlineModeChanged"
autocommand call airline#mode_changed()

Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 3: sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component/repo.vim"
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

not found in runtime path: "autoload/vital/_gina/Git.vim"
function <SNR>251__get_reference(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 139
function <SNR>251_relpath(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 76
function <SNR>251__vital_loaded(V) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 1
function <SNR>251__get_reference_trad(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 147
function <SNR>251_abspath(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 68
function <SNR>251_ref(git, refname) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 102
function <SNR>251_new(path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 17
function <SNR>251__vital_depends() abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 8
function <SNR>251__get_packed_refs(git) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 124
function <SNR>251_resolve(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 87
function <SNR>251__get_reference_packed(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 168
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component/repo.vim
continuing in <SNR>135_config_gina_branch
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 3: sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component/repo.vim"
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

not found in runtime path: "autoload/vital/_gina/Git.vim"
function <SNR>251__get_reference(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 139
function <SNR>251_relpath(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 76
function <SNR>251__vital_loaded(V) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 1
function <SNR>251__get_reference_trad(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 147
function <SNR>251_abspath(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 68
function <SNR>251_ref(git, refname) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 102
function <SNR>251_new(path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 17
function <SNR>251__vital_depends() abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 8
function <SNR>251__get_packed_refs(git) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 124
function <SNR>251_resolve(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 87
function <SNR>251__get_reference_packed(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 168
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component/repo.vim
continuing in <SNR>135_config_gina_branch
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/coc)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/coc/highlight.vim"
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/coc/highlight.vim
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 3: sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component/repo.vim"
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

not found in runtime path: "autoload/vital/_gina/Git.vim"
function <SNR>251__get_reference(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 139
function <SNR>251_relpath(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 76
function <SNR>251__vital_loaded(V) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 1
function <SNR>251__get_reference_trad(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 147
function <SNR>251_abspath(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 68
function <SNR>251_ref(git, refname) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 102
function <SNR>251_new(path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 17
function <SNR>251__vital_depends() abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 8
function <SNR>251__get_packed_refs(git) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 124
function <SNR>251_resolve(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 87
function <SNR>251__get_reference_packed(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 168
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component/repo.vim
continuing in <SNR>135_config_gina_branch
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 3: sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component/repo.vim"
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

not found in runtime path: "autoload/vital/_gina/Git.vim"
function <SNR>251__get_reference(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 139
function <SNR>251_relpath(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 76
function <SNR>251__vital_loaded(V) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 1
function <SNR>251__get_reference_trad(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 147
function <SNR>251_abspath(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 68
function <SNR>251_ref(git, refname) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 102
function <SNR>251_new(path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 17
function <SNR>251__vital_depends() abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 8
function <SNR>251__get_packed_refs(git) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 124
function <SNR>251_resolve(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 87
function <SNR>251__get_reference_packed(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 168
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component/repo.vim
continuing in <SNR>135_config_gina_branch
Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()


Executing WinLeave Autocommands for "*"
autocommand call s:Autocmd('WinLeave', win_getid())

Executing WinLeave Autocommands for "*"
autocommand call s:Remove_Matches()

Executing WinEnter Autocommands for "*"
autocommand call s:dopopd()

Executing WinEnter Autocommands for "*"
autocommand call <sid>on_window_changed('WinEnter')

Executing WinEnter Autocommands for "*"
autocommand call coc#float#nvim_win_enter(win_getid())

autocommand call s:Autocmd('WinEnter', win_getid())

Executing WinEnter Autocommands for "*"
autocommand let g:fzf#vim#buffers[bufnr('')] = reltimefloat(reltime())

Executing WinEnter Autocommands for "*"
autocommand let s:tmux_is_last_pane = 0

Executing WinEnter Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing WinEnter Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing BufEnter Autocommands for "*"
autocommand set fo-=c fo-=r fo-=o

Executing BufEnter Autocommands for "*"
autocommand call s:Autocmd('BufEnter', +expand('<abuf>'))

Executing BufEnter Autocommands for "*"
autocommand if conflict_marker#detect#markers() | call s:on_detected() | endif

Executing BufEnter Autocommands for "*"
autocommand call s:mru_append(expand('<amatch>'))

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing User Autocommands for "AirlineModeChanged"
autocommand call airline#mode_changed()

Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/coc)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/coc/highlight.vim"
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/coc/highlight.vim
Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()


Executing WinLeave Autocommands for "*"
autocommand call s:Autocmd('WinLeave', win_getid())

Executing WinLeave Autocommands for "*"
autocommand call s:Remove_Matches()

Executing WinEnter Autocommands for "*"
autocommand call s:dopopd()

Executing WinEnter Autocommands for "*"
autocommand call <sid>on_window_changed('WinEnter')

Executing WinEnter Autocommands for "*"
autocommand call coc#float#nvim_win_enter(win_getid())

autocommand call s:Autocmd('WinEnter', win_getid())

Executing WinEnter Autocommands for "*"
autocommand let g:fzf#vim#buffers[bufnr('')] = reltimefloat(reltime())

Executing WinEnter Autocommands for "*"
autocommand let s:tmux_is_last_pane = 0

Executing WinEnter Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing WinEnter Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing BufEnter Autocommands for "*"
autocommand set fo-=c fo-=r fo-=o

Executing BufEnter Autocommands for "*"
autocommand call s:Autocmd('BufEnter', +expand('<abuf>'))

Executing BufEnter Autocommands for "*"
autocommand if conflict_marker#detect#markers() | call s:on_detected() | endif

Executing BufEnter Autocommands for "*"
autocommand call s:mru_append(expand('<amatch>'))

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing User Autocommands for "AirlineModeChanged"
autocommand call airline#mode_changed()

Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 3: sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component/repo.vim"
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

not found in runtime path: "autoload/vital/_gina/Git.vim"
function <SNR>251__get_reference(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 139
function <SNR>251_relpath(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 76
function <SNR>251__vital_loaded(V) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 1
function <SNR>251__get_reference_trad(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 147
function <SNR>251_abspath(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 68
function <SNR>251_ref(git, refname) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 102
function <SNR>251_new(path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 17
function <SNR>251__vital_depends() abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 8
function <SNR>251__get_packed_refs(git) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 124
function <SNR>251_resolve(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 87
function <SNR>251__get_reference_packed(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 168
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component/repo.vim
continuing in <SNR>135_config_gina_branch
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 3: sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component/repo.vim"
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

not found in runtime path: "autoload/vital/_gina/Git.vim"
function <SNR>251__get_reference(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 139
function <SNR>251_relpath(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 76
function <SNR>251__vital_loaded(V) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 1
function <SNR>251__get_reference_trad(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 147
function <SNR>251_abspath(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 68
function <SNR>251_ref(git, refname) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 102
function <SNR>251_new(path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 17
function <SNR>251__vital_depends() abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 8
function <SNR>251__get_packed_refs(git) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 124
function <SNR>251_resolve(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 87
function <SNR>251__get_reference_packed(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 168
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component/repo.vim
continuing in <SNR>135_config_gina_branch
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/coc)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/coc/highlight.vim"
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/coc/highlight.vim
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 3: sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component/repo.vim"
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

not found in runtime path: "autoload/vital/_gina/Git.vim"
function <SNR>251__get_reference(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 139
function <SNR>251_relpath(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 76
function <SNR>251__vital_loaded(V) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 1
function <SNR>251__get_reference_trad(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 147
function <SNR>251_abspath(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 68
function <SNR>251_ref(git, refname) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 102
function <SNR>251_new(path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 17
function <SNR>251__vital_depends() abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 8
function <SNR>251__get_packed_refs(git) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 124
function <SNR>251_resolve(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 87
function <SNR>251__get_reference_packed(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 168
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component/repo.vim
continuing in <SNR>135_config_gina_branch
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 3: sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component/repo.vim"
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

not found in runtime path: "autoload/vital/_gina/Git.vim"
function <SNR>251__get_reference(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 139
function <SNR>251_relpath(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 76
function <SNR>251__vital_loaded(V) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 1
function <SNR>251__get_reference_trad(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 147
function <SNR>251_abspath(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 68
function <SNR>251_ref(git, refname) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 102
function <SNR>251_new(path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 17
function <SNR>251__vital_depends() abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 8
function <SNR>251__get_packed_refs(git) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 124
function <SNR>251_resolve(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 87
function <SNR>251__get_reference_packed(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 168
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component/repo.vim
continuing in <SNR>135_config_gina_branch
Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()


Executing WinLeave Autocommands for "*"
autocommand call s:Autocmd('WinLeave', win_getid())

Executing WinLeave Autocommands for "*"
autocommand call s:Remove_Matches()

Executing WinEnter Autocommands for "*"
autocommand call s:dopopd()

Executing WinEnter Autocommands for "*"
autocommand call <sid>on_window_changed('WinEnter')

Executing WinEnter Autocommands for "*"
autocommand call coc#float#nvim_win_enter(win_getid())

autocommand call s:Autocmd('WinEnter', win_getid())

Executing WinEnter Autocommands for "*"
autocommand let g:fzf#vim#buffers[bufnr('')] = reltimefloat(reltime())

Executing WinEnter Autocommands for "*"
autocommand let s:tmux_is_last_pane = 0

Executing WinEnter Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing WinEnter Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing BufEnter Autocommands for "*"
autocommand set fo-=c fo-=r fo-=o

Executing BufEnter Autocommands for "*"
autocommand call s:Autocmd('BufEnter', +expand('<abuf>'))

Executing BufEnter Autocommands for "*"
autocommand if conflict_marker#detect#markers() | call s:on_detected() | endif

Executing BufEnter Autocommands for "*"
autocommand call s:mru_append(expand('<amatch>'))

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing User Autocommands for "AirlineModeChanged"
autocommand call airline#mode_changed()

Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/coc)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/coc/highlight.vim"
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/coc/highlight.vim
Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()


Executing WinLeave Autocommands for "*"
autocommand call s:Autocmd('WinLeave', win_getid())

Executing WinLeave Autocommands for "*"
autocommand call s:Remove_Matches()

Executing WinEnter Autocommands for "*"
autocommand call s:dopopd()

Executing WinEnter Autocommands for "*"
autocommand call <sid>on_window_changed('WinEnter')

Executing WinEnter Autocommands for "*"
autocommand call coc#float#nvim_win_enter(win_getid())

autocommand call s:Autocmd('WinEnter', win_getid())

Executing WinEnter Autocommands for "*"
autocommand let g:fzf#vim#buffers[bufnr('')] = reltimefloat(reltime())

Executing WinEnter Autocommands for "*"
autocommand let s:tmux_is_last_pane = 0

Executing WinEnter Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing WinEnter Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing BufEnter Autocommands for "*"
autocommand set fo-=c fo-=r fo-=o

Executing BufEnter Autocommands for "*"
autocommand call s:Autocmd('BufEnter', +expand('<abuf>'))

Executing BufEnter Autocommands for "*"
autocommand if conflict_marker#detect#markers() | call s:on_detected() | endif

Executing BufEnter Autocommands for "*"
autocommand call s:mru_append(expand('<amatch>'))

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing User Autocommands for "AirlineModeChanged"
autocommand call airline#mode_changed()

Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 3: sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component/repo.vim"
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

not found in runtime path: "autoload/vital/_gina/Git.vim"
function <SNR>251__get_reference(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 139
function <SNR>251_relpath(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 76
function <SNR>251__vital_loaded(V) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 1
function <SNR>251__get_reference_trad(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 147
function <SNR>251_abspath(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 68
function <SNR>251_ref(git, refname) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 102
function <SNR>251_new(path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 17
function <SNR>251__vital_depends() abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 8
function <SNR>251__get_packed_refs(git) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 124
function <SNR>251_resolve(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 87
function <SNR>251__get_reference_packed(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 168
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component/repo.vim
continuing in <SNR>135_config_gina_branch
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 3: sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component/repo.vim"
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

not found in runtime path: "autoload/vital/_gina/Git.vim"
function <SNR>251__get_reference(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 139
function <SNR>251_relpath(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 76
function <SNR>251__vital_loaded(V) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 1
function <SNR>251__get_reference_trad(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 147
function <SNR>251_abspath(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 68
function <SNR>251_ref(git, refname) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 102
function <SNR>251_new(path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 17
function <SNR>251__vital_depends() abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 8
function <SNR>251__get_packed_refs(git) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 124
function <SNR>251_resolve(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 87
function <SNR>251__get_reference_packed(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 168
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component/repo.vim
continuing in <SNR>135_config_gina_branch
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/coc)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/coc/highlight.vim"
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/coc/highlight.vim
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 3: sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component/repo.vim"
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

not found in runtime path: "autoload/vital/_gina/Git.vim"
function <SNR>251__get_reference(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 139
function <SNR>251_relpath(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 76
function <SNR>251__vital_loaded(V) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 1
function <SNR>251__get_reference_trad(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 147
function <SNR>251_abspath(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 68
function <SNR>251_ref(git, refname) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 102
function <SNR>251_new(path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 17
function <SNR>251__vital_depends() abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 8
function <SNR>251__get_packed_refs(git) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 124
function <SNR>251_resolve(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 87
function <SNR>251__get_reference_packed(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 168
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component/repo.vim
continuing in <SNR>135_config_gina_branch
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 3: sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component/repo.vim"
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

not found in runtime path: "autoload/vital/_gina/Git.vim"
function <SNR>251__get_reference(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 139
function <SNR>251_relpath(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 76
function <SNR>251__vital_loaded(V) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 1
function <SNR>251__get_reference_trad(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 147
function <SNR>251_abspath(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 68
function <SNR>251_ref(git, refname) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 102
function <SNR>251_new(path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 17
function <SNR>251__vital_depends() abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 8
function <SNR>251__get_packed_refs(git) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 124
function <SNR>251_resolve(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 87
function <SNR>251__get_reference_packed(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 168
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component/repo.vim
continuing in <SNR>135_config_gina_branch
Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()


Executing WinLeave Autocommands for "*"
autocommand call s:Autocmd('WinLeave', win_getid())

Executing WinLeave Autocommands for "*"
autocommand call s:Remove_Matches()

Executing WinEnter Autocommands for "*"
autocommand call s:dopopd()

Executing WinEnter Autocommands for "*"
autocommand call <sid>on_window_changed('WinEnter')

Executing WinEnter Autocommands for "*"
autocommand call coc#float#nvim_win_enter(win_getid())

autocommand call s:Autocmd('WinEnter', win_getid())

Executing WinEnter Autocommands for "*"
autocommand let g:fzf#vim#buffers[bufnr('')] = reltimefloat(reltime())

Executing WinEnter Autocommands for "*"
autocommand let s:tmux_is_last_pane = 0

Executing WinEnter Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing WinEnter Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing BufEnter Autocommands for "*"
autocommand set fo-=c fo-=r fo-=o

Executing BufEnter Autocommands for "*"
autocommand call s:Autocmd('BufEnter', +expand('<abuf>'))

Executing BufEnter Autocommands for "*"
autocommand if conflict_marker#detect#markers() | call s:on_detected() | endif

Executing BufEnter Autocommands for "*"
autocommand call s:mru_append(expand('<amatch>'))

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing User Autocommands for "AirlineModeChanged"
autocommand call airline#mode_changed()

Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/coc)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/coc/highlight.vim"
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/coc/highlight.vim
Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()


Executing WinLeave Autocommands for "*"
autocommand call s:Autocmd('WinLeave', win_getid())

Executing WinLeave Autocommands for "*"
autocommand call s:Remove_Matches()

Executing WinEnter Autocommands for "*"
autocommand call s:dopopd()

Executing WinEnter Autocommands for "*"
autocommand call <sid>on_window_changed('WinEnter')

Executing WinEnter Autocommands for "*"
autocommand call coc#float#nvim_win_enter(win_getid())

autocommand call s:Autocmd('WinEnter', win_getid())

Executing WinEnter Autocommands for "*"
autocommand let g:fzf#vim#buffers[bufnr('')] = reltimefloat(reltime())

Executing WinEnter Autocommands for "*"
autocommand let s:tmux_is_last_pane = 0

Executing WinEnter Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing WinEnter Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing BufEnter Autocommands for "*"
autocommand set fo-=c fo-=r fo-=o

Executing BufEnter Autocommands for "*"
autocommand call s:Autocmd('BufEnter', +expand('<abuf>'))

Executing BufEnter Autocommands for "*"
autocommand if conflict_marker#detect#markers() | call s:on_detected() | endif

Executing BufEnter Autocommands for "*"
autocommand call s:mru_append(expand('<amatch>'))

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing User Autocommands for "AirlineModeChanged"
autocommand call airline#mode_changed()

Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 3: sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component/repo.vim"
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

not found in runtime path: "autoload/vital/_gina/Git.vim"
function <SNR>251__get_reference(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 139
function <SNR>251_relpath(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 76
function <SNR>251__vital_loaded(V) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 1
function <SNR>251__get_reference_trad(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 147
function <SNR>251_abspath(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 68
function <SNR>251_ref(git, refname) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 102
function <SNR>251_new(path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 17
function <SNR>251__vital_depends() abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 8
function <SNR>251__get_packed_refs(git) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 124
function <SNR>251_resolve(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 87
function <SNR>251__get_reference_packed(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 168
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component/repo.vim
continuing in <SNR>135_config_gina_branch
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 3: sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component/repo.vim"
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

not found in runtime path: "autoload/vital/_gina/Git.vim"
function <SNR>251__get_reference(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 139
function <SNR>251_relpath(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 76
function <SNR>251__vital_loaded(V) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 1
function <SNR>251__get_reference_trad(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 147
function <SNR>251_abspath(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 68
function <SNR>251_ref(git, refname) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 102
function <SNR>251_new(path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 17
function <SNR>251__vital_depends() abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 8
function <SNR>251__get_packed_refs(git) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 124
function <SNR>251_resolve(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 87
function <SNR>251__get_reference_packed(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 168
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component/repo.vim
continuing in <SNR>135_config_gina_branch
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/coc)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/coc/highlight.vim"
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/coc/highlight.vim
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 3: sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component/repo.vim"
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

not found in runtime path: "autoload/vital/_gina/Git.vim"
function <SNR>251__get_reference(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 139
function <SNR>251_relpath(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 76
function <SNR>251__vital_loaded(V) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 1
function <SNR>251__get_reference_trad(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 147
function <SNR>251_abspath(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 68
function <SNR>251_ref(git, refname) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 102
function <SNR>251_new(path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 17
function <SNR>251__vital_depends() abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 8
function <SNR>251__get_packed_refs(git) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 124
function <SNR>251_resolve(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 87
function <SNR>251__get_reference_packed(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 168
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component/repo.vim
continuing in <SNR>135_config_gina_branch
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 3: sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component/repo.vim"
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

not found in runtime path: "autoload/vital/_gina/Git.vim"
function <SNR>251__get_reference(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 139
function <SNR>251_relpath(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 76
function <SNR>251__vital_loaded(V) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 1
function <SNR>251__get_reference_trad(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 147
function <SNR>251_abspath(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 68
function <SNR>251_ref(git, refname) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 102
function <SNR>251_new(path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 17
function <SNR>251__vital_depends() abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 8
function <SNR>251__get_packed_refs(git) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 124
function <SNR>251_resolve(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 87
function <SNR>251__get_reference_packed(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 168
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component/repo.vim
continuing in <SNR>135_config_gina_branch
Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()


Executing WinLeave Autocommands for "*"
autocommand call s:Autocmd('WinLeave', win_getid())

Executing WinLeave Autocommands for "*"
autocommand call s:Remove_Matches()

Executing WinEnter Autocommands for "*"
autocommand call s:dopopd()

Executing WinEnter Autocommands for "*"
autocommand call <sid>on_window_changed('WinEnter')

Executing WinEnter Autocommands for "*"
autocommand call coc#float#nvim_win_enter(win_getid())

autocommand call s:Autocmd('WinEnter', win_getid())

Executing WinEnter Autocommands for "*"
autocommand let g:fzf#vim#buffers[bufnr('')] = reltimefloat(reltime())

Executing WinEnter Autocommands for "*"
autocommand let s:tmux_is_last_pane = 0

Executing WinEnter Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing WinEnter Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing BufEnter Autocommands for "*"
autocommand set fo-=c fo-=r fo-=o

Executing BufEnter Autocommands for "*"
autocommand call s:Autocmd('BufEnter', +expand('<abuf>'))

Executing BufEnter Autocommands for "*"
autocommand if conflict_marker#detect#markers() | call s:on_detected() | endif

Executing BufEnter Autocommands for "*"
autocommand call s:mru_append(expand('<amatch>'))

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing User Autocommands for "AirlineModeChanged"
autocommand call airline#mode_changed()

Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/coc)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/coc/highlight.vim"
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/coc/highlight.vim
Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()


Executing WinLeave Autocommands for "*"
autocommand call s:Autocmd('WinLeave', win_getid())

Executing WinLeave Autocommands for "*"
autocommand call s:Remove_Matches()

Executing WinEnter Autocommands for "*"
autocommand call s:dopopd()

Executing WinEnter Autocommands for "*"
autocommand call <sid>on_window_changed('WinEnter')

Executing WinEnter Autocommands for "*"
autocommand call coc#float#nvim_win_enter(win_getid())

autocommand call s:Autocmd('WinEnter', win_getid())

Executing WinEnter Autocommands for "*"
autocommand let g:fzf#vim#buffers[bufnr('')] = reltimefloat(reltime())

Executing WinEnter Autocommands for "*"
autocommand let s:tmux_is_last_pane = 0

Executing WinEnter Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing WinEnter Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing BufEnter Autocommands for "*"
autocommand set fo-=c fo-=r fo-=o

Executing BufEnter Autocommands for "*"
autocommand call s:Autocmd('BufEnter', +expand('<abuf>'))

Executing BufEnter Autocommands for "*"
autocommand if conflict_marker#detect#markers() | call s:on_detected() | endif

Executing BufEnter Autocommands for "*"
autocommand call s:mru_append(expand('<amatch>'))

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing User Autocommands for "AirlineModeChanged"
autocommand call airline#mode_changed()

Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 3: sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component/repo.vim"
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

not found in runtime path: "autoload/vital/_gina/Git.vim"
function <SNR>251__get_reference(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 139
function <SNR>251_relpath(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 76
function <SNR>251__vital_loaded(V) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 1
function <SNR>251__get_reference_trad(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 147
function <SNR>251_abspath(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 68
function <SNR>251_ref(git, refname) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 102
function <SNR>251_new(path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 17
function <SNR>251__vital_depends() abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 8
function <SNR>251__get_packed_refs(git) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 124
function <SNR>251_resolve(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 87
function <SNR>251__get_reference_packed(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 168
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component/repo.vim
continuing in <SNR>135_config_gina_branch
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 3: sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component/repo.vim"
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

not found in runtime path: "autoload/vital/_gina/Git.vim"
function <SNR>251__get_reference(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 139
function <SNR>251_relpath(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 76
function <SNR>251__vital_loaded(V) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 1
function <SNR>251__get_reference_trad(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 147
function <SNR>251_abspath(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 68
function <SNR>251_ref(git, refname) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 102
function <SNR>251_new(path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 17
function <SNR>251__vital_depends() abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 8
function <SNR>251__get_packed_refs(git) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 124
function <SNR>251_resolve(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 87
function <SNR>251__get_reference_packed(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 168
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component/repo.vim
continuing in <SNR>135_config_gina_branch
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/coc)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/coc/highlight.vim"
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/coc/highlight.vim
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 3: sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component/repo.vim"
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

not found in runtime path: "autoload/vital/_gina/Git.vim"
function <SNR>251__get_reference(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 139
function <SNR>251_relpath(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 76
function <SNR>251__vital_loaded(V) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 1
function <SNR>251__get_reference_trad(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 147
function <SNR>251_abspath(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 68
function <SNR>251_ref(git, refname) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 102
function <SNR>251_new(path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 17
function <SNR>251__vital_depends() abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 8
function <SNR>251__get_packed_refs(git) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 124
function <SNR>251_resolve(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 87
function <SNR>251__get_reference_packed(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 168
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component/repo.vim
continuing in <SNR>135_config_gina_branch
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 3: sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component/repo.vim"
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

not found in runtime path: "autoload/vital/_gina/Git.vim"
function <SNR>251__get_reference(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 139
function <SNR>251_relpath(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 76
function <SNR>251__vital_loaded(V) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 1
function <SNR>251__get_reference_trad(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 147
function <SNR>251_abspath(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 68
function <SNR>251_ref(git, refname) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 102
function <SNR>251_new(path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 17
function <SNR>251__vital_depends() abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 8
function <SNR>251__get_packed_refs(git) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 124
function <SNR>251_resolve(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 87
function <SNR>251__get_reference_packed(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 168
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component/repo.vim
continuing in <SNR>135_config_gina_branch
Executing CursorHold Autocommands for "*"
autocommand silent call CocActionAsync('highlight')

autocommand silent call CocActionAsync('highlight')

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 3: sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component/repo.vim"
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

not found in runtime path: "autoload/vital/_gina/Git.vim"
function <SNR>251__get_reference(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 139
function <SNR>251_relpath(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 76
function <SNR>251__vital_loaded(V) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 1
function <SNR>251__get_reference_trad(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 147
function <SNR>251_abspath(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 68
function <SNR>251_ref(git, refname) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 102
function <SNR>251_new(path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 17
function <SNR>251__vital_depends() abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 8
function <SNR>251__get_packed_refs(git) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 124
function <SNR>251_resolve(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 87
function <SNR>251__get_reference_packed(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 168
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component/repo.vim
continuing in <SNR>135_config_gina_branch
Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()


Executing command: "'/bin/zsh' '-c' 'tmux -S /private/tmp/tmux-501/default select-pane -t '%77' -U'"


Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 3: sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component/repo.vim"
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

not found in runtime path: "autoload/vital/_gina/Git.vim"
function <SNR>251__get_reference(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 139
function <SNR>251_relpath(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 76
function <SNR>251__vital_loaded(V) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 1
function <SNR>251__get_reference_trad(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 147
function <SNR>251_abspath(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 68
function <SNR>251_ref(git, refname) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 102
function <SNR>251_new(path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 17
function <SNR>251__vital_depends() abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 8
function <SNR>251__get_packed_refs(git) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 124
function <SNR>251_resolve(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 87
function <SNR>251__get_reference_packed(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 168
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component/repo.vim
continuing in <SNR>135_config_gina_branch
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 3: sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component/repo.vim"
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

not found in runtime path: "autoload/vital/_gina/Git.vim"
function <SNR>251__get_reference(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 139
function <SNR>251_relpath(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 76
function <SNR>251__vital_loaded(V) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 1
function <SNR>251__get_reference_trad(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 147
function <SNR>251_abspath(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 68
function <SNR>251_ref(git, refname) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 102
function <SNR>251_new(path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 17
function <SNR>251__vital_depends() abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 8
function <SNR>251__get_packed_refs(git) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 124
function <SNR>251_resolve(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 87
function <SNR>251__get_reference_packed(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 168
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component/repo.vim
continuing in <SNR>135_config_gina_branch
Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()


Executing WinLeave Autocommands for "*"
autocommand call s:Autocmd('WinLeave', win_getid())

Executing WinLeave Autocommands for "*"
autocommand call s:Remove_Matches()

Executing WinEnter Autocommands for "*"
autocommand call s:dopopd()

Executing WinEnter Autocommands for "*"
autocommand call <sid>on_window_changed('WinEnter')

Executing WinEnter Autocommands for "*"
autocommand call coc#float#nvim_win_enter(win_getid())

autocommand call s:Autocmd('WinEnter', win_getid())

Executing WinEnter Autocommands for "*"
autocommand let g:fzf#vim#buffers[bufnr('')] = reltimefloat(reltime())

Executing WinEnter Autocommands for "*"
autocommand let s:tmux_is_last_pane = 0

Executing WinEnter Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing WinEnter Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing BufEnter Autocommands for "*"
autocommand set fo-=c fo-=r fo-=o

Executing BufEnter Autocommands for "*"
autocommand call s:Autocmd('BufEnter', +expand('<abuf>'))

Executing BufEnter Autocommands for "*"
autocommand if conflict_marker#detect#markers() | call s:on_detected() | endif

Executing BufEnter Autocommands for "*"
autocommand call s:mru_append(expand('<amatch>'))

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing User Autocommands for "AirlineModeChanged"
autocommand call airline#mode_changed()

Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/coc)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/coc/highlight.vim"
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/coc/highlight.vim
Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()


Executing WinLeave Autocommands for "*"
autocommand call s:Autocmd('WinLeave', win_getid())

Executing WinLeave Autocommands for "*"
autocommand call s:Remove_Matches()

Executing WinEnter Autocommands for "*"
autocommand call s:dopopd()

Executing WinEnter Autocommands for "*"
autocommand call <sid>on_window_changed('WinEnter')

Executing WinEnter Autocommands for "*"
autocommand call coc#float#nvim_win_enter(win_getid())

autocommand call s:Autocmd('WinEnter', win_getid())

Executing WinEnter Autocommands for "*"
autocommand let g:fzf#vim#buffers[bufnr('')] = reltimefloat(reltime())

Executing WinEnter Autocommands for "*"
autocommand let s:tmux_is_last_pane = 0

Executing WinEnter Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing WinEnter Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing BufEnter Autocommands for "*"
autocommand set fo-=c fo-=r fo-=o

Executing BufEnter Autocommands for "*"
autocommand call s:Autocmd('BufEnter', +expand('<abuf>'))

Executing BufEnter Autocommands for "*"
autocommand if conflict_marker#detect#markers() | call s:on_detected() | endif

Executing BufEnter Autocommands for "*"
autocommand call s:mru_append(expand('<amatch>'))

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing User Autocommands for "AirlineModeChanged"
autocommand call airline#mode_changed()

Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 3: sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component/repo.vim"
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

not found in runtime path: "autoload/vital/_gina/Git.vim"
function <SNR>251__get_reference(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 139
function <SNR>251_relpath(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 76
function <SNR>251__vital_loaded(V) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 1
function <SNR>251__get_reference_trad(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 147
function <SNR>251_abspath(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 68
function <SNR>251_ref(git, refname) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 102
function <SNR>251_new(path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 17
function <SNR>251__vital_depends() abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 8
function <SNR>251__get_packed_refs(git) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 124
function <SNR>251_resolve(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 87
function <SNR>251__get_reference_packed(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 168
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component/repo.vim
continuing in <SNR>135_config_gina_branch
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 3: sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component/repo.vim"
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

not found in runtime path: "autoload/vital/_gina/Git.vim"
function <SNR>251__get_reference(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 139
function <SNR>251_relpath(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 76
function <SNR>251__vital_loaded(V) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 1
function <SNR>251__get_reference_trad(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 147
function <SNR>251_abspath(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 68
function <SNR>251_ref(git, refname) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 102
function <SNR>251_new(path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 17
function <SNR>251__vital_depends() abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 8
function <SNR>251__get_packed_refs(git) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 124
function <SNR>251_resolve(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 87
function <SNR>251__get_reference_packed(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 168
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component/repo.vim
continuing in <SNR>135_config_gina_branch
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/coc)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/coc/highlight.vim"
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/coc/highlight.vim
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 3: sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component/repo.vim"
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

not found in runtime path: "autoload/vital/_gina/Git.vim"
function <SNR>251__get_reference(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 139
function <SNR>251_relpath(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 76
function <SNR>251__vital_loaded(V) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 1
function <SNR>251__get_reference_trad(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 147
function <SNR>251_abspath(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 68
function <SNR>251_ref(git, refname) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 102
function <SNR>251_new(path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 17
function <SNR>251__vital_depends() abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 8
function <SNR>251__get_packed_refs(git) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 124
function <SNR>251_resolve(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 87
function <SNR>251__get_reference_packed(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 168
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component/repo.vim
continuing in <SNR>135_config_gina_branch
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 3: sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component/repo.vim"
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

not found in runtime path: "autoload/vital/_gina/Git.vim"
function <SNR>251__get_reference(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 139
function <SNR>251_relpath(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 76
function <SNR>251__vital_loaded(V) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 1
function <SNR>251__get_reference_trad(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 147
function <SNR>251_abspath(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 68
function <SNR>251_ref(git, refname) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 102
function <SNR>251_new(path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 17
function <SNR>251__vital_depends() abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 8
function <SNR>251__get_packed_refs(git) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 124
function <SNR>251_resolve(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 87
function <SNR>251__get_reference_packed(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 168
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component/repo.vim
continuing in <SNR>135_config_gina_branch
Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()


Executing WinLeave Autocommands for "*"
autocommand call s:Autocmd('WinLeave', win_getid())

Executing WinLeave Autocommands for "*"
autocommand call s:Remove_Matches()

Executing WinEnter Autocommands for "*"
autocommand call s:dopopd()

Executing WinEnter Autocommands for "*"
autocommand call <sid>on_window_changed('WinEnter')

Executing WinEnter Autocommands for "*"
autocommand call coc#float#nvim_win_enter(win_getid())

autocommand call s:Autocmd('WinEnter', win_getid())

Executing WinEnter Autocommands for "*"
autocommand let g:fzf#vim#buffers[bufnr('')] = reltimefloat(reltime())

Executing WinEnter Autocommands for "*"
autocommand let s:tmux_is_last_pane = 0

Executing WinEnter Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing WinEnter Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing BufEnter Autocommands for "*"
autocommand set fo-=c fo-=r fo-=o

Executing BufEnter Autocommands for "*"
autocommand call s:Autocmd('BufEnter', +expand('<abuf>'))

Executing BufEnter Autocommands for "*"
autocommand if conflict_marker#detect#markers() | call s:on_detected() | endif

Executing BufEnter Autocommands for "*"
autocommand call s:mru_append(expand('<amatch>'))

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing User Autocommands for "AirlineModeChanged"
autocommand call airline#mode_changed()

Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/coc)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/coc/highlight.vim"
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/coc/highlight.vim
Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()


Executing WinLeave Autocommands for "*"
autocommand call s:Autocmd('WinLeave', win_getid())

Executing WinLeave Autocommands for "*"
autocommand call s:Remove_Matches()

Executing WinEnter Autocommands for "*"
autocommand call s:dopopd()

Executing WinEnter Autocommands for "*"
autocommand call <sid>on_window_changed('WinEnter')

Executing WinEnter Autocommands for "*"
autocommand call coc#float#nvim_win_enter(win_getid())

autocommand call s:Autocmd('WinEnter', win_getid())

Executing WinEnter Autocommands for "*"
autocommand let g:fzf#vim#buffers[bufnr('')] = reltimefloat(reltime())

Executing WinEnter Autocommands for "*"
autocommand let s:tmux_is_last_pane = 0

Executing WinEnter Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing WinEnter Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing BufEnter Autocommands for "*"
autocommand set fo-=c fo-=r fo-=o

Executing BufEnter Autocommands for "*"
autocommand call s:Autocmd('BufEnter', +expand('<abuf>'))

Executing BufEnter Autocommands for "*"
autocommand if conflict_marker#detect#markers() | call s:on_detected() | endif

Executing BufEnter Autocommands for "*"
autocommand call s:mru_append(expand('<amatch>'))

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing User Autocommands for "AirlineModeChanged"
autocommand call airline#mode_changed()

Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 3: sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component/repo.vim"
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

not found in runtime path: "autoload/vital/_gina/Git.vim"
function <SNR>251__get_reference(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 139
function <SNR>251_relpath(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 76
function <SNR>251__vital_loaded(V) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 1
function <SNR>251__get_reference_trad(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 147
function <SNR>251_abspath(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 68
function <SNR>251_ref(git, refname) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 102
function <SNR>251_new(path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 17
function <SNR>251__vital_depends() abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 8
function <SNR>251__get_packed_refs(git) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 124
function <SNR>251_resolve(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 87
function <SNR>251__get_reference_packed(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 168
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component/repo.vim
continuing in <SNR>135_config_gina_branch
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 3: sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component/repo.vim"
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

not found in runtime path: "autoload/vital/_gina/Git.vim"
function <SNR>251__get_reference(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 139
function <SNR>251_relpath(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 76
function <SNR>251__vital_loaded(V) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 1
function <SNR>251__get_reference_trad(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 147
function <SNR>251_abspath(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 68
function <SNR>251_ref(git, refname) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 102
function <SNR>251_new(path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 17
function <SNR>251__vital_depends() abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 8
function <SNR>251__get_packed_refs(git) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 124
function <SNR>251_resolve(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 87
function <SNR>251__get_reference_packed(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 168
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component/repo.vim
continuing in <SNR>135_config_gina_branch
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/coc)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/coc/highlight.vim"
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/coc/highlight.vim
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 3: sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component/repo.vim"
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

not found in runtime path: "autoload/vital/_gina/Git.vim"
function <SNR>251__get_reference(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 139
function <SNR>251_relpath(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 76
function <SNR>251__vital_loaded(V) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 1
function <SNR>251__get_reference_trad(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 147
function <SNR>251_abspath(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 68
function <SNR>251_ref(git, refname) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 102
function <SNR>251_new(path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 17
function <SNR>251__vital_depends() abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 8
function <SNR>251__get_packed_refs(git) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 124
function <SNR>251_resolve(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 87
function <SNR>251__get_reference_packed(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 168
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component/repo.vim
continuing in <SNR>135_config_gina_branch
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 3: sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component/repo.vim"
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

not found in runtime path: "autoload/vital/_gina/Git.vim"
function <SNR>251__get_reference(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 139
function <SNR>251_relpath(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 76
function <SNR>251__vital_loaded(V) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 1
function <SNR>251__get_reference_trad(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 147
function <SNR>251_abspath(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 68
function <SNR>251_ref(git, refname) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 102
function <SNR>251_new(path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 17
function <SNR>251__vital_depends() abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 8
function <SNR>251__get_packed_refs(git) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 124
function <SNR>251_resolve(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 87
function <SNR>251__get_reference_packed(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 168
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component/repo.vim
continuing in <SNR>135_config_gina_branch
Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()


Executing WinLeave Autocommands for "*"
autocommand call s:Autocmd('WinLeave', win_getid())

Executing WinLeave Autocommands for "*"
autocommand call s:Remove_Matches()

Executing WinEnter Autocommands for "*"
autocommand call s:dopopd()

Executing WinEnter Autocommands for "*"
autocommand call <sid>on_window_changed('WinEnter')

Executing WinEnter Autocommands for "*"
autocommand call coc#float#nvim_win_enter(win_getid())

autocommand call s:Autocmd('WinEnter', win_getid())

Executing WinEnter Autocommands for "*"
autocommand let g:fzf#vim#buffers[bufnr('')] = reltimefloat(reltime())

Executing WinEnter Autocommands for "*"
autocommand let s:tmux_is_last_pane = 0

Executing WinEnter Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing WinEnter Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing BufEnter Autocommands for "*"
autocommand set fo-=c fo-=r fo-=o

Executing BufEnter Autocommands for "*"
autocommand call s:Autocmd('BufEnter', +expand('<abuf>'))

Executing BufEnter Autocommands for "*"
autocommand if conflict_marker#detect#markers() | call s:on_detected() | endif

Executing BufEnter Autocommands for "*"
autocommand call s:mru_append(expand('<amatch>'))

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing User Autocommands for "AirlineModeChanged"
autocommand call airline#mode_changed()

Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/coc)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/coc/highlight.vim"
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/coc/highlight.vim
Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()


Executing WinLeave Autocommands for "*"
autocommand call s:Autocmd('WinLeave', win_getid())

Executing WinLeave Autocommands for "*"
autocommand call s:Remove_Matches()

Executing WinEnter Autocommands for "*"
autocommand call s:dopopd()

Executing WinEnter Autocommands for "*"
autocommand call <sid>on_window_changed('WinEnter')

Executing WinEnter Autocommands for "*"
autocommand call coc#float#nvim_win_enter(win_getid())

autocommand call s:Autocmd('WinEnter', win_getid())

Executing WinEnter Autocommands for "*"
autocommand let g:fzf#vim#buffers[bufnr('')] = reltimefloat(reltime())

Executing WinEnter Autocommands for "*"
autocommand let s:tmux_is_last_pane = 0

Executing WinEnter Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing WinEnter Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing BufEnter Autocommands for "*"
autocommand set fo-=c fo-=r fo-=o

Executing BufEnter Autocommands for "*"
autocommand call s:Autocmd('BufEnter', +expand('<abuf>'))

Executing BufEnter Autocommands for "*"
autocommand if conflict_marker#detect#markers() | call s:on_detected() | endif

Executing BufEnter Autocommands for "*"
autocommand call s:mru_append(expand('<amatch>'))

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing User Autocommands for "AirlineModeChanged"
autocommand call airline#mode_changed()

Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 3: sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component/repo.vim"
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

not found in runtime path: "autoload/vital/_gina/Git.vim"
function <SNR>251__get_reference(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 139
function <SNR>251_relpath(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 76
function <SNR>251__vital_loaded(V) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 1
function <SNR>251__get_reference_trad(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 147
function <SNR>251_abspath(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 68
function <SNR>251_ref(git, refname) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 102
function <SNR>251_new(path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 17
function <SNR>251__vital_depends() abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 8
function <SNR>251__get_packed_refs(git) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 124
function <SNR>251_resolve(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 87
function <SNR>251__get_reference_packed(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 168
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component/repo.vim
continuing in <SNR>135_config_gina_branch
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 3: sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component/repo.vim"
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

not found in runtime path: "autoload/vital/_gina/Git.vim"
function <SNR>251__get_reference(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 139
function <SNR>251_relpath(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 76
function <SNR>251__vital_loaded(V) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 1
function <SNR>251__get_reference_trad(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 147
function <SNR>251_abspath(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 68
function <SNR>251_ref(git, refname) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 102
function <SNR>251_new(path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 17
function <SNR>251__vital_depends() abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 8
function <SNR>251__get_packed_refs(git) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 124
function <SNR>251_resolve(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 87
function <SNR>251__get_reference_packed(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 168
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component/repo.vim
continuing in <SNR>135_config_gina_branch
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/coc)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/coc/highlight.vim"
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/coc/highlight.vim
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 3: sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component/repo.vim"
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

not found in runtime path: "autoload/vital/_gina/Git.vim"
function <SNR>251__get_reference(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 139
function <SNR>251_relpath(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 76
function <SNR>251__vital_loaded(V) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 1
function <SNR>251__get_reference_trad(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 147
function <SNR>251_abspath(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 68
function <SNR>251_ref(git, refname) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 102
function <SNR>251_new(path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 17
function <SNR>251__vital_depends() abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 8
function <SNR>251__get_packed_refs(git) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 124
function <SNR>251_resolve(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 87
function <SNR>251__get_reference_packed(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 168
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component/repo.vim
continuing in <SNR>135_config_gina_branch
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 3: sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component/repo.vim"
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

not found in runtime path: "autoload/vital/_gina/Git.vim"
function <SNR>251__get_reference(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 139
function <SNR>251_relpath(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 76
function <SNR>251__vital_loaded(V) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 1
function <SNR>251__get_reference_trad(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 147
function <SNR>251_abspath(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 68
function <SNR>251_ref(git, refname) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 102
function <SNR>251_new(path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 17
function <SNR>251__vital_depends() abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 8
function <SNR>251__get_packed_refs(git) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 124
function <SNR>251_resolve(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 87
function <SNR>251__get_reference_packed(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 168
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component/repo.vim
continuing in <SNR>135_config_gina_branch
Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()


Executing WinLeave Autocommands for "*"
autocommand call s:Autocmd('WinLeave', win_getid())

Executing WinLeave Autocommands for "*"
autocommand call s:Remove_Matches()

Executing WinEnter Autocommands for "*"
autocommand call s:dopopd()

Executing WinEnter Autocommands for "*"
autocommand call <sid>on_window_changed('WinEnter')

Executing WinEnter Autocommands for "*"
autocommand call coc#float#nvim_win_enter(win_getid())

autocommand call s:Autocmd('WinEnter', win_getid())

Executing WinEnter Autocommands for "*"
autocommand let g:fzf#vim#buffers[bufnr('')] = reltimefloat(reltime())

Executing WinEnter Autocommands for "*"
autocommand let s:tmux_is_last_pane = 0

Executing WinEnter Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing WinEnter Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing BufEnter Autocommands for "*"
autocommand set fo-=c fo-=r fo-=o

Executing BufEnter Autocommands for "*"
autocommand call s:Autocmd('BufEnter', +expand('<abuf>'))

Executing BufEnter Autocommands for "*"
autocommand if conflict_marker#detect#markers() | call s:on_detected() | endif

Executing BufEnter Autocommands for "*"
autocommand call s:mru_append(expand('<amatch>'))

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing User Autocommands for "AirlineModeChanged"
autocommand call airline#mode_changed()

Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/coc)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/coc/highlight.vim"
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/coc/highlight.vim
Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()


Executing WinLeave Autocommands for "*"
autocommand call s:Autocmd('WinLeave', win_getid())

Executing WinLeave Autocommands for "*"
autocommand call s:Remove_Matches()

Executing WinEnter Autocommands for "*"
autocommand call s:dopopd()

Executing WinEnter Autocommands for "*"
autocommand call <sid>on_window_changed('WinEnter')

Executing WinEnter Autocommands for "*"
autocommand call coc#float#nvim_win_enter(win_getid())

autocommand call s:Autocmd('WinEnter', win_getid())

Executing WinEnter Autocommands for "*"
autocommand let g:fzf#vim#buffers[bufnr('')] = reltimefloat(reltime())

Executing WinEnter Autocommands for "*"
autocommand let s:tmux_is_last_pane = 0

Executing WinEnter Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing WinEnter Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing BufEnter Autocommands for "*"
autocommand set fo-=c fo-=r fo-=o

Executing BufEnter Autocommands for "*"
autocommand call s:Autocmd('BufEnter', +expand('<abuf>'))

Executing BufEnter Autocommands for "*"
autocommand if conflict_marker#detect#markers() | call s:on_detected() | endif

Executing BufEnter Autocommands for "*"
autocommand call s:mru_append(expand('<amatch>'))

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing User Autocommands for "AirlineModeChanged"
autocommand call airline#mode_changed()

Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 3: sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component/repo.vim"
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

not found in runtime path: "autoload/vital/_gina/Git.vim"
function <SNR>251__get_reference(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 139
function <SNR>251_relpath(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 76
function <SNR>251__vital_loaded(V) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 1
function <SNR>251__get_reference_trad(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 147
function <SNR>251_abspath(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 68
function <SNR>251_ref(git, refname) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 102
function <SNR>251_new(path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 17
function <SNR>251__vital_depends() abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 8
function <SNR>251__get_packed_refs(git) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 124
function <SNR>251_resolve(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 87
function <SNR>251__get_reference_packed(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 168
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component/repo.vim
continuing in <SNR>135_config_gina_branch
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 3: sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component/repo.vim"
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

not found in runtime path: "autoload/vital/_gina/Git.vim"
function <SNR>251__get_reference(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 139
function <SNR>251_relpath(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 76
function <SNR>251__vital_loaded(V) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 1
function <SNR>251__get_reference_trad(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 147
function <SNR>251_abspath(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 68
function <SNR>251_ref(git, refname) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 102
function <SNR>251_new(path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 17
function <SNR>251__vital_depends() abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 8
function <SNR>251__get_packed_refs(git) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 124
function <SNR>251_resolve(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 87
function <SNR>251__get_reference_packed(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 168
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component/repo.vim
continuing in <SNR>135_config_gina_branch
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/coc)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/coc/highlight.vim"
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/coc/highlight.vim
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 3: sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component/repo.vim"
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

not found in runtime path: "autoload/vital/_gina/Git.vim"
function <SNR>251__get_reference(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 139
function <SNR>251_relpath(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 76
function <SNR>251__vital_loaded(V) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 1
function <SNR>251__get_reference_trad(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 147
function <SNR>251_abspath(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 68
function <SNR>251_ref(git, refname) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 102
function <SNR>251_new(path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 17
function <SNR>251__vital_depends() abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 8
function <SNR>251__get_packed_refs(git) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 124
function <SNR>251_resolve(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 87
function <SNR>251__get_reference_packed(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 168
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component/repo.vim
continuing in <SNR>135_config_gina_branch
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 3: sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component/repo.vim"
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

not found in runtime path: "autoload/vital/_gina/Git.vim"
function <SNR>251__get_reference(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 139
function <SNR>251_relpath(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 76
function <SNR>251__vital_loaded(V) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 1
function <SNR>251__get_reference_trad(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 147
function <SNR>251_abspath(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 68
function <SNR>251_ref(git, refname) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 102
function <SNR>251_new(path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 17
function <SNR>251__vital_depends() abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 8
function <SNR>251__get_packed_refs(git) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 124
function <SNR>251_resolve(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 87
function <SNR>251__get_reference_packed(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 168
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component/repo.vim
continuing in <SNR>135_config_gina_branch
Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()


Executing WinLeave Autocommands for "*"
autocommand call s:Autocmd('WinLeave', win_getid())

Executing WinLeave Autocommands for "*"
autocommand call s:Remove_Matches()

Executing WinEnter Autocommands for "*"
autocommand call s:dopopd()

Executing WinEnter Autocommands for "*"
autocommand call <sid>on_window_changed('WinEnter')

Executing WinEnter Autocommands for "*"
autocommand call coc#float#nvim_win_enter(win_getid())

autocommand call s:Autocmd('WinEnter', win_getid())

Executing WinEnter Autocommands for "*"
autocommand let g:fzf#vim#buffers[bufnr('')] = reltimefloat(reltime())

Executing WinEnter Autocommands for "*"
autocommand let s:tmux_is_last_pane = 0

Executing WinEnter Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing WinEnter Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing BufEnter Autocommands for "*"
autocommand set fo-=c fo-=r fo-=o

Executing BufEnter Autocommands for "*"
autocommand call s:Autocmd('BufEnter', +expand('<abuf>'))

Executing BufEnter Autocommands for "*"
autocommand if conflict_marker#detect#markers() | call s:on_detected() | endif

Executing BufEnter Autocommands for "*"
autocommand call s:mru_append(expand('<amatch>'))

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing User Autocommands for "AirlineModeChanged"
autocommand call airline#mode_changed()

Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/coc)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/coc/highlight.vim"
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/coc/highlight.vim
Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()


Executing WinLeave Autocommands for "*"
autocommand call s:Autocmd('WinLeave', win_getid())

Executing WinLeave Autocommands for "*"
autocommand call s:Remove_Matches()

Executing WinEnter Autocommands for "*"
autocommand call s:dopopd()

Executing WinEnter Autocommands for "*"
autocommand call <sid>on_window_changed('WinEnter')

Executing WinEnter Autocommands for "*"
autocommand call coc#float#nvim_win_enter(win_getid())

autocommand call s:Autocmd('WinEnter', win_getid())

Executing WinEnter Autocommands for "*"
autocommand let g:fzf#vim#buffers[bufnr('')] = reltimefloat(reltime())

Executing WinEnter Autocommands for "*"
autocommand let s:tmux_is_last_pane = 0

Executing WinEnter Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing WinEnter Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing BufEnter Autocommands for "*"
autocommand set fo-=c fo-=r fo-=o

Executing BufEnter Autocommands for "*"
autocommand call s:Autocmd('BufEnter', +expand('<abuf>'))

Executing BufEnter Autocommands for "*"
autocommand if conflict_marker#detect#markers() | call s:on_detected() | endif

Executing BufEnter Autocommands for "*"
autocommand call s:mru_append(expand('<amatch>'))

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing User Autocommands for "AirlineModeChanged"
autocommand call airline#mode_changed()

Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 3: sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component/repo.vim"
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

not found in runtime path: "autoload/vital/_gina/Git.vim"
function <SNR>251__get_reference(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 139
function <SNR>251_relpath(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 76
function <SNR>251__vital_loaded(V) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 1
function <SNR>251__get_reference_trad(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 147
function <SNR>251_abspath(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 68
function <SNR>251_ref(git, refname) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 102
function <SNR>251_new(path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 17
function <SNR>251__vital_depends() abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 8
function <SNR>251__get_packed_refs(git) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 124
function <SNR>251_resolve(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 87
function <SNR>251__get_reference_packed(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 168
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component/repo.vim
continuing in <SNR>135_config_gina_branch
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 3: sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component/repo.vim"
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

not found in runtime path: "autoload/vital/_gina/Git.vim"
function <SNR>251__get_reference(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 139
function <SNR>251_relpath(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 76
function <SNR>251__vital_loaded(V) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 1
function <SNR>251__get_reference_trad(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 147
function <SNR>251_abspath(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 68
function <SNR>251_ref(git, refname) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 102
function <SNR>251_new(path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 17
function <SNR>251__vital_depends() abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 8
function <SNR>251__get_packed_refs(git) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 124
function <SNR>251_resolve(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 87
function <SNR>251__get_reference_packed(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 168
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component/repo.vim
continuing in <SNR>135_config_gina_branch
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/coc)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/coc/highlight.vim"
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/coc/highlight.vim
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 3: sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component/repo.vim"
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

not found in runtime path: "autoload/vital/_gina/Git.vim"
function <SNR>251__get_reference(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 139
function <SNR>251_relpath(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 76
function <SNR>251__vital_loaded(V) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 1
function <SNR>251__get_reference_trad(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 147
function <SNR>251_abspath(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 68
function <SNR>251_ref(git, refname) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 102
function <SNR>251_new(path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 17
function <SNR>251__vital_depends() abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 8
function <SNR>251__get_packed_refs(git) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 124
function <SNR>251_resolve(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 87
function <SNR>251__get_reference_packed(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 168
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component/repo.vim
continuing in <SNR>135_config_gina_branch
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 3: sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component/repo.vim"
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

not found in runtime path: "autoload/vital/_gina/Git.vim"
function <SNR>251__get_reference(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 139
function <SNR>251_relpath(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 76
function <SNR>251__vital_loaded(V) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 1
function <SNR>251__get_reference_trad(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 147
function <SNR>251_abspath(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 68
function <SNR>251_ref(git, refname) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 102
function <SNR>251_new(path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 17
function <SNR>251__vital_depends() abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 8
function <SNR>251__get_packed_refs(git) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 124
function <SNR>251_resolve(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 87
function <SNR>251__get_reference_packed(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 168
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component/repo.vim
continuing in <SNR>135_config_gina_branch
Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()


Executing WinLeave Autocommands for "*"
autocommand call s:Autocmd('WinLeave', win_getid())

Executing WinLeave Autocommands for "*"
autocommand call s:Remove_Matches()

Executing WinEnter Autocommands for "*"
autocommand call s:dopopd()

Executing WinEnter Autocommands for "*"
autocommand call <sid>on_window_changed('WinEnter')

Executing WinEnter Autocommands for "*"
autocommand call coc#float#nvim_win_enter(win_getid())

autocommand call s:Autocmd('WinEnter', win_getid())

Executing WinEnter Autocommands for "*"
autocommand let g:fzf#vim#buffers[bufnr('')] = reltimefloat(reltime())

Executing WinEnter Autocommands for "*"
autocommand let s:tmux_is_last_pane = 0

Executing WinEnter Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing WinEnter Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing BufEnter Autocommands for "*"
autocommand set fo-=c fo-=r fo-=o

Executing BufEnter Autocommands for "*"
autocommand call s:Autocmd('BufEnter', +expand('<abuf>'))

Executing BufEnter Autocommands for "*"
autocommand if conflict_marker#detect#markers() | call s:on_detected() | endif

Executing BufEnter Autocommands for "*"
autocommand call s:mru_append(expand('<amatch>'))

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing User Autocommands for "AirlineModeChanged"
autocommand call airline#mode_changed()

Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/coc)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/coc/highlight.vim"
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/coc/highlight.vim
Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()


Executing WinLeave Autocommands for "*"
autocommand call s:Autocmd('WinLeave', win_getid())

Executing WinLeave Autocommands for "*"
autocommand call s:Remove_Matches()

Executing WinEnter Autocommands for "*"
autocommand call s:dopopd()

Executing WinEnter Autocommands for "*"
autocommand call <sid>on_window_changed('WinEnter')

Executing WinEnter Autocommands for "*"
autocommand call coc#float#nvim_win_enter(win_getid())

autocommand call s:Autocmd('WinEnter', win_getid())

Executing WinEnter Autocommands for "*"
autocommand let g:fzf#vim#buffers[bufnr('')] = reltimefloat(reltime())

Executing WinEnter Autocommands for "*"
autocommand let s:tmux_is_last_pane = 0

Executing WinEnter Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing WinEnter Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing BufEnter Autocommands for "*"
autocommand set fo-=c fo-=r fo-=o

Executing BufEnter Autocommands for "*"
autocommand call s:Autocmd('BufEnter', +expand('<abuf>'))

Executing BufEnter Autocommands for "*"
autocommand if conflict_marker#detect#markers() | call s:on_detected() | endif

Executing BufEnter Autocommands for "*"
autocommand call s:mru_append(expand('<amatch>'))

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing User Autocommands for "AirlineModeChanged"
autocommand call airline#mode_changed()

Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 3: sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component/repo.vim"
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

not found in runtime path: "autoload/vital/_gina/Git.vim"
function <SNR>251__get_reference(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 139
function <SNR>251_relpath(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 76
function <SNR>251__vital_loaded(V) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 1
function <SNR>251__get_reference_trad(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 147
function <SNR>251_abspath(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 68
function <SNR>251_ref(git, refname) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 102
function <SNR>251_new(path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 17
function <SNR>251__vital_depends() abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 8
function <SNR>251__get_packed_refs(git) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 124
function <SNR>251_resolve(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 87
function <SNR>251__get_reference_packed(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 168
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component/repo.vim
continuing in <SNR>135_config_gina_branch
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 3: sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component/repo.vim"
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

not found in runtime path: "autoload/vital/_gina/Git.vim"
function <SNR>251__get_reference(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 139
function <SNR>251_relpath(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 76
function <SNR>251__vital_loaded(V) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 1
function <SNR>251__get_reference_trad(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 147
function <SNR>251_abspath(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 68
function <SNR>251_ref(git, refname) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 102
function <SNR>251_new(path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 17
function <SNR>251__vital_depends() abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 8
function <SNR>251__get_packed_refs(git) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 124
function <SNR>251_resolve(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 87
function <SNR>251__get_reference_packed(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 168
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component/repo.vim
continuing in <SNR>135_config_gina_branch
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/coc)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/coc/highlight.vim"
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/coc/highlight.vim
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 3: sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component/repo.vim"
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

not found in runtime path: "autoload/vital/_gina/Git.vim"
function <SNR>251__get_reference(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 139
function <SNR>251_relpath(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 76
function <SNR>251__vital_loaded(V) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 1
function <SNR>251__get_reference_trad(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 147
function <SNR>251_abspath(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 68
function <SNR>251_ref(git, refname) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 102
function <SNR>251_new(path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 17
function <SNR>251__vital_depends() abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 8
function <SNR>251__get_packed_refs(git) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 124
function <SNR>251_resolve(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 87
function <SNR>251__get_reference_packed(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 168
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component/repo.vim
continuing in <SNR>135_config_gina_branch
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 3: sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component/repo.vim"
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

not found in runtime path: "autoload/vital/_gina/Git.vim"
function <SNR>251__get_reference(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 139
function <SNR>251_relpath(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 76
function <SNR>251__vital_loaded(V) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 1
function <SNR>251__get_reference_trad(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 147
function <SNR>251_abspath(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 68
function <SNR>251_ref(git, refname) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 102
function <SNR>251_new(path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 17
function <SNR>251__vital_depends() abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 8
function <SNR>251__get_packed_refs(git) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 124
function <SNR>251_resolve(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 87
function <SNR>251__get_reference_packed(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 168
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component/repo.vim
continuing in <SNR>135_config_gina_branch
Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()


Executing WinLeave Autocommands for "*"
autocommand call s:Autocmd('WinLeave', win_getid())

Executing WinLeave Autocommands for "*"
autocommand call s:Remove_Matches()

Executing WinEnter Autocommands for "*"
autocommand call s:dopopd()

Executing WinEnter Autocommands for "*"
autocommand call <sid>on_window_changed('WinEnter')

Executing WinEnter Autocommands for "*"
autocommand call coc#float#nvim_win_enter(win_getid())

autocommand call s:Autocmd('WinEnter', win_getid())

Executing WinEnter Autocommands for "*"
autocommand let g:fzf#vim#buffers[bufnr('')] = reltimefloat(reltime())

Executing WinEnter Autocommands for "*"
autocommand let s:tmux_is_last_pane = 0

Executing WinEnter Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing WinEnter Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing BufEnter Autocommands for "*"
autocommand set fo-=c fo-=r fo-=o

Executing BufEnter Autocommands for "*"
autocommand call s:Autocmd('BufEnter', +expand('<abuf>'))

Executing BufEnter Autocommands for "*"
autocommand if conflict_marker#detect#markers() | call s:on_detected() | endif

Executing BufEnter Autocommands for "*"
autocommand call s:mru_append(expand('<amatch>'))

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing User Autocommands for "AirlineModeChanged"
autocommand call airline#mode_changed()

Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/coc)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/coc/highlight.vim"
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/coc/highlight.vim
Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()


Executing WinLeave Autocommands for "*"
autocommand call s:Autocmd('WinLeave', win_getid())

Executing WinLeave Autocommands for "*"
autocommand call s:Remove_Matches()

Executing WinEnter Autocommands for "*"
autocommand call s:dopopd()

Executing WinEnter Autocommands for "*"
autocommand call <sid>on_window_changed('WinEnter')

Executing WinEnter Autocommands for "*"
autocommand call coc#float#nvim_win_enter(win_getid())

autocommand call s:Autocmd('WinEnter', win_getid())

Executing WinEnter Autocommands for "*"
autocommand let g:fzf#vim#buffers[bufnr('')] = reltimefloat(reltime())

Executing WinEnter Autocommands for "*"
autocommand let s:tmux_is_last_pane = 0

Executing WinEnter Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing WinEnter Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing BufEnter Autocommands for "*"
autocommand set fo-=c fo-=r fo-=o

Executing BufEnter Autocommands for "*"
autocommand call s:Autocmd('BufEnter', +expand('<abuf>'))

Executing BufEnter Autocommands for "*"
autocommand if conflict_marker#detect#markers() | call s:on_detected() | endif

Executing BufEnter Autocommands for "*"
autocommand call s:mru_append(expand('<amatch>'))

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing User Autocommands for "AirlineModeChanged"
autocommand call airline#mode_changed()

Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 3: sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component/repo.vim"
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

not found in runtime path: "autoload/vital/_gina/Git.vim"
function <SNR>251__get_reference(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 139
function <SNR>251_relpath(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 76
function <SNR>251__vital_loaded(V) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 1
function <SNR>251__get_reference_trad(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 147
function <SNR>251_abspath(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 68
function <SNR>251_ref(git, refname) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 102
function <SNR>251_new(path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 17
function <SNR>251__vital_depends() abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 8
function <SNR>251__get_packed_refs(git) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 124
function <SNR>251_resolve(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 87
function <SNR>251__get_reference_packed(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 168
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component/repo.vim
continuing in <SNR>135_config_gina_branch
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 3: sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component/repo.vim"
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

not found in runtime path: "autoload/vital/_gina/Git.vim"
function <SNR>251__get_reference(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 139
function <SNR>251_relpath(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 76
function <SNR>251__vital_loaded(V) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 1
function <SNR>251__get_reference_trad(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 147
function <SNR>251_abspath(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 68
function <SNR>251_ref(git, refname) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 102
function <SNR>251_new(path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 17
function <SNR>251__vital_depends() abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 8
function <SNR>251__get_packed_refs(git) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 124
function <SNR>251_resolve(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 87
function <SNR>251__get_reference_packed(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 168
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component/repo.vim
continuing in <SNR>135_config_gina_branch
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/coc)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/coc/highlight.vim"
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/coc/highlight.vim
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 3: sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component/repo.vim"
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

not found in runtime path: "autoload/vital/_gina/Git.vim"
function <SNR>251__get_reference(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 139
function <SNR>251_relpath(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 76
function <SNR>251__vital_loaded(V) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 1
function <SNR>251__get_reference_trad(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 147
function <SNR>251_abspath(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 68
function <SNR>251_ref(git, refname) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 102
function <SNR>251_new(path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 17
function <SNR>251__vital_depends() abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 8
function <SNR>251__get_packed_refs(git) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 124
function <SNR>251_resolve(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 87
function <SNR>251__get_reference_packed(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 168
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component/repo.vim
continuing in <SNR>135_config_gina_branch
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 3: sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component/repo.vim"
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

not found in runtime path: "autoload/vital/_gina/Git.vim"
function <SNR>251__get_reference(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 139
function <SNR>251_relpath(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 76
function <SNR>251__vital_loaded(V) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 1
function <SNR>251__get_reference_trad(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 147
function <SNR>251_abspath(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 68
function <SNR>251_ref(git, refname) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 102
function <SNR>251_new(path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 17
function <SNR>251__vital_depends() abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 8
function <SNR>251__get_packed_refs(git) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 124
function <SNR>251_resolve(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 87
function <SNR>251__get_reference_packed(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 168
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component/repo.vim
continuing in <SNR>135_config_gina_branch
Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()


Executing WinLeave Autocommands for "*"
autocommand call s:Autocmd('WinLeave', win_getid())

Executing WinLeave Autocommands for "*"
autocommand call s:Remove_Matches()

Executing WinEnter Autocommands for "*"
autocommand call s:dopopd()

Executing WinEnter Autocommands for "*"
autocommand call <sid>on_window_changed('WinEnter')

Executing WinEnter Autocommands for "*"
autocommand call coc#float#nvim_win_enter(win_getid())

autocommand call s:Autocmd('WinEnter', win_getid())

Executing WinEnter Autocommands for "*"
autocommand let g:fzf#vim#buffers[bufnr('')] = reltimefloat(reltime())

Executing WinEnter Autocommands for "*"
autocommand let s:tmux_is_last_pane = 0

Executing WinEnter Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing WinEnter Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing BufEnter Autocommands for "*"
autocommand set fo-=c fo-=r fo-=o

Executing BufEnter Autocommands for "*"
autocommand call s:Autocmd('BufEnter', +expand('<abuf>'))

Executing BufEnter Autocommands for "*"
autocommand if conflict_marker#detect#markers() | call s:on_detected() | endif

Executing BufEnter Autocommands for "*"
autocommand call s:mru_append(expand('<amatch>'))

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing User Autocommands for "AirlineModeChanged"
autocommand call airline#mode_changed()

Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/coc)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/coc/highlight.vim"
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/coc/highlight.vim
Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()


Executing WinLeave Autocommands for "*"
autocommand call s:Autocmd('WinLeave', win_getid())

Executing WinLeave Autocommands for "*"
autocommand call s:Remove_Matches()

Executing WinEnter Autocommands for "*"
autocommand call s:dopopd()

Executing WinEnter Autocommands for "*"
autocommand call <sid>on_window_changed('WinEnter')

Executing WinEnter Autocommands for "*"
autocommand call coc#float#nvim_win_enter(win_getid())

autocommand call s:Autocmd('WinEnter', win_getid())

Executing WinEnter Autocommands for "*"
autocommand let g:fzf#vim#buffers[bufnr('')] = reltimefloat(reltime())

Executing WinEnter Autocommands for "*"
autocommand let s:tmux_is_last_pane = 0

Executing WinEnter Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing WinEnter Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing BufEnter Autocommands for "*"
autocommand set fo-=c fo-=r fo-=o

Executing BufEnter Autocommands for "*"
autocommand call s:Autocmd('BufEnter', +expand('<abuf>'))

Executing BufEnter Autocommands for "*"
autocommand if conflict_marker#detect#markers() | call s:on_detected() | endif

Executing BufEnter Autocommands for "*"
autocommand call s:mru_append(expand('<amatch>'))

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing User Autocommands for "AirlineModeChanged"
autocommand call airline#mode_changed()

Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 3: sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component/repo.vim"
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

not found in runtime path: "autoload/vital/_gina/Git.vim"
function <SNR>251__get_reference(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 139
function <SNR>251_relpath(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 76
function <SNR>251__vital_loaded(V) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 1
function <SNR>251__get_reference_trad(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 147
function <SNR>251_abspath(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 68
function <SNR>251_ref(git, refname) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 102
function <SNR>251_new(path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 17
function <SNR>251__vital_depends() abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 8
function <SNR>251__get_packed_refs(git) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 124
function <SNR>251_resolve(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 87
function <SNR>251__get_reference_packed(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 168
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component/repo.vim
continuing in <SNR>135_config_gina_branch
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 3: sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component/repo.vim"
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

not found in runtime path: "autoload/vital/_gina/Git.vim"
function <SNR>251__get_reference(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 139
function <SNR>251_relpath(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 76
function <SNR>251__vital_loaded(V) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 1
function <SNR>251__get_reference_trad(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 147
function <SNR>251_abspath(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 68
function <SNR>251_ref(git, refname) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 102
function <SNR>251_new(path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 17
function <SNR>251__vital_depends() abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 8
function <SNR>251__get_packed_refs(git) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 124
function <SNR>251_resolve(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 87
function <SNR>251__get_reference_packed(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 168
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component/repo.vim
continuing in <SNR>135_config_gina_branch
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/coc)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/coc/highlight.vim"
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/coc/highlight.vim
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 3: sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component/repo.vim"
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

not found in runtime path: "autoload/vital/_gina/Git.vim"
function <SNR>251__get_reference(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 139
function <SNR>251_relpath(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 76
function <SNR>251__vital_loaded(V) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 1
function <SNR>251__get_reference_trad(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 147
function <SNR>251_abspath(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 68
function <SNR>251_ref(git, refname) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 102
function <SNR>251_new(path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 17
function <SNR>251__vital_depends() abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 8
function <SNR>251__get_packed_refs(git) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 124
function <SNR>251_resolve(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 87
function <SNR>251__get_reference_packed(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 168
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component/repo.vim
continuing in <SNR>135_config_gina_branch
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 3: sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component/repo.vim"
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

not found in runtime path: "autoload/vital/_gina/Git.vim"
function <SNR>251__get_reference(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 139
function <SNR>251_relpath(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 76
function <SNR>251__vital_loaded(V) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 1
function <SNR>251__get_reference_trad(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 147
function <SNR>251_abspath(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 68
function <SNR>251_ref(git, refname) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 102
function <SNR>251_new(path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 17
function <SNR>251__vital_depends() abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 8
function <SNR>251__get_packed_refs(git) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 124
function <SNR>251_resolve(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 87
function <SNR>251__get_reference_packed(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 168
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component/repo.vim
continuing in <SNR>135_config_gina_branch
Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()


Executing WinLeave Autocommands for "*"
autocommand call s:Autocmd('WinLeave', win_getid())

Executing WinLeave Autocommands for "*"
autocommand call s:Remove_Matches()

Executing WinEnter Autocommands for "*"
autocommand call s:dopopd()

Executing WinEnter Autocommands for "*"
autocommand call <sid>on_window_changed('WinEnter')

Executing WinEnter Autocommands for "*"
autocommand call coc#float#nvim_win_enter(win_getid())

autocommand call s:Autocmd('WinEnter', win_getid())

Executing WinEnter Autocommands for "*"
autocommand let g:fzf#vim#buffers[bufnr('')] = reltimefloat(reltime())

Executing WinEnter Autocommands for "*"
autocommand let s:tmux_is_last_pane = 0

Executing WinEnter Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing WinEnter Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing BufEnter Autocommands for "*"
autocommand set fo-=c fo-=r fo-=o

Executing BufEnter Autocommands for "*"
autocommand call s:Autocmd('BufEnter', +expand('<abuf>'))

Executing BufEnter Autocommands for "*"
autocommand if conflict_marker#detect#markers() | call s:on_detected() | endif

Executing BufEnter Autocommands for "*"
autocommand call s:mru_append(expand('<amatch>'))

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing User Autocommands for "AirlineModeChanged"
autocommand call airline#mode_changed()

Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/coc)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/coc/highlight.vim"
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/coc/highlight.vim
Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()


Executing WinLeave Autocommands for "*"
autocommand call s:Autocmd('WinLeave', win_getid())

Executing WinLeave Autocommands for "*"
autocommand call s:Remove_Matches()

Executing WinEnter Autocommands for "*"
autocommand call s:dopopd()

Executing WinEnter Autocommands for "*"
autocommand call <sid>on_window_changed('WinEnter')

Executing WinEnter Autocommands for "*"
autocommand call coc#float#nvim_win_enter(win_getid())

autocommand call s:Autocmd('WinEnter', win_getid())

Executing WinEnter Autocommands for "*"
autocommand let g:fzf#vim#buffers[bufnr('')] = reltimefloat(reltime())

Executing WinEnter Autocommands for "*"
autocommand let s:tmux_is_last_pane = 0

Executing WinEnter Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing WinEnter Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing BufEnter Autocommands for "*"
autocommand set fo-=c fo-=r fo-=o

Executing BufEnter Autocommands for "*"
autocommand call s:Autocmd('BufEnter', +expand('<abuf>'))

Executing BufEnter Autocommands for "*"
autocommand if conflict_marker#detect#markers() | call s:on_detected() | endif

Executing BufEnter Autocommands for "*"
autocommand call s:mru_append(expand('<amatch>'))

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing User Autocommands for "AirlineModeChanged"
autocommand call airline#mode_changed()

Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 3: sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component/repo.vim"
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

not found in runtime path: "autoload/vital/_gina/Git.vim"
function <SNR>251__get_reference(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 139
function <SNR>251_relpath(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 76
function <SNR>251__vital_loaded(V) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 1
function <SNR>251__get_reference_trad(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 147
function <SNR>251_abspath(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 68
function <SNR>251_ref(git, refname) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 102
function <SNR>251_new(path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 17
function <SNR>251__vital_depends() abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 8
function <SNR>251__get_packed_refs(git) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 124
function <SNR>251_resolve(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 87
function <SNR>251__get_reference_packed(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 168
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component/repo.vim
continuing in <SNR>135_config_gina_branch
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 3: sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component/repo.vim"
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

not found in runtime path: "autoload/vital/_gina/Git.vim"
function <SNR>251__get_reference(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 139
function <SNR>251_relpath(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 76
function <SNR>251__vital_loaded(V) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 1
function <SNR>251__get_reference_trad(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 147
function <SNR>251_abspath(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 68
function <SNR>251_ref(git, refname) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 102
function <SNR>251_new(path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 17
function <SNR>251__vital_depends() abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 8
function <SNR>251__get_packed_refs(git) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 124
function <SNR>251_resolve(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 87
function <SNR>251__get_reference_packed(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 168
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component/repo.vim
continuing in <SNR>135_config_gina_branch
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/coc)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/coc/highlight.vim"
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/coc/highlight.vim
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 3: sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component/repo.vim"
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

not found in runtime path: "autoload/vital/_gina/Git.vim"
function <SNR>251__get_reference(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 139
function <SNR>251_relpath(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 76
function <SNR>251__vital_loaded(V) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 1
function <SNR>251__get_reference_trad(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 147
function <SNR>251_abspath(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 68
function <SNR>251_ref(git, refname) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 102
function <SNR>251_new(path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 17
function <SNR>251__vital_depends() abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 8
function <SNR>251__get_packed_refs(git) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 124
function <SNR>251_resolve(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 87
function <SNR>251__get_reference_packed(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 168
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component/repo.vim
continuing in <SNR>135_config_gina_branch
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 3: sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component/repo.vim"
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

not found in runtime path: "autoload/vital/_gina/Git.vim"
function <SNR>251__get_reference(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 139
function <SNR>251_relpath(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 76
function <SNR>251__vital_loaded(V) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 1
function <SNR>251__get_reference_trad(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 147
function <SNR>251_abspath(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 68
function <SNR>251_ref(git, refname) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 102
function <SNR>251_new(path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 17
function <SNR>251__vital_depends() abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 8
function <SNR>251__get_packed_refs(git) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 124
function <SNR>251_resolve(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 87
function <SNR>251__get_reference_packed(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 168
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component/repo.vim
continuing in <SNR>135_config_gina_branch
Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()


Executing WinLeave Autocommands for "*"
autocommand call s:Autocmd('WinLeave', win_getid())

Executing WinLeave Autocommands for "*"
autocommand call s:Remove_Matches()

Executing WinEnter Autocommands for "*"
autocommand call s:dopopd()

Executing WinEnter Autocommands for "*"
autocommand call <sid>on_window_changed('WinEnter')

Executing WinEnter Autocommands for "*"
autocommand call coc#float#nvim_win_enter(win_getid())

autocommand call s:Autocmd('WinEnter', win_getid())

Executing WinEnter Autocommands for "*"
autocommand let g:fzf#vim#buffers[bufnr('')] = reltimefloat(reltime())

Executing WinEnter Autocommands for "*"
autocommand let s:tmux_is_last_pane = 0

Executing WinEnter Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing WinEnter Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing BufEnter Autocommands for "*"
autocommand set fo-=c fo-=r fo-=o

Executing BufEnter Autocommands for "*"
autocommand call s:Autocmd('BufEnter', +expand('<abuf>'))

Executing BufEnter Autocommands for "*"
autocommand if conflict_marker#detect#markers() | call s:on_detected() | endif

Executing BufEnter Autocommands for "*"
autocommand call s:mru_append(expand('<amatch>'))

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing User Autocommands for "AirlineModeChanged"
autocommand call airline#mode_changed()

Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/coc)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/coc/highlight.vim"
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/coc/highlight.vim
Executing CursorHold Autocommands for "*"
autocommand silent call CocActionAsync('highlight')

autocommand silent call CocActionAsync('highlight')

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()


Executing WinLeave Autocommands for "*"
autocommand call s:Autocmd('WinLeave', win_getid())

Executing WinLeave Autocommands for "*"
autocommand call s:Remove_Matches()

Executing WinEnter Autocommands for "*"
autocommand call s:dopopd()

Executing WinEnter Autocommands for "*"
autocommand call <sid>on_window_changed('WinEnter')

Executing WinEnter Autocommands for "*"
autocommand call coc#float#nvim_win_enter(win_getid())

autocommand call s:Autocmd('WinEnter', win_getid())

Executing WinEnter Autocommands for "*"
autocommand let g:fzf#vim#buffers[bufnr('')] = reltimefloat(reltime())

Executing WinEnter Autocommands for "*"
autocommand let s:tmux_is_last_pane = 0

Executing WinEnter Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing WinEnter Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing BufEnter Autocommands for "*"
autocommand set fo-=c fo-=r fo-=o

Executing BufEnter Autocommands for "*"
autocommand call s:Autocmd('BufEnter', +expand('<abuf>'))

Executing BufEnter Autocommands for "*"
autocommand if conflict_marker#detect#markers() | call s:on_detected() | endif

Executing BufEnter Autocommands for "*"
autocommand call s:mru_append(expand('<amatch>'))

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing User Autocommands for "AirlineModeChanged"
autocommand call airline#mode_changed()

Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 3: sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component/repo.vim"
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

not found in runtime path: "autoload/vital/_gina/Git.vim"
function <SNR>251__get_reference(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 139
function <SNR>251_relpath(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 76
function <SNR>251__vital_loaded(V) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 1
function <SNR>251__get_reference_trad(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 147
function <SNR>251_abspath(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 68
function <SNR>251_ref(git, refname) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 102
function <SNR>251_new(path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 17
function <SNR>251__vital_depends() abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 8
function <SNR>251__get_packed_refs(git) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 124
function <SNR>251_resolve(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 87
function <SNR>251__get_reference_packed(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 168
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component/repo.vim
continuing in <SNR>135_config_gina_branch
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 3: sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component/repo.vim"
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

not found in runtime path: "autoload/vital/_gina/Git.vim"
function <SNR>251__get_reference(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 139
function <SNR>251_relpath(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 76
function <SNR>251__vital_loaded(V) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 1
function <SNR>251__get_reference_trad(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 147
function <SNR>251_abspath(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 68
function <SNR>251_ref(git, refname) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 102
function <SNR>251_new(path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 17
function <SNR>251__vital_depends() abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 8
function <SNR>251__get_packed_refs(git) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 124
function <SNR>251_resolve(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 87
function <SNR>251__get_reference_packed(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 168
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component/repo.vim
continuing in <SNR>135_config_gina_branch
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/coc)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/coc/highlight.vim"
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/coc/highlight.vim
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 3: sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component/repo.vim"
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

not found in runtime path: "autoload/vital/_gina/Git.vim"
function <SNR>251__get_reference(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 139
function <SNR>251_relpath(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 76
function <SNR>251__vital_loaded(V) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 1
function <SNR>251__get_reference_trad(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 147
function <SNR>251_abspath(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 68
function <SNR>251_ref(git, refname) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 102
function <SNR>251_new(path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 17
function <SNR>251__vital_depends() abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 8
function <SNR>251__get_packed_refs(git) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 124
function <SNR>251_resolve(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 87
function <SNR>251__get_reference_packed(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 168
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component/repo.vim
continuing in <SNR>135_config_gina_branch
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 3: sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component/repo.vim"
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

not found in runtime path: "autoload/vital/_gina/Git.vim"
function <SNR>251__get_reference(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 139
function <SNR>251_relpath(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 76
function <SNR>251__vital_loaded(V) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 1
function <SNR>251__get_reference_trad(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 147
function <SNR>251_abspath(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 68
function <SNR>251_ref(git, refname) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 102
function <SNR>251_new(path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 17
function <SNR>251__vital_depends() abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 8
function <SNR>251__get_packed_refs(git) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 124
function <SNR>251_resolve(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 87
function <SNR>251__get_reference_packed(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 168
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component/repo.vim
continuing in <SNR>135_config_gina_branch
Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()


Executing WinLeave Autocommands for "*"
autocommand call s:Autocmd('WinLeave', win_getid())

Executing WinLeave Autocommands for "*"
autocommand call s:Remove_Matches()

Executing WinEnter Autocommands for "*"
autocommand call s:dopopd()

Executing WinEnter Autocommands for "*"
autocommand call <sid>on_window_changed('WinEnter')

Executing WinEnter Autocommands for "*"
autocommand call coc#float#nvim_win_enter(win_getid())

autocommand call s:Autocmd('WinEnter', win_getid())

Executing WinEnter Autocommands for "*"
autocommand let g:fzf#vim#buffers[bufnr('')] = reltimefloat(reltime())

Executing WinEnter Autocommands for "*"
autocommand let s:tmux_is_last_pane = 0

Executing WinEnter Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing WinEnter Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing BufEnter Autocommands for "*"
autocommand set fo-=c fo-=r fo-=o

Executing BufEnter Autocommands for "*"
autocommand call s:Autocmd('BufEnter', +expand('<abuf>'))

Executing BufEnter Autocommands for "*"
autocommand if conflict_marker#detect#markers() | call s:on_detected() | endif

Executing BufEnter Autocommands for "*"
autocommand call s:mru_append(expand('<amatch>'))

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing User Autocommands for "AirlineModeChanged"
autocommand call airline#mode_changed()

Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/coc)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/coc/highlight.vim"
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/coc/highlight.vim
Executing CursorHold Autocommands for "*"
autocommand silent call CocActionAsync('highlight')

autocommand silent call CocActionAsync('highlight')

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()


Executing WinLeave Autocommands for "*"
autocommand call s:Autocmd('WinLeave', win_getid())

Executing WinLeave Autocommands for "*"
autocommand call s:Remove_Matches()

Executing WinEnter Autocommands for "*"
autocommand call s:dopopd()

Executing WinEnter Autocommands for "*"
autocommand call <sid>on_window_changed('WinEnter')

Executing WinEnter Autocommands for "*"
autocommand call coc#float#nvim_win_enter(win_getid())

autocommand call s:Autocmd('WinEnter', win_getid())

Executing WinEnter Autocommands for "*"
autocommand let g:fzf#vim#buffers[bufnr('')] = reltimefloat(reltime())

Executing WinEnter Autocommands for "*"
autocommand let s:tmux_is_last_pane = 0

Executing WinEnter Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing WinEnter Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing BufEnter Autocommands for "*"
autocommand set fo-=c fo-=r fo-=o

Executing BufEnter Autocommands for "*"
autocommand call s:Autocmd('BufEnter', +expand('<abuf>'))

Executing BufEnter Autocommands for "*"
autocommand if conflict_marker#detect#markers() | call s:on_detected() | endif

Executing BufEnter Autocommands for "*"
autocommand call s:mru_append(expand('<amatch>'))

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing User Autocommands for "AirlineModeChanged"
autocommand call airline#mode_changed()

Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 3: sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component/repo.vim"
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

not found in runtime path: "autoload/vital/_gina/Git.vim"
function <SNR>251__get_reference(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 139
function <SNR>251_relpath(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 76
function <SNR>251__vital_loaded(V) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 1
function <SNR>251__get_reference_trad(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 147
function <SNR>251_abspath(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 68
function <SNR>251_ref(git, refname) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 102
function <SNR>251_new(path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 17
function <SNR>251__vital_depends() abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 8
function <SNR>251__get_packed_refs(git) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 124
function <SNR>251_resolve(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 87
function <SNR>251__get_reference_packed(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 168
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component/repo.vim
continuing in <SNR>135_config_gina_branch
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 3: sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component/repo.vim"
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

not found in runtime path: "autoload/vital/_gina/Git.vim"
function <SNR>251__get_reference(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 139
function <SNR>251_relpath(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 76
function <SNR>251__vital_loaded(V) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 1
function <SNR>251__get_reference_trad(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 147
function <SNR>251_abspath(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 68
function <SNR>251_ref(git, refname) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 102
function <SNR>251_new(path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 17
function <SNR>251__vital_depends() abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 8
function <SNR>251__get_packed_refs(git) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 124
function <SNR>251_resolve(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 87
function <SNR>251__get_reference_packed(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 168
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component/repo.vim
continuing in <SNR>135_config_gina_branch
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/coc)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/coc/highlight.vim"
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/coc/highlight.vim
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 3: sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component/repo.vim"
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

not found in runtime path: "autoload/vital/_gina/Git.vim"
function <SNR>251__get_reference(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 139
function <SNR>251_relpath(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 76
function <SNR>251__vital_loaded(V) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 1
function <SNR>251__get_reference_trad(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 147
function <SNR>251_abspath(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 68
function <SNR>251_ref(git, refname) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 102
function <SNR>251_new(path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 17
function <SNR>251__vital_depends() abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 8
function <SNR>251__get_packed_refs(git) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 124
function <SNR>251_resolve(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 87
function <SNR>251__get_reference_packed(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 168
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component/repo.vim
continuing in <SNR>135_config_gina_branch
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 3: sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component/repo.vim"
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

not found in runtime path: "autoload/vital/_gina/Git.vim"
function <SNR>251__get_reference(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 139
function <SNR>251_relpath(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 76
function <SNR>251__vital_loaded(V) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 1
function <SNR>251__get_reference_trad(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 147
function <SNR>251_abspath(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 68
function <SNR>251_ref(git, refname) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 102
function <SNR>251_new(path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 17
function <SNR>251__vital_depends() abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 8
function <SNR>251__get_packed_refs(git) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 124
function <SNR>251_resolve(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 87
function <SNR>251__get_reference_packed(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 168
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component/repo.vim
continuing in <SNR>135_config_gina_branch
Executing CursorHold Autocommands for "*"
autocommand silent call CocActionAsync('highlight')

autocommand silent call CocActionAsync('highlight')

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 3: sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component/repo.vim"
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

not found in runtime path: "autoload/vital/_gina/Git.vim"
function <SNR>251__get_reference(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 139
function <SNR>251_relpath(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 76
function <SNR>251__vital_loaded(V) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 1
function <SNR>251__get_reference_trad(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 147
function <SNR>251_abspath(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 68
function <SNR>251_ref(git, refname) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 102
function <SNR>251_new(path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 17
function <SNR>251__vital_depends() abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 8
function <SNR>251__get_packed_refs(git) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 124
function <SNR>251_resolve(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 87
function <SNR>251__get_reference_packed(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 168
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component/repo.vim
continuing in <SNR>135_config_gina_branch
Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()


Executing WinLeave Autocommands for "*"
autocommand call s:Autocmd('WinLeave', win_getid())

Executing WinLeave Autocommands for "*"
autocommand call s:Remove_Matches()

Executing WinEnter Autocommands for "*"
autocommand call s:dopopd()

Executing WinEnter Autocommands for "*"
autocommand call <sid>on_window_changed('WinEnter')

Executing WinEnter Autocommands for "*"
autocommand call coc#float#nvim_win_enter(win_getid())

autocommand call s:Autocmd('WinEnter', win_getid())

Executing WinEnter Autocommands for "*"
autocommand let g:fzf#vim#buffers[bufnr('')] = reltimefloat(reltime())

Executing WinEnter Autocommands for "*"
autocommand let s:tmux_is_last_pane = 0

Executing WinEnter Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing WinEnter Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing BufEnter Autocommands for "*"
autocommand set fo-=c fo-=r fo-=o

Executing BufEnter Autocommands for "*"
autocommand call s:Autocmd('BufEnter', +expand('<abuf>'))

Executing BufEnter Autocommands for "*"
autocommand if conflict_marker#detect#markers() | call s:on_detected() | endif

Executing BufEnter Autocommands for "*"
autocommand call s:mru_append(expand('<amatch>'))

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing User Autocommands for "AirlineModeChanged"
autocommand call airline#mode_changed()

Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/coc)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/coc/highlight.vim"
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/coc/highlight.vim
Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()


Executing WinLeave Autocommands for "*"
autocommand call s:Autocmd('WinLeave', win_getid())

Executing WinLeave Autocommands for "*"
autocommand call s:Remove_Matches()

Executing WinEnter Autocommands for "*"
autocommand call s:dopopd()

Executing WinEnter Autocommands for "*"
autocommand call <sid>on_window_changed('WinEnter')

Executing WinEnter Autocommands for "*"
autocommand call coc#float#nvim_win_enter(win_getid())

autocommand call s:Autocmd('WinEnter', win_getid())

Executing WinEnter Autocommands for "*"
autocommand let g:fzf#vim#buffers[bufnr('')] = reltimefloat(reltime())

Executing WinEnter Autocommands for "*"
autocommand let s:tmux_is_last_pane = 0

Executing WinEnter Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing WinEnter Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing BufEnter Autocommands for "*"
autocommand set fo-=c fo-=r fo-=o

Executing BufEnter Autocommands for "*"
autocommand call s:Autocmd('BufEnter', +expand('<abuf>'))

Executing BufEnter Autocommands for "*"
autocommand if conflict_marker#detect#markers() | call s:on_detected() | endif

Executing BufEnter Autocommands for "*"
autocommand call s:mru_append(expand('<amatch>'))

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing User Autocommands for "AirlineModeChanged"
autocommand call airline#mode_changed()

Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 3: sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component/repo.vim"
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

not found in runtime path: "autoload/vital/_gina/Git.vim"
function <SNR>251__get_reference(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 139
function <SNR>251_relpath(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 76
function <SNR>251__vital_loaded(V) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 1
function <SNR>251__get_reference_trad(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 147
function <SNR>251_abspath(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 68
function <SNR>251_ref(git, refname) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 102
function <SNR>251_new(path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 17
function <SNR>251__vital_depends() abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 8
function <SNR>251__get_packed_refs(git) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 124
function <SNR>251_resolve(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 87
function <SNR>251__get_reference_packed(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 168
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component/repo.vim
continuing in <SNR>135_config_gina_branch
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 3: sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component/repo.vim"
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

not found in runtime path: "autoload/vital/_gina/Git.vim"
function <SNR>251__get_reference(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 139
function <SNR>251_relpath(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 76
function <SNR>251__vital_loaded(V) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 1
function <SNR>251__get_reference_trad(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 147
function <SNR>251_abspath(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 68
function <SNR>251_ref(git, refname) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 102
function <SNR>251_new(path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 17
function <SNR>251__vital_depends() abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 8
function <SNR>251__get_packed_refs(git) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 124
function <SNR>251_resolve(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 87
function <SNR>251__get_reference_packed(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 168
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component/repo.vim
continuing in <SNR>135_config_gina_branch
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/coc)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/coc/highlight.vim"
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/coc/highlight.vim
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 3: sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component/repo.vim"
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

not found in runtime path: "autoload/vital/_gina/Git.vim"
function <SNR>251__get_reference(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 139
function <SNR>251_relpath(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 76
function <SNR>251__vital_loaded(V) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 1
function <SNR>251__get_reference_trad(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 147
function <SNR>251_abspath(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 68
function <SNR>251_ref(git, refname) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 102
function <SNR>251_new(path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 17
function <SNR>251__vital_depends() abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 8
function <SNR>251__get_packed_refs(git) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 124
function <SNR>251_resolve(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 87
function <SNR>251__get_reference_packed(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 168
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component/repo.vim
continuing in <SNR>135_config_gina_branch
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 3: sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component/repo.vim"
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

not found in runtime path: "autoload/vital/_gina/Git.vim"
function <SNR>251__get_reference(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 139
function <SNR>251_relpath(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 76
function <SNR>251__vital_loaded(V) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 1
function <SNR>251__get_reference_trad(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 147
function <SNR>251_abspath(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 68
function <SNR>251_ref(git, refname) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 102
function <SNR>251_new(path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 17
function <SNR>251__vital_depends() abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 8
function <SNR>251__get_packed_refs(git) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 124
function <SNR>251_resolve(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 87
function <SNR>251__get_reference_packed(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 168
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component/repo.vim
continuing in <SNR>135_config_gina_branch
Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()


Executing WinLeave Autocommands for "*"
autocommand call s:Autocmd('WinLeave', win_getid())

Executing WinLeave Autocommands for "*"
autocommand call s:Remove_Matches()

Executing WinEnter Autocommands for "*"
autocommand call s:dopopd()

Executing WinEnter Autocommands for "*"
autocommand call <sid>on_window_changed('WinEnter')

Executing WinEnter Autocommands for "*"
autocommand call coc#float#nvim_win_enter(win_getid())

autocommand call s:Autocmd('WinEnter', win_getid())

Executing WinEnter Autocommands for "*"
autocommand let g:fzf#vim#buffers[bufnr('')] = reltimefloat(reltime())

Executing WinEnter Autocommands for "*"
autocommand let s:tmux_is_last_pane = 0

Executing WinEnter Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing WinEnter Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing BufEnter Autocommands for "*"
autocommand set fo-=c fo-=r fo-=o

Executing BufEnter Autocommands for "*"
autocommand call s:Autocmd('BufEnter', +expand('<abuf>'))

Executing BufEnter Autocommands for "*"
autocommand if conflict_marker#detect#markers() | call s:on_detected() | endif

Executing BufEnter Autocommands for "*"
autocommand call s:mru_append(expand('<amatch>'))

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing User Autocommands for "AirlineModeChanged"
autocommand call airline#mode_changed()

Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/coc)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/coc/highlight.vim"
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/coc/highlight.vim
Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()


Executing WinLeave Autocommands for "*"
autocommand call s:Autocmd('WinLeave', win_getid())

Executing WinLeave Autocommands for "*"
autocommand call s:Remove_Matches()

Executing WinEnter Autocommands for "*"
autocommand call s:dopopd()

Executing WinEnter Autocommands for "*"
autocommand call <sid>on_window_changed('WinEnter')

Executing WinEnter Autocommands for "*"
autocommand call coc#float#nvim_win_enter(win_getid())

autocommand call s:Autocmd('WinEnter', win_getid())

Executing WinEnter Autocommands for "*"
autocommand let g:fzf#vim#buffers[bufnr('')] = reltimefloat(reltime())

Executing WinEnter Autocommands for "*"
autocommand let s:tmux_is_last_pane = 0

Executing WinEnter Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing WinEnter Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing BufEnter Autocommands for "*"
autocommand set fo-=c fo-=r fo-=o

Executing BufEnter Autocommands for "*"
autocommand call s:Autocmd('BufEnter', +expand('<abuf>'))

Executing BufEnter Autocommands for "*"
autocommand if conflict_marker#detect#markers() | call s:on_detected() | endif

Executing BufEnter Autocommands for "*"
autocommand call s:mru_append(expand('<amatch>'))

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing User Autocommands for "AirlineModeChanged"
autocommand call airline#mode_changed()

Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 3: sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component/repo.vim"
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

not found in runtime path: "autoload/vital/_gina/Git.vim"
function <SNR>251__get_reference(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 139
function <SNR>251_relpath(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 76
function <SNR>251__vital_loaded(V) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 1
function <SNR>251__get_reference_trad(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 147
function <SNR>251_abspath(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 68
function <SNR>251_ref(git, refname) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 102
function <SNR>251_new(path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 17
function <SNR>251__vital_depends() abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 8
function <SNR>251__get_packed_refs(git) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 124
function <SNR>251_resolve(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 87
function <SNR>251__get_reference_packed(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 168
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component/repo.vim
continuing in <SNR>135_config_gina_branch
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 3: sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component/repo.vim"
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

not found in runtime path: "autoload/vital/_gina/Git.vim"
function <SNR>251__get_reference(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 139
function <SNR>251_relpath(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 76
function <SNR>251__vital_loaded(V) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 1
function <SNR>251__get_reference_trad(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 147
function <SNR>251_abspath(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 68
function <SNR>251_ref(git, refname) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 102
function <SNR>251_new(path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 17
function <SNR>251__vital_depends() abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 8
function <SNR>251__get_packed_refs(git) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 124
function <SNR>251_resolve(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 87
function <SNR>251__get_reference_packed(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 168
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component/repo.vim
continuing in <SNR>135_config_gina_branch
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/coc)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/coc/highlight.vim"
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/coc/highlight.vim
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 3: sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component/repo.vim"
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

not found in runtime path: "autoload/vital/_gina/Git.vim"
function <SNR>251__get_reference(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 139
function <SNR>251_relpath(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 76
function <SNR>251__vital_loaded(V) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 1
function <SNR>251__get_reference_trad(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 147
function <SNR>251_abspath(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 68
function <SNR>251_ref(git, refname) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 102
function <SNR>251_new(path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 17
function <SNR>251__vital_depends() abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 8
function <SNR>251__get_packed_refs(git) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 124
function <SNR>251_resolve(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 87
function <SNR>251__get_reference_packed(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 168
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component/repo.vim
continuing in <SNR>135_config_gina_branch
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 3: sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component/repo.vim"
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

not found in runtime path: "autoload/vital/_gina/Git.vim"
function <SNR>251__get_reference(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 139
function <SNR>251_relpath(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 76
function <SNR>251__vital_loaded(V) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 1
function <SNR>251__get_reference_trad(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 147
function <SNR>251_abspath(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 68
function <SNR>251_ref(git, refname) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 102
function <SNR>251_new(path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 17
function <SNR>251__vital_depends() abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 8
function <SNR>251__get_packed_refs(git) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 124
function <SNR>251_resolve(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 87
function <SNR>251__get_reference_packed(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 168
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component/repo.vim
continuing in <SNR>135_config_gina_branch
Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()


Executing WinLeave Autocommands for "*"
autocommand call s:Autocmd('WinLeave', win_getid())

Executing WinLeave Autocommands for "*"
autocommand call s:Remove_Matches()

Executing WinEnter Autocommands for "*"
autocommand call s:dopopd()

Executing WinEnter Autocommands for "*"
autocommand call <sid>on_window_changed('WinEnter')

Executing WinEnter Autocommands for "*"
autocommand call coc#float#nvim_win_enter(win_getid())

autocommand call s:Autocmd('WinEnter', win_getid())

Executing WinEnter Autocommands for "*"
autocommand let g:fzf#vim#buffers[bufnr('')] = reltimefloat(reltime())

Executing WinEnter Autocommands for "*"
autocommand let s:tmux_is_last_pane = 0

Executing WinEnter Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing WinEnter Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing BufEnter Autocommands for "*"
autocommand set fo-=c fo-=r fo-=o

Executing BufEnter Autocommands for "*"
autocommand call s:Autocmd('BufEnter', +expand('<abuf>'))

Executing BufEnter Autocommands for "*"
autocommand if conflict_marker#detect#markers() | call s:on_detected() | endif

Executing BufEnter Autocommands for "*"
autocommand call s:mru_append(expand('<amatch>'))

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing User Autocommands for "AirlineModeChanged"
autocommand call airline#mode_changed()

Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/coc)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/coc/highlight.vim"
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/coc/highlight.vim
Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()


Executing WinLeave Autocommands for "*"
autocommand call s:Autocmd('WinLeave', win_getid())

Executing WinLeave Autocommands for "*"
autocommand call s:Remove_Matches()

Executing WinEnter Autocommands for "*"
autocommand call s:dopopd()

Executing WinEnter Autocommands for "*"
autocommand call <sid>on_window_changed('WinEnter')

Executing WinEnter Autocommands for "*"
autocommand call coc#float#nvim_win_enter(win_getid())

autocommand call s:Autocmd('WinEnter', win_getid())

Executing WinEnter Autocommands for "*"
autocommand let g:fzf#vim#buffers[bufnr('')] = reltimefloat(reltime())

Executing WinEnter Autocommands for "*"
autocommand let s:tmux_is_last_pane = 0

Executing WinEnter Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing WinEnter Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing BufEnter Autocommands for "*"
autocommand set fo-=c fo-=r fo-=o

Executing BufEnter Autocommands for "*"
autocommand call s:Autocmd('BufEnter', +expand('<abuf>'))

Executing BufEnter Autocommands for "*"
autocommand if conflict_marker#detect#markers() | call s:on_detected() | endif

Executing BufEnter Autocommands for "*"
autocommand call s:mru_append(expand('<amatch>'))

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing User Autocommands for "AirlineModeChanged"
autocommand call airline#mode_changed()

Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 3: sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component/repo.vim"
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

not found in runtime path: "autoload/vital/_gina/Git.vim"
function <SNR>251__get_reference(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 139
function <SNR>251_relpath(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 76
function <SNR>251__vital_loaded(V) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 1
function <SNR>251__get_reference_trad(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 147
function <SNR>251_abspath(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 68
function <SNR>251_ref(git, refname) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 102
function <SNR>251_new(path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 17
function <SNR>251__vital_depends() abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 8
function <SNR>251__get_packed_refs(git) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 124
function <SNR>251_resolve(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 87
function <SNR>251__get_reference_packed(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 168
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component/repo.vim
continuing in <SNR>135_config_gina_branch
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 3: sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component/repo.vim"
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

not found in runtime path: "autoload/vital/_gina/Git.vim"
function <SNR>251__get_reference(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 139
function <SNR>251_relpath(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 76
function <SNR>251__vital_loaded(V) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 1
function <SNR>251__get_reference_trad(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 147
function <SNR>251_abspath(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 68
function <SNR>251_ref(git, refname) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 102
function <SNR>251_new(path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 17
function <SNR>251__vital_depends() abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 8
function <SNR>251__get_packed_refs(git) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 124
function <SNR>251_resolve(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 87
function <SNR>251__get_reference_packed(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 168
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component/repo.vim
continuing in <SNR>135_config_gina_branch
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/coc)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/coc/highlight.vim"
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/coc/highlight.vim
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 3: sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component/repo.vim"
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

not found in runtime path: "autoload/vital/_gina/Git.vim"
function <SNR>251__get_reference(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 139
function <SNR>251_relpath(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 76
function <SNR>251__vital_loaded(V) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 1
function <SNR>251__get_reference_trad(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 147
function <SNR>251_abspath(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 68
function <SNR>251_ref(git, refname) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 102
function <SNR>251_new(path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 17
function <SNR>251__vital_depends() abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 8
function <SNR>251__get_packed_refs(git) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 124
function <SNR>251_resolve(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 87
function <SNR>251__get_reference_packed(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 168
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component/repo.vim
continuing in <SNR>135_config_gina_branch
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 3: sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component/repo.vim"
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

not found in runtime path: "autoload/vital/_gina/Git.vim"
function <SNR>251__get_reference(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 139
function <SNR>251_relpath(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 76
function <SNR>251__vital_loaded(V) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 1
function <SNR>251__get_reference_trad(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 147
function <SNR>251_abspath(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 68
function <SNR>251_ref(git, refname) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 102
function <SNR>251_new(path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 17
function <SNR>251__vital_depends() abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 8
function <SNR>251__get_packed_refs(git) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 124
function <SNR>251_resolve(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 87
function <SNR>251__get_reference_packed(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 168
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component/repo.vim
continuing in <SNR>135_config_gina_branch
Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()


Executing WinLeave Autocommands for "*"
autocommand call s:Autocmd('WinLeave', win_getid())

Executing WinLeave Autocommands for "*"
autocommand call s:Remove_Matches()

Executing WinEnter Autocommands for "*"
autocommand call s:dopopd()

Executing WinEnter Autocommands for "*"
autocommand call <sid>on_window_changed('WinEnter')

Executing WinEnter Autocommands for "*"
autocommand call coc#float#nvim_win_enter(win_getid())

autocommand call s:Autocmd('WinEnter', win_getid())

Executing WinEnter Autocommands for "*"
autocommand let g:fzf#vim#buffers[bufnr('')] = reltimefloat(reltime())

Executing WinEnter Autocommands for "*"
autocommand let s:tmux_is_last_pane = 0

Executing WinEnter Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing WinEnter Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing BufEnter Autocommands for "*"
autocommand set fo-=c fo-=r fo-=o

Executing BufEnter Autocommands for "*"
autocommand call s:Autocmd('BufEnter', +expand('<abuf>'))

Executing BufEnter Autocommands for "*"
autocommand if conflict_marker#detect#markers() | call s:on_detected() | endif

Executing BufEnter Autocommands for "*"
autocommand call s:mru_append(expand('<amatch>'))

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing User Autocommands for "AirlineModeChanged"
autocommand call airline#mode_changed()

Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/coc)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/coc/highlight.vim"
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/coc/highlight.vim
Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()


Executing WinLeave Autocommands for "*"
autocommand call s:Autocmd('WinLeave', win_getid())

Executing WinLeave Autocommands for "*"
autocommand call s:Remove_Matches()

Executing WinEnter Autocommands for "*"
autocommand call s:dopopd()

Executing WinEnter Autocommands for "*"
autocommand call <sid>on_window_changed('WinEnter')

Executing WinEnter Autocommands for "*"
autocommand call coc#float#nvim_win_enter(win_getid())

autocommand call s:Autocmd('WinEnter', win_getid())

Executing WinEnter Autocommands for "*"
autocommand let g:fzf#vim#buffers[bufnr('')] = reltimefloat(reltime())

Executing WinEnter Autocommands for "*"
autocommand let s:tmux_is_last_pane = 0

Executing WinEnter Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing WinEnter Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing BufEnter Autocommands for "*"
autocommand set fo-=c fo-=r fo-=o

Executing BufEnter Autocommands for "*"
autocommand call s:Autocmd('BufEnter', +expand('<abuf>'))

Executing BufEnter Autocommands for "*"
autocommand if conflict_marker#detect#markers() | call s:on_detected() | endif

Executing BufEnter Autocommands for "*"
autocommand call s:mru_append(expand('<amatch>'))

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing User Autocommands for "AirlineModeChanged"
autocommand call airline#mode_changed()

Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 3: sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component/repo.vim"
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

not found in runtime path: "autoload/vital/_gina/Git.vim"
function <SNR>251__get_reference(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 139
function <SNR>251_relpath(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 76
function <SNR>251__vital_loaded(V) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 1
function <SNR>251__get_reference_trad(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 147
function <SNR>251_abspath(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 68
function <SNR>251_ref(git, refname) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 102
function <SNR>251_new(path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 17
function <SNR>251__vital_depends() abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 8
function <SNR>251__get_packed_refs(git) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 124
function <SNR>251_resolve(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 87
function <SNR>251__get_reference_packed(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 168
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component/repo.vim
continuing in <SNR>135_config_gina_branch
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 3: sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component/repo.vim"
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

not found in runtime path: "autoload/vital/_gina/Git.vim"
function <SNR>251__get_reference(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 139
function <SNR>251_relpath(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 76
function <SNR>251__vital_loaded(V) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 1
function <SNR>251__get_reference_trad(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 147
function <SNR>251_abspath(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 68
function <SNR>251_ref(git, refname) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 102
function <SNR>251_new(path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 17
function <SNR>251__vital_depends() abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 8
function <SNR>251__get_packed_refs(git) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 124
function <SNR>251_resolve(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 87
function <SNR>251__get_reference_packed(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 168
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component/repo.vim
continuing in <SNR>135_config_gina_branch
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/coc)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/coc/highlight.vim"
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/coc/highlight.vim
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 3: sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component/repo.vim"
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

not found in runtime path: "autoload/vital/_gina/Git.vim"
function <SNR>251__get_reference(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 139
function <SNR>251_relpath(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 76
function <SNR>251__vital_loaded(V) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 1
function <SNR>251__get_reference_trad(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 147
function <SNR>251_abspath(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 68
function <SNR>251_ref(git, refname) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 102
function <SNR>251_new(path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 17
function <SNR>251__vital_depends() abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 8
function <SNR>251__get_packed_refs(git) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 124
function <SNR>251_resolve(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 87
function <SNR>251__get_reference_packed(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 168
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component/repo.vim
continuing in <SNR>135_config_gina_branch
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 3: sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component/repo.vim"
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

not found in runtime path: "autoload/vital/_gina/Git.vim"
function <SNR>251__get_reference(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 139
function <SNR>251_relpath(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 76
function <SNR>251__vital_loaded(V) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 1
function <SNR>251__get_reference_trad(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 147
function <SNR>251_abspath(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 68
function <SNR>251_ref(git, refname) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 102
function <SNR>251_new(path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 17
function <SNR>251__vital_depends() abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 8
function <SNR>251__get_packed_refs(git) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 124
function <SNR>251_resolve(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 87
function <SNR>251__get_reference_packed(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 168
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component/repo.vim
continuing in <SNR>135_config_gina_branch
Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()


Executing WinLeave Autocommands for "*"
autocommand call s:Autocmd('WinLeave', win_getid())

Executing WinLeave Autocommands for "*"
autocommand call s:Remove_Matches()

Executing WinEnter Autocommands for "*"
autocommand call s:dopopd()

Executing WinEnter Autocommands for "*"
autocommand call <sid>on_window_changed('WinEnter')

Executing WinEnter Autocommands for "*"
autocommand call coc#float#nvim_win_enter(win_getid())

autocommand call s:Autocmd('WinEnter', win_getid())

Executing WinEnter Autocommands for "*"
autocommand let g:fzf#vim#buffers[bufnr('')] = reltimefloat(reltime())

Executing WinEnter Autocommands for "*"
autocommand let s:tmux_is_last_pane = 0

Executing WinEnter Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing WinEnter Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing BufEnter Autocommands for "*"
autocommand set fo-=c fo-=r fo-=o

Executing BufEnter Autocommands for "*"
autocommand call s:Autocmd('BufEnter', +expand('<abuf>'))

Executing BufEnter Autocommands for "*"
autocommand if conflict_marker#detect#markers() | call s:on_detected() | endif

Executing BufEnter Autocommands for "*"
autocommand call s:mru_append(expand('<amatch>'))

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing User Autocommands for "AirlineModeChanged"
autocommand call airline#mode_changed()

Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/coc)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/coc/highlight.vim"
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/coc/highlight.vim
Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()


Executing WinLeave Autocommands for "*"
autocommand call s:Autocmd('WinLeave', win_getid())

Executing WinLeave Autocommands for "*"
autocommand call s:Remove_Matches()

Executing WinEnter Autocommands for "*"
autocommand call s:dopopd()

Executing WinEnter Autocommands for "*"
autocommand call <sid>on_window_changed('WinEnter')

Executing WinEnter Autocommands for "*"
autocommand call coc#float#nvim_win_enter(win_getid())

autocommand call s:Autocmd('WinEnter', win_getid())

Executing WinEnter Autocommands for "*"
autocommand let g:fzf#vim#buffers[bufnr('')] = reltimefloat(reltime())

Executing WinEnter Autocommands for "*"
autocommand let s:tmux_is_last_pane = 0

Executing WinEnter Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing WinEnter Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing BufEnter Autocommands for "*"
autocommand set fo-=c fo-=r fo-=o

Executing BufEnter Autocommands for "*"
autocommand call s:Autocmd('BufEnter', +expand('<abuf>'))

Executing BufEnter Autocommands for "*"
autocommand if conflict_marker#detect#markers() | call s:on_detected() | endif

Executing BufEnter Autocommands for "*"
autocommand call s:mru_append(expand('<amatch>'))

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing User Autocommands for "AirlineModeChanged"
autocommand call airline#mode_changed()

Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 3: sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component/repo.vim"
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

not found in runtime path: "autoload/vital/_gina/Git.vim"
function <SNR>251__get_reference(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 139
function <SNR>251_relpath(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 76
function <SNR>251__vital_loaded(V) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 1
function <SNR>251__get_reference_trad(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 147
function <SNR>251_abspath(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 68
function <SNR>251_ref(git, refname) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 102
function <SNR>251_new(path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 17
function <SNR>251__vital_depends() abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 8
function <SNR>251__get_packed_refs(git) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 124
function <SNR>251_resolve(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 87
function <SNR>251__get_reference_packed(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 168
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component/repo.vim
continuing in <SNR>135_config_gina_branch
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 3: sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component/repo.vim"
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

not found in runtime path: "autoload/vital/_gina/Git.vim"
function <SNR>251__get_reference(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 139
function <SNR>251_relpath(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 76
function <SNR>251__vital_loaded(V) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 1
function <SNR>251__get_reference_trad(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 147
function <SNR>251_abspath(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 68
function <SNR>251_ref(git, refname) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 102
function <SNR>251_new(path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 17
function <SNR>251__vital_depends() abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 8
function <SNR>251__get_packed_refs(git) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 124
function <SNR>251_resolve(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 87
function <SNR>251__get_reference_packed(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 168
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component/repo.vim
continuing in <SNR>135_config_gina_branch
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/coc)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/coc/highlight.vim"
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/coc/highlight.vim
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 3: sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component/repo.vim"
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

not found in runtime path: "autoload/vital/_gina/Git.vim"
function <SNR>251__get_reference(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 139
function <SNR>251_relpath(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 76
function <SNR>251__vital_loaded(V) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 1
function <SNR>251__get_reference_trad(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 147
function <SNR>251_abspath(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 68
function <SNR>251_ref(git, refname) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 102
function <SNR>251_new(path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 17
function <SNR>251__vital_depends() abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 8
function <SNR>251__get_packed_refs(git) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 124
function <SNR>251_resolve(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 87
function <SNR>251__get_reference_packed(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 168
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component/repo.vim
continuing in <SNR>135_config_gina_branch
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 3: sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component/repo.vim"
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

not found in runtime path: "autoload/vital/_gina/Git.vim"
function <SNR>251__get_reference(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 139
function <SNR>251_relpath(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 76
function <SNR>251__vital_loaded(V) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 1
function <SNR>251__get_reference_trad(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 147
function <SNR>251_abspath(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 68
function <SNR>251_ref(git, refname) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 102
function <SNR>251_new(path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 17
function <SNR>251__vital_depends() abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 8
function <SNR>251__get_packed_refs(git) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 124
function <SNR>251_resolve(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 87
function <SNR>251__get_reference_packed(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 168
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component/repo.vim
continuing in <SNR>135_config_gina_branch
Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()


Executing WinLeave Autocommands for "*"
autocommand call s:Autocmd('WinLeave', win_getid())

Executing WinLeave Autocommands for "*"
autocommand call s:Remove_Matches()

Executing WinEnter Autocommands for "*"
autocommand call s:dopopd()

Executing WinEnter Autocommands for "*"
autocommand call <sid>on_window_changed('WinEnter')

Executing WinEnter Autocommands for "*"
autocommand call coc#float#nvim_win_enter(win_getid())

autocommand call s:Autocmd('WinEnter', win_getid())

Executing WinEnter Autocommands for "*"
autocommand let g:fzf#vim#buffers[bufnr('')] = reltimefloat(reltime())

Executing WinEnter Autocommands for "*"
autocommand let s:tmux_is_last_pane = 0

Executing WinEnter Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing WinEnter Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing BufEnter Autocommands for "*"
autocommand set fo-=c fo-=r fo-=o

Executing BufEnter Autocommands for "*"
autocommand call s:Autocmd('BufEnter', +expand('<abuf>'))

Executing BufEnter Autocommands for "*"
autocommand if conflict_marker#detect#markers() | call s:on_detected() | endif

Executing BufEnter Autocommands for "*"
autocommand call s:mru_append(expand('<amatch>'))

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing User Autocommands for "AirlineModeChanged"
autocommand call airline#mode_changed()

Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/coc)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/coc/highlight.vim"
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/coc/highlight.vim
Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()


Executing WinLeave Autocommands for "*"
autocommand call s:Autocmd('WinLeave', win_getid())

Executing WinLeave Autocommands for "*"
autocommand call s:Remove_Matches()

Executing WinEnter Autocommands for "*"
autocommand call s:dopopd()

Executing WinEnter Autocommands for "*"
autocommand call <sid>on_window_changed('WinEnter')

Executing WinEnter Autocommands for "*"
autocommand call coc#float#nvim_win_enter(win_getid())

autocommand call s:Autocmd('WinEnter', win_getid())

Executing WinEnter Autocommands for "*"
autocommand let g:fzf#vim#buffers[bufnr('')] = reltimefloat(reltime())

Executing WinEnter Autocommands for "*"
autocommand let s:tmux_is_last_pane = 0

Executing WinEnter Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing WinEnter Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing BufEnter Autocommands for "*"
autocommand set fo-=c fo-=r fo-=o

Executing BufEnter Autocommands for "*"
autocommand call s:Autocmd('BufEnter', +expand('<abuf>'))

Executing BufEnter Autocommands for "*"
autocommand if conflict_marker#detect#markers() | call s:on_detected() | endif

Executing BufEnter Autocommands for "*"
autocommand call s:mru_append(expand('<amatch>'))

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing User Autocommands for "AirlineModeChanged"
autocommand call airline#mode_changed()

Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 3: sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component/repo.vim"
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

not found in runtime path: "autoload/vital/_gina/Git.vim"
function <SNR>251__get_reference(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 139
function <SNR>251_relpath(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 76
function <SNR>251__vital_loaded(V) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 1
function <SNR>251__get_reference_trad(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 147
function <SNR>251_abspath(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 68
function <SNR>251_ref(git, refname) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 102
function <SNR>251_new(path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 17
function <SNR>251__vital_depends() abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 8
function <SNR>251__get_packed_refs(git) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 124
function <SNR>251_resolve(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 87
function <SNR>251__get_reference_packed(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 168
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component/repo.vim
continuing in <SNR>135_config_gina_branch
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 3: sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component/repo.vim"
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

not found in runtime path: "autoload/vital/_gina/Git.vim"
function <SNR>251__get_reference(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 139
function <SNR>251_relpath(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 76
function <SNR>251__vital_loaded(V) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 1
function <SNR>251__get_reference_trad(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 147
function <SNR>251_abspath(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 68
function <SNR>251_ref(git, refname) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 102
function <SNR>251_new(path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 17
function <SNR>251__vital_depends() abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 8
function <SNR>251__get_packed_refs(git) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 124
function <SNR>251_resolve(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 87
function <SNR>251__get_reference_packed(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 168
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component/repo.vim
continuing in <SNR>135_config_gina_branch
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/coc)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/coc/highlight.vim"
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/coc/highlight.vim
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 3: sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component/repo.vim"
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

not found in runtime path: "autoload/vital/_gina/Git.vim"
function <SNR>251__get_reference(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 139
function <SNR>251_relpath(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 76
function <SNR>251__vital_loaded(V) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 1
function <SNR>251__get_reference_trad(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 147
function <SNR>251_abspath(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 68
function <SNR>251_ref(git, refname) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 102
function <SNR>251_new(path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 17
function <SNR>251__vital_depends() abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 8
function <SNR>251__get_packed_refs(git) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 124
function <SNR>251_resolve(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 87
function <SNR>251__get_reference_packed(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 168
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component/repo.vim
continuing in <SNR>135_config_gina_branch
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 3: sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component/repo.vim"
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

not found in runtime path: "autoload/vital/_gina/Git.vim"
function <SNR>251__get_reference(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 139
function <SNR>251_relpath(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 76
function <SNR>251__vital_loaded(V) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 1
function <SNR>251__get_reference_trad(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 147
function <SNR>251_abspath(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 68
function <SNR>251_ref(git, refname) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 102
function <SNR>251_new(path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 17
function <SNR>251__vital_depends() abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 8
function <SNR>251__get_packed_refs(git) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 124
function <SNR>251_resolve(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 87
function <SNR>251__get_reference_packed(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 168
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component/repo.vim
continuing in <SNR>135_config_gina_branch
Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()


Executing WinLeave Autocommands for "*"
autocommand call s:Autocmd('WinLeave', win_getid())

Executing WinLeave Autocommands for "*"
autocommand call s:Remove_Matches()

Executing WinEnter Autocommands for "*"
autocommand call s:dopopd()

Executing WinEnter Autocommands for "*"
autocommand call <sid>on_window_changed('WinEnter')

Executing WinEnter Autocommands for "*"
autocommand call coc#float#nvim_win_enter(win_getid())

autocommand call s:Autocmd('WinEnter', win_getid())

Executing WinEnter Autocommands for "*"
autocommand let g:fzf#vim#buffers[bufnr('')] = reltimefloat(reltime())

Executing WinEnter Autocommands for "*"
autocommand let s:tmux_is_last_pane = 0

Executing WinEnter Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing WinEnter Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing BufEnter Autocommands for "*"
autocommand set fo-=c fo-=r fo-=o

Executing BufEnter Autocommands for "*"
autocommand call s:Autocmd('BufEnter', +expand('<abuf>'))

Executing BufEnter Autocommands for "*"
autocommand if conflict_marker#detect#markers() | call s:on_detected() | endif

Executing BufEnter Autocommands for "*"
autocommand call s:mru_append(expand('<amatch>'))

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing User Autocommands for "AirlineModeChanged"
autocommand call airline#mode_changed()

Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/coc)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/coc/highlight.vim"
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/coc/highlight.vim
Executing CursorHold Autocommands for "*"
autocommand silent call CocActionAsync('highlight')

autocommand silent call CocActionAsync('highlight')

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()


Executing command: "'/bin/zsh' '-c' 'tmux -S /private/tmp/tmux-501/default select-pane -t '%77' -D'"


Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()


Executing command: "'/bin/zsh' '-c' 'tmux -S /private/tmp/tmux-501/default select-pane -t '%77' -D'"


Executing CursorHold Autocommands for "*"
autocommand silent call CocActionAsync('highlight')

autocommand silent call CocActionAsync('highlight')

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()


Executing command: "'/bin/zsh' '-c' 'tmux -S /private/tmp/tmux-501/default select-pane -t '%77' -D'"


Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()


Executing command: "'/bin/zsh' '-c' 'tmux -S /private/tmp/tmux-501/default select-pane -t '%77' -D'"


Executing CursorHold Autocommands for "*"
autocommand silent call CocActionAsync('highlight')

autocommand silent call CocActionAsync('highlight')

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()


Executing command: "'/bin/zsh' '-c' 'tmux -S /private/tmp/tmux-501/default select-pane -t '%77' -D'"


Executing CursorHold Autocommands for "*"
autocommand silent call CocActionAsync('highlight')

autocommand silent call CocActionAsync('highlight')

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()


Executing WinLeave Autocommands for "*"
autocommand call s:Autocmd('WinLeave', win_getid())

Executing WinLeave Autocommands for "*"
autocommand call s:Remove_Matches()

Executing WinEnter Autocommands for "*"
autocommand call s:dopopd()

Executing WinEnter Autocommands for "*"
autocommand call <sid>on_window_changed('WinEnter')

Executing WinEnter Autocommands for "*"
autocommand call coc#float#nvim_win_enter(win_getid())

autocommand call s:Autocmd('WinEnter', win_getid())

Executing WinEnter Autocommands for "*"
autocommand let g:fzf#vim#buffers[bufnr('')] = reltimefloat(reltime())

Executing WinEnter Autocommands for "*"
autocommand let s:tmux_is_last_pane = 0

Executing WinEnter Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing WinEnter Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing BufEnter Autocommands for "*"
autocommand set fo-=c fo-=r fo-=o

Executing BufEnter Autocommands for "*"
autocommand call s:Autocmd('BufEnter', +expand('<abuf>'))

Executing BufEnter Autocommands for "*"
autocommand if conflict_marker#detect#markers() | call s:on_detected() | endif

Executing BufEnter Autocommands for "*"
autocommand call s:mru_append(expand('<amatch>'))

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing User Autocommands for "AirlineModeChanged"
autocommand call airline#mode_changed()

Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 3: sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component/repo.vim"
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

not found in runtime path: "autoload/vital/_gina/Git.vim"
function <SNR>251__get_reference(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 139
function <SNR>251_relpath(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 76
function <SNR>251__vital_loaded(V) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 1
function <SNR>251__get_reference_trad(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 147
function <SNR>251_abspath(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 68
function <SNR>251_ref(git, refname) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 102
function <SNR>251_new(path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 17
function <SNR>251__vital_depends() abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 8
function <SNR>251__get_packed_refs(git) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 124
function <SNR>251_resolve(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 87
function <SNR>251__get_reference_packed(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 168
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component/repo.vim
continuing in <SNR>135_config_gina_branch
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 3: sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component/repo.vim"
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

not found in runtime path: "autoload/vital/_gina/Git.vim"
function <SNR>251__get_reference(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 139
function <SNR>251_relpath(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 76
function <SNR>251__vital_loaded(V) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 1
function <SNR>251__get_reference_trad(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 147
function <SNR>251_abspath(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 68
function <SNR>251_ref(git, refname) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 102
function <SNR>251_new(path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 17
function <SNR>251__vital_depends() abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 8
function <SNR>251__get_packed_refs(git) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 124
function <SNR>251_resolve(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 87
function <SNR>251__get_reference_packed(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 168
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component/repo.vim
continuing in <SNR>135_config_gina_branch
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/coc)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/coc/highlight.vim"
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/coc/highlight.vim
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 3: sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component/repo.vim"
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

not found in runtime path: "autoload/vital/_gina/Git.vim"
function <SNR>251__get_reference(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 139
function <SNR>251_relpath(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 76
function <SNR>251__vital_loaded(V) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 1
function <SNR>251__get_reference_trad(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 147
function <SNR>251_abspath(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 68
function <SNR>251_ref(git, refname) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 102
function <SNR>251_new(path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 17
function <SNR>251__vital_depends() abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 8
function <SNR>251__get_packed_refs(git) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 124
function <SNR>251_resolve(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 87
function <SNR>251__get_reference_packed(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 168
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component/repo.vim
continuing in <SNR>135_config_gina_branch
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 3: sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component/repo.vim"
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

not found in runtime path: "autoload/vital/_gina/Git.vim"
function <SNR>251__get_reference(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 139
function <SNR>251_relpath(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 76
function <SNR>251__vital_loaded(V) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 1
function <SNR>251__get_reference_trad(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 147
function <SNR>251_abspath(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 68
function <SNR>251_ref(git, refname) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 102
function <SNR>251_new(path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 17
function <SNR>251__vital_depends() abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 8
function <SNR>251__get_packed_refs(git) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 124
function <SNR>251_resolve(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 87
function <SNR>251__get_reference_packed(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 168
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component/repo.vim
continuing in <SNR>135_config_gina_branch
Executing CursorHold Autocommands for "*"
autocommand silent call CocActionAsync('highlight')

autocommand silent call CocActionAsync('highlight')

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 3: sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component/repo.vim"
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

not found in runtime path: "autoload/vital/_gina/Git.vim"
function <SNR>251__get_reference(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 139
function <SNR>251_relpath(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 76
function <SNR>251__vital_loaded(V) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 1
function <SNR>251__get_reference_trad(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 147
function <SNR>251_abspath(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 68
function <SNR>251_ref(git, refname) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 102
function <SNR>251_new(path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 17
function <SNR>251__vital_depends() abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 8
function <SNR>251__get_packed_refs(git) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 124
function <SNR>251_resolve(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 87
function <SNR>251__get_reference_packed(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 168
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component/repo.vim
continuing in <SNR>135_config_gina_branch
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 3: sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component/repo.vim"
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

not found in runtime path: "autoload/vital/_gina/Git.vim"
function <SNR>251__get_reference(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 139
function <SNR>251_relpath(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 76
function <SNR>251__vital_loaded(V) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 1
function <SNR>251__get_reference_trad(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 147
function <SNR>251_abspath(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 68
function <SNR>251_ref(git, refname) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 102
function <SNR>251_new(path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 17
function <SNR>251__vital_depends() abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 8
function <SNR>251__get_packed_refs(git) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 124
function <SNR>251_resolve(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 87
function <SNR>251__get_reference_packed(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 168
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component/repo.vim
continuing in <SNR>135_config_gina_branch
Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()


Executing WinLeave Autocommands for "*"
autocommand call s:Autocmd('WinLeave', win_getid())

Executing WinLeave Autocommands for "*"
autocommand call s:Remove_Matches()

Executing WinEnter Autocommands for "*"
autocommand call s:dopopd()

Executing WinEnter Autocommands for "*"
autocommand call <sid>on_window_changed('WinEnter')

Executing WinEnter Autocommands for "*"
autocommand call coc#float#nvim_win_enter(win_getid())

autocommand call s:Autocmd('WinEnter', win_getid())

Executing WinEnter Autocommands for "*"
autocommand let g:fzf#vim#buffers[bufnr('')] = reltimefloat(reltime())

Executing WinEnter Autocommands for "*"
autocommand let s:tmux_is_last_pane = 0

Executing WinEnter Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing WinEnter Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing BufEnter Autocommands for "*"
autocommand set fo-=c fo-=r fo-=o

Executing BufEnter Autocommands for "*"
autocommand call s:Autocmd('BufEnter', +expand('<abuf>'))

Executing BufEnter Autocommands for "*"
autocommand if conflict_marker#detect#markers() | call s:on_detected() | endif

Executing BufEnter Autocommands for "*"
autocommand call s:mru_append(expand('<amatch>'))

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing User Autocommands for "AirlineModeChanged"
autocommand call airline#mode_changed()

Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/coc)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/coc/highlight.vim"
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/coc/highlight.vim
Executing CursorHold Autocommands for "*"
autocommand silent call CocActionAsync('highlight')

autocommand silent call CocActionAsync('highlight')

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()


Executing WinLeave Autocommands for "*"
autocommand call s:Autocmd('WinLeave', win_getid())

Executing WinLeave Autocommands for "*"
autocommand call s:Remove_Matches()

Executing WinEnter Autocommands for "*"
autocommand call s:dopopd()

Executing WinEnter Autocommands for "*"
autocommand call <sid>on_window_changed('WinEnter')

Executing WinEnter Autocommands for "*"
autocommand call coc#float#nvim_win_enter(win_getid())

autocommand call s:Autocmd('WinEnter', win_getid())

Executing WinEnter Autocommands for "*"
autocommand let g:fzf#vim#buffers[bufnr('')] = reltimefloat(reltime())

Executing WinEnter Autocommands for "*"
autocommand let s:tmux_is_last_pane = 0

Executing WinEnter Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing WinEnter Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing BufEnter Autocommands for "*"
autocommand set fo-=c fo-=r fo-=o

Executing BufEnter Autocommands for "*"
autocommand call s:Autocmd('BufEnter', +expand('<abuf>'))

Executing BufEnter Autocommands for "*"
autocommand if conflict_marker#detect#markers() | call s:on_detected() | endif

Executing BufEnter Autocommands for "*"
autocommand call s:mru_append(expand('<amatch>'))

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing User Autocommands for "AirlineModeChanged"
autocommand call airline#mode_changed()

Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 3: sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component/repo.vim"
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

not found in runtime path: "autoload/vital/_gina/Git.vim"
function <SNR>251__get_reference(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 139
function <SNR>251_relpath(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 76
function <SNR>251__vital_loaded(V) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 1
function <SNR>251__get_reference_trad(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 147
function <SNR>251_abspath(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 68
function <SNR>251_ref(git, refname) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 102
function <SNR>251_new(path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 17
function <SNR>251__vital_depends() abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 8
function <SNR>251__get_packed_refs(git) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 124
function <SNR>251_resolve(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 87
function <SNR>251__get_reference_packed(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 168
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component/repo.vim
continuing in <SNR>135_config_gina_branch
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 3: sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component/repo.vim"
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

not found in runtime path: "autoload/vital/_gina/Git.vim"
function <SNR>251__get_reference(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 139
function <SNR>251_relpath(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 76
function <SNR>251__vital_loaded(V) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 1
function <SNR>251__get_reference_trad(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 147
function <SNR>251_abspath(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 68
function <SNR>251_ref(git, refname) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 102
function <SNR>251_new(path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 17
function <SNR>251__vital_depends() abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 8
function <SNR>251__get_packed_refs(git) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 124
function <SNR>251_resolve(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 87
function <SNR>251__get_reference_packed(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 168
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component/repo.vim
continuing in <SNR>135_config_gina_branch
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/coc)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/coc/highlight.vim"
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/coc/highlight.vim
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 3: sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component/repo.vim"
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

not found in runtime path: "autoload/vital/_gina/Git.vim"
function <SNR>251__get_reference(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 139
function <SNR>251_relpath(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 76
function <SNR>251__vital_loaded(V) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 1
function <SNR>251__get_reference_trad(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 147
function <SNR>251_abspath(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 68
function <SNR>251_ref(git, refname) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 102
function <SNR>251_new(path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 17
function <SNR>251__vital_depends() abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 8
function <SNR>251__get_packed_refs(git) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 124
function <SNR>251_resolve(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 87
function <SNR>251__get_reference_packed(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 168
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component/repo.vim
continuing in <SNR>135_config_gina_branch
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 3: sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component/repo.vim"
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

not found in runtime path: "autoload/vital/_gina/Git.vim"
function <SNR>251__get_reference(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 139
function <SNR>251_relpath(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 76
function <SNR>251__vital_loaded(V) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 1
function <SNR>251__get_reference_trad(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 147
function <SNR>251_abspath(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 68
function <SNR>251_ref(git, refname) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 102
function <SNR>251_new(path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 17
function <SNR>251__vital_depends() abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 8
function <SNR>251__get_packed_refs(git) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 124
function <SNR>251_resolve(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 87
function <SNR>251__get_reference_packed(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 168
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component/repo.vim
continuing in <SNR>135_config_gina_branch
Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()


Executing WinLeave Autocommands for "*"
autocommand call s:Autocmd('WinLeave', win_getid())

Executing WinLeave Autocommands for "*"
autocommand call s:Remove_Matches()

Executing WinEnter Autocommands for "*"
autocommand call s:dopopd()

Executing WinEnter Autocommands for "*"
autocommand call <sid>on_window_changed('WinEnter')

Executing WinEnter Autocommands for "*"
autocommand call coc#float#nvim_win_enter(win_getid())

autocommand call s:Autocmd('WinEnter', win_getid())

Executing WinEnter Autocommands for "*"
autocommand let g:fzf#vim#buffers[bufnr('')] = reltimefloat(reltime())

Executing WinEnter Autocommands for "*"
autocommand let s:tmux_is_last_pane = 0

Executing WinEnter Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing WinEnter Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing BufEnter Autocommands for "*"
autocommand set fo-=c fo-=r fo-=o

Executing BufEnter Autocommands for "*"
autocommand call s:Autocmd('BufEnter', +expand('<abuf>'))

Executing BufEnter Autocommands for "*"
autocommand if conflict_marker#detect#markers() | call s:on_detected() | endif

Executing BufEnter Autocommands for "*"
autocommand call s:mru_append(expand('<amatch>'))

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing User Autocommands for "AirlineModeChanged"
autocommand call airline#mode_changed()

Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/coc)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/coc/highlight.vim"
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/coc/highlight.vim
Executing CursorHold Autocommands for "*"
autocommand silent call CocActionAsync('highlight')

autocommand silent call CocActionAsync('highlight')

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorHold Autocommands for "*"
autocommand silent call CocActionAsync('highlight')

autocommand silent call CocActionAsync('highlight')

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorHold Autocommands for "*"
autocommand silent call CocActionAsync('highlight')

autocommand silent call CocActionAsync('highlight')

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorHold Autocommands for "*"
autocommand silent call CocActionAsync('highlight')

autocommand silent call CocActionAsync('highlight')

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorHold Autocommands for "*"
autocommand silent call CocActionAsync('highlight')

autocommand silent call CocActionAsync('highlight')

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorHold Autocommands for "*"
autocommand silent call CocActionAsync('highlight')

autocommand silent call CocActionAsync('highlight')

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorHold Autocommands for "*"
autocommand silent call CocActionAsync('highlight')

autocommand silent call CocActionAsync('highlight')

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorHold Autocommands for "*"
autocommand silent call CocActionAsync('highlight')

autocommand silent call CocActionAsync('highlight')

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorHold Autocommands for "*"
autocommand silent call CocActionAsync('highlight')

autocommand silent call CocActionAsync('highlight')

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing WinScrolled Autocommands for "*"
autocommand call s:HandleWinScrolled(+expand('<amatch>'))

Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing WinScrolled Autocommands for "*"
autocommand call s:HandleWinScrolled(+expand('<amatch>'))

Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing WinScrolled Autocommands for "*"
autocommand call s:HandleWinScrolled(+expand('<amatch>'))

Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorHold Autocommands for "*"
autocommand silent call CocActionAsync('highlight')

autocommand silent call CocActionAsync('highlight')

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing WinScrolled Autocommands for "*"
autocommand call s:HandleWinScrolled(+expand('<amatch>'))

Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing WinScrolled Autocommands for "*"
autocommand call s:HandleWinScrolled(+expand('<amatch>'))

Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing WinScrolled Autocommands for "*"
autocommand call s:HandleWinScrolled(+expand('<amatch>'))

Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorHold Autocommands for "*"
autocommand silent call CocActionAsync('highlight')

autocommand silent call CocActionAsync('highlight')

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing WinScrolled Autocommands for "*"
autocommand call s:HandleWinScrolled(+expand('<amatch>'))

Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorHold Autocommands for "*"
autocommand silent call CocActionAsync('highlight')

autocommand silent call CocActionAsync('highlight')

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing WinScrolled Autocommands for "*"
autocommand call s:HandleWinScrolled(+expand('<amatch>'))

Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing WinScrolled Autocommands for "*"
autocommand call s:HandleWinScrolled(+expand('<amatch>'))

Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorHold Autocommands for "*"
autocommand silent call CocActionAsync('highlight')

autocommand silent call CocActionAsync('highlight')

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing WinScrolled Autocommands for "*"
autocommand call s:HandleWinScrolled(+expand('<amatch>'))

Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing WinScrolled Autocommands for "*"
autocommand call s:HandleWinScrolled(+expand('<amatch>'))

Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing WinScrolled Autocommands for "*"
autocommand call s:HandleWinScrolled(+expand('<amatch>'))

Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing WinScrolled Autocommands for "*"
autocommand call s:HandleWinScrolled(+expand('<amatch>'))

Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing WinScrolled Autocommands for "*"
autocommand call s:HandleWinScrolled(+expand('<amatch>'))

Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorHold Autocommands for "*"
autocommand silent call CocActionAsync('highlight')

autocommand silent call CocActionAsync('highlight')

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing WinScrolled Autocommands for "*"
autocommand call s:HandleWinScrolled(+expand('<amatch>'))

Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing WinScrolled Autocommands for "*"
autocommand call s:HandleWinScrolled(+expand('<amatch>'))

Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing WinScrolled Autocommands for "*"
autocommand call s:HandleWinScrolled(+expand('<amatch>'))

Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing WinScrolled Autocommands for "*"
autocommand call s:HandleWinScrolled(+expand('<amatch>'))

Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing WinScrolled Autocommands for "*"
autocommand call s:HandleWinScrolled(+expand('<amatch>'))

Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorHold Autocommands for "*"
autocommand silent call CocActionAsync('highlight')

autocommand silent call CocActionAsync('highlight')

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing WinScrolled Autocommands for "*"
autocommand call s:HandleWinScrolled(+expand('<amatch>'))

Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing WinScrolled Autocommands for "*"
autocommand call s:HandleWinScrolled(+expand('<amatch>'))

Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing WinScrolled Autocommands for "*"
autocommand call s:HandleWinScrolled(+expand('<amatch>'))

Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing WinScrolled Autocommands for "*"
autocommand call s:HandleWinScrolled(+expand('<amatch>'))

Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing WinScrolled Autocommands for "*"
autocommand call s:HandleWinScrolled(+expand('<amatch>'))

Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing WinScrolled Autocommands for "*"
autocommand call s:HandleWinScrolled(+expand('<amatch>'))

Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing WinScrolled Autocommands for "*"
autocommand call s:HandleWinScrolled(+expand('<amatch>'))

Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorHold Autocommands for "*"
autocommand silent call CocActionAsync('highlight')

autocommand silent call CocActionAsync('highlight')

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing WinScrolled Autocommands for "*"
autocommand call s:HandleWinScrolled(+expand('<amatch>'))

Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing WinScrolled Autocommands for "*"
autocommand call s:HandleWinScrolled(+expand('<amatch>'))

Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing WinScrolled Autocommands for "*"
autocommand call s:HandleWinScrolled(+expand('<amatch>'))

Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing WinScrolled Autocommands for "*"
autocommand call s:HandleWinScrolled(+expand('<amatch>'))

Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorHold Autocommands for "*"
autocommand silent call CocActionAsync('highlight')

autocommand silent call CocActionAsync('highlight')

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing WinScrolled Autocommands for "*"
autocommand call s:HandleWinScrolled(+expand('<amatch>'))

Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing WinScrolled Autocommands for "*"
autocommand call s:HandleWinScrolled(+expand('<amatch>'))

Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing WinScrolled Autocommands for "*"
autocommand call s:HandleWinScrolled(+expand('<amatch>'))

Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing WinScrolled Autocommands for "*"
autocommand call s:HandleWinScrolled(+expand('<amatch>'))

Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorHold Autocommands for "*"
autocommand silent call CocActionAsync('highlight')

autocommand silent call CocActionAsync('highlight')

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing WinScrolled Autocommands for "*"
autocommand call s:HandleWinScrolled(+expand('<amatch>'))

Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing WinScrolled Autocommands for "*"
autocommand call s:HandleWinScrolled(+expand('<amatch>'))

Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing WinScrolled Autocommands for "*"
autocommand call s:HandleWinScrolled(+expand('<amatch>'))

Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorHold Autocommands for "*"
autocommand silent call CocActionAsync('highlight')

autocommand silent call CocActionAsync('highlight')

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()


Executing BufWritePre Autocommands for "*"
autocommand call s:SyncAutocmd('BufWritePre', +expand('<abuf>'), bufname(+expand('<abuf>')), getbufvar(+expand('<abuf>'), 'changedtick'))

"index.cpp" 
"index.cpp" 52L, 964B written
Executing BufWritePost Autocommands for "*"
autocommand call s:Autocmd('BufWritePost', +expand('<abuf>'), getbufvar(+expand('<abuf>'), 'changedtick'))

Executing BufWritePost Autocommands for "*"
autocommand call s:reset_untracked_cache(0)

Executing BufWritePost Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing BufWritePost Autocommands for "*"
autocommand call s:mru_append(expand('<amatch>'))

autocommand call s:mrw_append(expand('<amatch>'))

"index.cpp" 52L, 964B written
Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing WinScrolled Autocommands for "*"
autocommand call s:HandleWinScrolled(+expand('<amatch>'))

Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing WinScrolled Autocommands for "*"
autocommand call s:HandleWinScrolled(+expand('<amatch>'))

Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing WinScrolled Autocommands for "*"
autocommand call s:HandleWinScrolled(+expand('<amatch>'))

Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing WinScrolled Autocommands for "*"
autocommand call s:HandleWinScrolled(+expand('<amatch>'))

Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing WinScrolled Autocommands for "*"
autocommand call s:HandleWinScrolled(+expand('<amatch>'))

Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing WinScrolled Autocommands for "*"
autocommand call s:HandleWinScrolled(+expand('<amatch>'))

Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing WinScrolled Autocommands for "*"
autocommand call s:HandleWinScrolled(+expand('<amatch>'))

Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing WinScrolled Autocommands for "*"
autocommand call s:HandleWinScrolled(+expand('<amatch>'))

Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing WinScrolled Autocommands for "*"
autocommand call s:HandleWinScrolled(+expand('<amatch>'))

Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing WinScrolled Autocommands for "*"
autocommand call s:HandleWinScrolled(+expand('<amatch>'))

Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing WinScrolled Autocommands for "*"
autocommand call s:HandleWinScrolled(+expand('<amatch>'))

Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing WinScrolled Autocommands for "*"
autocommand call s:HandleWinScrolled(+expand('<amatch>'))

Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing WinScrolled Autocommands for "*"
autocommand call s:HandleWinScrolled(+expand('<amatch>'))

Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing WinScrolled Autocommands for "*"
autocommand call s:HandleWinScrolled(+expand('<amatch>'))

Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing WinScrolled Autocommands for "*"
autocommand call s:HandleWinScrolled(+expand('<amatch>'))

Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing WinScrolled Autocommands for "*"
autocommand call s:HandleWinScrolled(+expand('<amatch>'))

Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing WinScrolled Autocommands for "*"
autocommand call s:HandleWinScrolled(+expand('<amatch>'))

Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing WinScrolled Autocommands for "*"
autocommand call s:HandleWinScrolled(+expand('<amatch>'))

Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing WinScrolled Autocommands for "*"
autocommand call s:HandleWinScrolled(+expand('<amatch>'))

Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing WinScrolled Autocommands for "*"
autocommand call s:HandleWinScrolled(+expand('<amatch>'))

Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorHold Autocommands for "*"
autocommand silent call CocActionAsync('highlight')

autocommand silent call CocActionAsync('highlight')

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()


chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/fern/internal/command)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/fern/internal/command/fern.vim"
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/fern/internal/command/fern.vim
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/fern/internal)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 2: sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/fern/internal/args.vim"
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/fern/internal/args.vim
continuing in fern#internal#command#fern#command
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/fern)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 53: sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/fern/util.vim"
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/fern/util.vim
continuing in fern#internal#command#fern#command
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/fern/fri)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 54: sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/fern/fri/from.vim"
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/fern/fri/from.vim
continuing in fern#internal#command#fern#command
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/fern/internal)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 1: sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/fern/internal/filepath.vim"
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/fern/internal/filepath.vim
continuing in fern#fri#from#filepath
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/fern/internal)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 4: sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/fern/internal/path.vim"
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/fern/internal/path.vim
continuing in fern#fri#from#path
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/fern)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 5: sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/fern/fri.vim"
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/fern/fri.vim
continuing in fern#fri#from#path
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/fern)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 76: sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/fern/logger.vim"
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/fern/logger.vim
continuing in fern#internal#command#fern#command
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/fern/internal/command)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 83: sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/fern/internal/command/reveal.vim"
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/fern/internal/command/reveal.vim
continuing in fern#internal#command#fern#command
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/fern/internal)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 90: sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/fern/internal/drawer.vim"
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/fern/internal/drawer.vim
continuing in fern#internal#command#fern#command
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/fern/internal)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 4: sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/fern/internal/window.vim"
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/vital/_fern/App)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 3: sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/vital/_fern/App/WindowSelector.vim"
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/vital/_fern/App/WindowSelector.vim
continuing in <SNR>77__get_module
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/fern/internal/window.vim
continuing in <SNR>261_focus_next
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/fern/internal)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 17: sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/fern/internal/viewer.vim"
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/vital/_fern)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 3: sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/vital/_fern/Lambda.vim"
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/vital/_fern/Lambda.vim
continuing in <SNR>77__get_module
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/fern/internal/viewer.vim
continuing in fern#internal#drawer#open
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/fern/internal)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 1: sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/fern/internal/buffer.vim"
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/fern/internal/buffer.vim
continuing in <SNR>264_open
Executing WinLeave Autocommands for "*"
autocommand call s:Autocmd('WinLeave', win_getid())

Executing WinLeave Autocommands for "*"
autocommand call s:Remove_Matches()

Executing WinEnter Autocommands for "*"
autocommand call s:dopopd()

Executing WinEnter Autocommands for "*"
autocommand call <sid>on_window_changed('WinEnter')

Executing WinEnter Autocommands for "*"
autocommand call coc#float#nvim_win_enter(win_getid())

autocommand call s:Autocmd('WinEnter', win_getid())

Executing WinEnter Autocommands for "*"
autocommand let g:fzf#vim#buffers[bufnr('')] = reltimefloat(reltime())

Executing WinEnter Autocommands for "*"
autocommand let s:tmux_is_last_pane = 0

Executing WinEnter Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing WinEnter Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing BufNew Autocommands for "*?"
autocommand call dein#autoload#_on_default_event('BufNew')

Executing BufReadCmd Autocommands for "fern://*"
autocommand call s:BufReadCmd()

Executing BufDelete Autocommands for "*"
autocommand silent! call remove(g:fzf#vim#buffers, expand('<abuf>'))

Error detected while processing function fern#internal#command#fern#command[90]..fern#internal#drawer#open[17]..fern#internal#viewer#open[3]..<SNR>156_new[5]..<SNR>264_open[1]..fern#internal#buffer#open[42]..BufReadCmd Autocommands for "fern://*"..function <SNR>73_BufReadCmd[4]..fern#internal#viewer#init[3]..<SNR>264_init[7]..BufDelete Autocommands for "*":
E716: Key not present in Dictionary: "86"
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/fern/internal/viewer)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 19: sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/fern/internal/viewer/auto_duplication.vim"
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/fern/internal/viewer/auto_duplication.vim
continuing in <SNR>264_init
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/fern/internal/viewer)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 20: sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/fern/internal/viewer/hide_cursor.vim"
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/fern/internal/viewer/hide_cursor.vim
continuing in <SNR>264_init
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/fern/internal)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 35: sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/fern/internal/scheme.vim"
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/fern/internal/scheme.vim
continuing in <SNR>264_init
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/fern/scheme/file)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 2: sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/fern/scheme/file/provider.vim"
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/vital/_fern/Async)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 3: sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/vital/_fern/Async/Lambda.vim"
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/vital/_fern/Async/Lambda.vim
continuing in <SNR>77__get_module
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/vital/_fern/Data/List)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 3: sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/vital/_fern/Data/List/Chunker.vim"
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/vital/_fern/Data/List/Chunker.vim
continuing in <SNR>77__get_module
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/vital/_fern/Async/Promise)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 3: sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/vital/_fern/Async/Promise/Process.vim"
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/vital/_fern/Async/Promise/Process.vim
continuing in <SNR>77__get_module
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/vital/_fern/System)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 3: sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/vital/_fern/System/Job.vim"
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/vital/_fern/System/Job.vim
continuing in <SNR>77__get_module
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/vital/_fern/System/Job)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 3: sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/vital/_fern/System/Job/Neovim.vim"
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/vital/_fern/System/Job/Neovim.vim
continuing in <SNR>77__get_module
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/fern/scheme/file)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 127: sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/fern/scheme/file/util.vim"
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/fern/scheme/file/util.vim
continuing in /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/fern/scheme/file/provider.vim
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/fern/scheme/file/provider.vim
continuing in <SNR>269_call
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/fern/internal)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 40: sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/fern/internal/core.vim"
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/vital/_fern/Async)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 3: sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/vital/_fern/Async/CancellationTokenSource.vim"
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/vital/_fern/Async/CancellationTokenSource.vim
continuing in <SNR>77__get_module
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/fern/internal/core.vim
continuing in <SNR>264_init
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/fern/internal)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 7: sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/fern/internal/node.vim"
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/fern/internal/node.vim
continuing in fern#internal#core#new
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/fern/fri)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 4: sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/fern/fri/to.vim"
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/fern/fri/to.vim
continuing in <SNR>270_provider_get_root
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/fern/scheme)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 9: sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/fern/scheme/file.vim"
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/fern/scheme/file.vim
continuing in <SNR>270_provider_get_root
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/fern/renderer)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 3: sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/fern/renderer/nerdfont.vim"
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 78: sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/nerdfont.vim"
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/nerdfont.vim
continuing in /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/fern/renderer/nerdfont.vim
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/nerdfont/path)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 4: sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/nerdfont/path/pattern.vim"
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/nerdfont/path/pattern.vim
continuing in nerdfont#find
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/nerdfont/path)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 9: sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/nerdfont/path/basename.vim"
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/nerdfont/path/basename.vim
continuing in nerdfont#find
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/nerdfont/path)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 19: sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/nerdfont/path/extension.vim"
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/nerdfont/path/extension.vim
continuing in nerdfont#find
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/fern/renderer/nerdfont.vim
continuing in <SNR>277_get_renderer
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/fern/renderer)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 1: sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/fern/renderer/default.vim"
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/fern/renderer/default.vim
continuing in fern#renderer#nerdfont#new
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/fern/comparator)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 3: sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/fern/comparator/default.vim"
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/fern/comparator/default.vim
continuing in <SNR>277_get_comparator
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/fern)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 44: sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/fern/helper.vim"
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/fern/helper.vim
continuing in <SNR>264_init
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/fern/helper)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 11: sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/fern/helper/sync.vim"
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/vital/_fern/Vim/Window)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 3: sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/vital/_fern/Vim/Window/Cursor.vim"
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/vital/_fern/Vim/Window/Cursor.vim
continuing in <SNR>77__get_module
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/fern/helper/sync.vim
continuing in fern#helper#new
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/fern/helper)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 12: sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/fern/helper/async.vim"
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/fern/helper/async.vim
continuing in fern#helper#new
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/fern)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 47: sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/fern/mapping.vim"
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/fern/mapping.vim
continuing in <SNR>264_init
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/fern/mapping)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 3: sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/fern/mapping/diff.vim"
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/fern/mapping/diff.vim
continuing in fern#mapping#init
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/fern/mapping)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 3: sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/fern/mapping/drawer.vim"
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/fern/mapping/drawer.vim
continuing in fern#mapping#init
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/fern/mapping)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 3: sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/fern/mapping/filter.vim"
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/fern/mapping/filter.vim
continuing in fern#mapping#init
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/fern/mapping)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 3: sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/fern/mapping/mark.vim"
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/fern/mapping/mark.vim
continuing in fern#mapping#init
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/fern/mapping)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 3: sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/fern/mapping/node.vim"
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/fern/mapping/node.vim
continuing in fern#mapping#init
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/fern/mapping)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 3: sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/fern/mapping/open.vim"
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/fern/mapping/open.vim
continuing in fern#mapping#init
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/fern/mapping)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 3: sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/fern/mapping/tree.vim"
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/fern/mapping/tree.vim
continuing in fern#mapping#init
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/fern/mapping)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 3: sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/fern/mapping/wait.vim"
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/fern/mapping/wait.vim
continuing in fern#mapping#init
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/fern/mapping)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 3: sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/fern/mapping/yank.vim"
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/fern/mapping/yank.vim
continuing in fern#mapping#init
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/fern/scheme/file)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 2: sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/fern/scheme/file/mapping.vim"
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/fern/scheme/file/mapping.vim
continuing in <SNR>269_call
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/fern/scheme/file/mapping)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 2: sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/fern/scheme/file/mapping/cd.vim"
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/fern/scheme/file/mapping/cd.vim
continuing in <SNR>269_call
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/fern/scheme/file/mapping)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 2: sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/fern/scheme/file/mapping/clipboard.vim"
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/fern/scheme/file/mapping/clipboard.vim
continuing in <SNR>269_call
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/fern/scheme/file/mapping)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 2: sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/fern/scheme/file/mapping/ex.vim"
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/fern/scheme/file/mapping/ex.vim
continuing in <SNR>269_call
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/fern/scheme/file/mapping)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 2: sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/fern/scheme/file/mapping/grep.vim"
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/fern/scheme/file/mapping/grep.vim
continuing in <SNR>269_call
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/fern/scheme/file/mapping)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 2: sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/fern/scheme/file/mapping/rename.vim"
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/fern/scheme/file/mapping/rename.vim
continuing in <SNR>269_call
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/fern/scheme/file/mapping)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 2: sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/fern/scheme/file/mapping/system.vim"
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/fern/scheme/file/mapping/system.vim
continuing in <SNR>269_call
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/fern/scheme/file/mapping)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 2: sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/fern/scheme/file/mapping/terminal.vim"
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/fern/scheme/file/mapping/terminal.vim
continuing in <SNR>269_call
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/fern/scheme/file/mapping)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 2: sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/fern/scheme/file/mapping/yank.vim"
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/fern/scheme/file/mapping/yank.vim
continuing in <SNR>269_call
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/fern/internal/drawer)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 5: sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/fern/internal/drawer/auto_resize.vim"
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/fern/internal/drawer/auto_resize.vim
continuing in fern#internal#drawer#init
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/fern/internal/drawer)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 6: sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/fern/internal/drawer/auto_winfixwidth.vim"
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/fern/internal/drawer/auto_winfixwidth.vim
continuing in fern#internal#drawer#init
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/fern/internal/drawer)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 7: sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/fern/internal/drawer/auto_restore_focus.vim"
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/fern/internal/drawer/auto_restore_focus.vim
continuing in fern#internal#drawer#init
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/fern/internal/drawer)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 8: sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/fern/internal/drawer/smart_quit.vim"
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/fern/internal/drawer/smart_quit.vim
continuing in fern#internal#drawer#init
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/fern/internal/drawer)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 12: sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/fern/internal/drawer/hover_popup.vim"
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/fern/internal/drawer/hover_popup.vim
continuing in fern#internal#drawer#init
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/fern/internal)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 50: sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/fern/internal/spinner.vim"
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/vital/_fern/App)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 3: sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/vital/_fern/App/Spinner.vim"
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/vital/_fern/App/Spinner.vim
continuing in <SNR>77__get_module
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/fern/internal/spinner.vim
continuing in <SNR>264_init
Executing FileType Autocommands for "*"
autocommand call s:LoadFTPlugin()

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/ftplugin)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 17: sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/ftplugin/fern.vim"
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/ftplugin/fern.vim
continuing in <SNR>2_LoadFTPlugin
not found in runtime path: "ftplugin/fern.lua ftplugin/fern_*.lua ftplugin/fern/*.lua"
Executing FileType Autocommands for "*"
autocommand call s:LoadIndent()

not found in runtime path: "indent/fern.vim"
not found in runtime path: "indent/fern.lua"
Executing FileType Autocommands for "*?"
autocommand call dein#autoload#_on_default_event('FileType')

Executing FileType Autocommands for "fern"
autocommand call FernInit()

Executing FileType Autocommands for "*"
autocommand if !exists('b:ts_highlight') | 0verbose exe "set syntax=" . expand("<amatch>") | endif

Executing FileType Autocommands for "fern"
autocommand call glyph_palette#apply()

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 0: sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/glyph_palette.vim"
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/glyph_palette.vim
continuing in FileType Autocommands for "fern"
Error detected while processing function fern#internal#command#fern#command[90]..fern#internal#drawer#open[17]..fern#internal#viewer#open[3]..<SNR>156_new[5]..<SNR>264_open[1]..fern#internal#buffer#open[42]..BufReadCmd Autocommands for "fern://*"..function <SNR>73_BufReadCmd[4]..fern#internal#viewer#init[3]..<SNR>264_init[54]..FileType Autocommands for "fern"..function glyph_palette#apply[15]..<SNR>321_clear:
line    5:
E121: Undefined variable: w:glyph_palette_matches
Error detected while processing function fern#internal#command#fern#command[90]..fern#internal#drawer#open[17]..fern#internal#viewer#open[3]..<SNR>156_new[5]..<SNR>264_open[1]..fern#internal#buffer#open[42]..BufReadCmd Autocommands for "fern://*"..function <SNR>73_BufReadCmd[4]..fern#internal#viewer#init[3]..<SNR>264_init[54]..FileType Autocommands for "fern"..function glyph_palette#apply[15]..<SNR>321_clear:
line    5:
E116: Invalid arguments for function map
Error detected while processing function fern#internal#command#fern#command[90]..fern#internal#drawer#open[17]..fern#internal#viewer#open[3]..<SNR>156_new[5]..<SNR>264_open[1]..fern#internal#buffer#open[42]..BufReadCmd Autocommands for "fern://*"..function <SNR>73_BufReadCmd[4]..fern#internal#viewer#init[3]..<SNR>264_init[54]..FileType Autocommands for "fern"..function glyph_palette#apply[15]..<SNR>321_clear:
line    6:
E488: Trailing characters: :glyph_palette_palette
Error detected while processing function fern#internal#command#fern#command[90]..fern#internal#drawer#open[17]..fern#internal#viewer#open[3]..<SNR>156_new[5]..<SNR>264_open[1]..fern#internal#buffer#open[42]..BufReadCmd Autocommands for "fern://*"..function <SNR>73_BufReadCmd[4]..fern#internal#viewer#init[3]..<SNR>264_init[54]..FileType Autocommands for "fern"..function glyph_palette#apply[15]..<SNR>321_clear:
line    6:
E488: Trailing characters: :glyph_palette_palette
Executing FileType Autocommands for "*"
autocommand set fo-=c fo-=r fo-=o

autocommand set fo-=c fo-=r fo-=o " 改行時の自動コメントアウトを無効化する 

autocommand <Lua 22: ~/.cache/dein/repos/github.com/nvim-treesitter/nvim-treesitter/lua/nvim-treesitter/install.lua:431>

Executing FileType Autocommands for "*"
autocommand call <sid>on_window_changed('FileType')

Executing FileType Autocommands for "*"
autocommand call s:Autocmd('FileType', expand('<amatch>'), +expand('<abuf>'))

Executing FileType Autocommands for "*"
autocommand <Lua 23: ~/.cache/dein/repos/github.com/nvim-treesitter/nvim-treesitter/lua/nvim-treesitter/configs.lua:107>

Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/fern)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 55: sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/fern/action.vim"
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/vital/_fern/App)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 3: sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/vital/_fern/App/Action.vim"
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/vital/_fern/App/Action.vim
continuing in <SNR>77__get_module
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/fern/action.vim
continuing in <SNR>264_init

n  <Plug>(fern-action-help:all) *@:<C-U>call <SNR>323__map_help(1)<CR>
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/_fern/App/Action.vim line 54
n  <Plug>(fern-action-help) *@:<C-U>call <SNR>323__map_help(0)<CR>
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/_fern/App/Action.vim line 50
n  <Plug>(fern-action-repeat) *@:<C-U>call <SNR>323__map_repeat()<CR>
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/_fern/App/Action.vim line 46
n  <Plug>(fern-action-choice) *@:<C-U>call <SNR>323__map_choice()<CR>
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/_fern/App/Action.vim line 42
n  <Plug>(fern-action-yank:path) *@:<C-U>call <SNR>311_call('yank_path')<CR>
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/fern/scheme/file/mapping/yank.vim line 2
n  <Plug>(fern-action-terminal)  @<Plug>(fern-action-terminal:edit)
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/fern/scheme/file/mapping/terminal.vim line 31
n  <Plug>(fern-action-terminal:edit)  @<Plug>(fern-action-terminal:edit-or-error)
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/fern/scheme/file/mapping/terminal.vim line 30
n  <Plug>(fern-action-terminal:side)  @fern#smart#drawer(   "\<Plug>(fern-action-terminal:left)",   "\<Plug>(fern-action-terminal:right)", )
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/fern/scheme/file/mapping/terminal.vim line 22
n  <Plug>(fern-action-terminal:edit-or-tabedit) *@:<C-U>call <SNR>310_call('terminal', 'edit/tabedit')<CR>
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/fern/scheme/file/mapping/terminal.vim line 19
n  <Plug>(fern-action-terminal:edit-or-vsplit) *@:<C-U>call <SNR>310_call('terminal', 'edit/vsplit')<CR>
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/fern/scheme/file/mapping/terminal.vim line 18
n  <Plug>(fern-action-terminal:edit-or-split) *@:<C-U>call <SNR>310_call('terminal', 'edit/split')<CR>
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/fern/scheme/file/mapping/terminal.vim line 17
n  <Plug>(fern-action-terminal:edit-or-error) *@:<C-U>call <SNR>310_call('terminal', 'edit')<CR>
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/fern/scheme/file/mapping/terminal.vim line 16
n  <Plug>(fern-action-terminal:rightest) *@:<C-U>call <SNR>310_call('terminal', 'botright vsplit')<CR>
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/fern/scheme/file/mapping/terminal.vim line 15
n  <Plug>(fern-action-terminal:bottom) *@:<C-U>call <SNR>310_call('terminal', 'botright split')<CR>
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/fern/scheme/file/mapping/terminal.vim line 14
n  <Plug>(fern-action-terminal:leftest) *@:<C-U>call <SNR>310_call('terminal', 'topleft vsplit')<CR>
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/fern/scheme/file/mapping/terminal.vim line 13
n  <Plug>(fern-action-terminal:top) *@:<C-U>call <SNR>310_call('terminal', 'topleft split')<CR>
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/fern/scheme/file/mapping/terminal.vim line 12
n  <Plug>(fern-action-terminal:right) *@:<C-U>call <SNR>310_call('terminal', 'rightbelow vsplit')<CR>
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/fern/scheme/file/mapping/terminal.vim line 11
n  <Plug>(fern-action-terminal:below) *@:<C-U>call <SNR>310_call('terminal', 'rightbelow split')<CR>
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/fern/scheme/file/mapping/terminal.vim line 10
n  <Plug>(fern-action-terminal:left) *@:<C-U>call <SNR>310_call('terminal', 'leftabove vsplit')<CR>
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/fern/scheme/file/mapping/terminal.vim line 9
n  <Plug>(fern-action-terminal:above) *@:<C-U>call <SNR>310_call('terminal', 'leftabove split')<CR>
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/fern/scheme/file/mapping/terminal.vim line 8
n  <Plug>(fern-action-terminal:tabedit) *@:<C-U>call <SNR>310_call('terminal', 'tabedit')<CR>
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/fern/scheme/file/mapping/terminal.vim line 7
n  <Plug>(fern-action-terminal:vsplit) *@:<C-U>call <SNR>310_call('terminal', 'vsplit')<CR>
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/fern/scheme/file/mapping/terminal.vim line 6
n  <Plug>(fern-action-terminal:split) *@:<C-U>call <SNR>310_call('terminal', 'split')<CR>
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/fern/scheme/file/mapping/terminal.vim line 5
n  <Plug>(fern-action-terminal:select) *@:<C-U>call <SNR>310_call('terminal', 'select')<CR>
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/fern/scheme/file/mapping/terminal.vim line 4
n  <Plug>(fern-action-open:system) *@:<C-U>call <SNR>309_call('open_system')<CR>
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/fern/scheme/file/mapping/system.vim line 4
n  <Plug>(fern-action-rename)  @<Plug>(fern-action-rename:split)
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/fern/scheme/file/mapping/rename.vim line 24
n  <Plug>(fern-action-rename:edit)  @<Plug>(fern-action-rename:edit-or-error)
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/fern/scheme/file/mapping/rename.vim line 23
n  <Plug>(fern-action-rename:edit-or-tabedit) *@:<C-U>call <SNR>308_call('rename', 'edit/tabedit')<CR>
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/fern/scheme/file/mapping/rename.vim line 20
n  <Plug>(fern-action-rename:edit-or-vsplit) *@:<C-U>call <SNR>308_call('rename', 'edit/vsplit')<CR>
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/fern/scheme/file/mapping/rename.vim line 19
n  <Plug>(fern-action-rename:edit-or-split) *@:<C-U>call <SNR>308_call('rename', 'edit/split')<CR>
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/fern/scheme/file/mapping/rename.vim line 18
n  <Plug>(fern-action-rename:edit-or-error) *@:<C-U>call <SNR>308_call('rename', 'edit')<CR>
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/fern/scheme/file/mapping/rename.vim line 17
n  <Plug>(fern-action-rename:rightest) *@:<C-U>call <SNR>308_call('rename', 'botright vsplit')<CR>
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/fern/scheme/file/mapping/rename.vim line 16
n  <Plug>(fern-action-rename:bottom) *@:<C-U>call <SNR>308_call('rename', 'botright split')<CR>
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/fern/scheme/file/mapping/rename.vim line 15
n  <Plug>(fern-action-rename:leftest) *@:<C-U>call <SNR>308_call('rename', 'topleft vsplit')<CR>
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/fern/scheme/file/mapping/rename.vim line 14
n  <Plug>(fern-action-rename:top) *@:<C-U>call <SNR>308_call('rename', 'topleft split')<CR>
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/fern/scheme/file/mapping/rename.vim line 13
n  <Plug>(fern-action-rename:right) *@:<C-U>call <SNR>308_call('rename', 'rightbelow vsplit')<CR>
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/fern/scheme/file/mapping/rename.vim line 12
n  <Plug>(fern-action-rename:below) *@:<C-U>call <SNR>308_call('rename', 'rightbelow split')<CR>
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/fern/scheme/file/mapping/rename.vim line 11
n  <Plug>(fern-action-rename:left) *@:<C-U>call <SNR>308_call('rename', 'leftabove vsplit')<CR>
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/fern/scheme/file/mapping/rename.vim line 10
n  <Plug>(fern-action-rename:above) *@:<C-U>call <SNR>308_call('rename', 'leftabove split')<CR>
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/fern/scheme/file/mapping/rename.vim line 9
n  <Plug>(fern-action-rename:tabedit) *@:<C-U>call <SNR>308_call('rename', 'tabedit')<CR>
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/fern/scheme/file/mapping/rename.vim line 8
n  <Plug>(fern-action-rename:vsplit) *@:<C-U>call <SNR>308_call('rename', 'vsplit')<CR>
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/fern/scheme/file/mapping/rename.vim line 7
n  <Plug>(fern-action-rename:split) *@:<C-U>call <SNR>308_call('rename', 'split')<CR>
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/fern/scheme/file/mapping/rename.vim line 6
n  <Plug>(fern-action-rename:select) *@:<C-U>call <SNR>308_call('rename', 'select')<CR>
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/fern/scheme/file/mapping/rename.vim line 5
n  <Plug>(fern-action-grep=) *@:<C-U>call <SNR>307_call_without_guard('grep')<CR>
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/fern/scheme/file/mapping/grep.vim line 7
n  <Plug>(fern-action-grep) *@:<C-U>call <SNR>307_call('grep')<CR>
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/fern/scheme/file/mapping/grep.vim line 6
n  <Plug>(fern-action-ex=) *@:<C-U>call <SNR>306_call_without_guard('ex')<CR>
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/fern/scheme/file/mapping/ex.vim line 5
n  <Plug>(fern-action-ex) *@:<C-U>call <SNR>306_call('ex')<CR>
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/fern/scheme/file/mapping/ex.vim line 4
n  <Plug>(fern-action-clipboard-clear) *@:<C-U>call <SNR>305_call('clipboard_clear')<CR>
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/fern/scheme/file/mapping/clipboard.vim line 12
n  <Plug>(fern-action-clipboard-paste) *@:<C-U>call <SNR>305_call('clipboard_paste')<CR>
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/fern/scheme/file/mapping/clipboard.vim line 11
n  <Plug>(fern-action-clipboard-move) *@:<C-U>call <SNR>305_call('clipboard_move')<CR>
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/fern/scheme/file/mapping/clipboard.vim line 10
n  <Plug>(fern-action-clipboard-copy) *@:<C-U>call <SNR>305_call('clipboard_copy')<CR>
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/fern/scheme/file/mapping/clipboard.vim line 9
n  <Plug>(fern-action-tcd)  @<Plug>(fern-action-tcd:cursor)
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/fern/scheme/file/mapping/cd.vim line 13
n  <Plug>(fern-action-lcd)  @<Plug>(fern-action-lcd:cursor)
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/fern/scheme/file/mapping/cd.vim line 12
n  <Plug>(fern-action-cd)  @<Plug>(fern-action-cd:cursor)
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/fern/scheme/file/mapping/cd.vim line 11
n  <Plug>(fern-action-tcd:cursor) *@:<C-U>call <SNR>304_call('cd_cursor', 'tcd')<CR>
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/fern/scheme/file/mapping/cd.vim line 9
n  <Plug>(fern-action-lcd:cursor) *@:<C-U>call <SNR>304_call('cd_cursor', 'lcd')<CR>
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/fern/scheme/file/mapping/cd.vim line 8
n  <Plug>(fern-action-cd:cursor) *@:<C-U>call <SNR>304_call('cd_cursor', 'cd')<CR>
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/fern/scheme/file/mapping/cd.vim line 7
n  <Plug>(fern-action-tcd:root) *@:<C-U>call <SNR>304_call('cd_root', 'tcd')<CR>
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/fern/scheme/file/mapping/cd.vim line 6
n  <Plug>(fern-action-lcd:root) *@:<C-U>call <SNR>304_call('cd_root', 'lcd')<CR>
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/fern/scheme/file/mapping/cd.vim line 5
n  <Plug>(fern-action-cd:root) *@:<C-U>call <SNR>304_call('cd_root', 'cd')<CR>
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/fern/scheme/file/mapping/cd.vim line 4
n  <Plug>(fern-action-remove=) *@:<C-U>call <SNR>303_call_without_guard('remove')<CR>
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/fern/scheme/file/mapping.vim line 15
n  <Plug>(fern-action-remove) *@:<C-U>call <SNR>303_call('remove')<CR>
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/fern/scheme/file/mapping.vim line 14
n  <Plug>(fern-action-trash=) *@:<C-U>call <SNR>303_call_without_guard('trash')<CR>
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/fern/scheme/file/mapping.vim line 13
n  <Plug>(fern-action-trash) *@:<C-U>call <SNR>303_call('trash')<CR>
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/fern/scheme/file/mapping.vim line 12
n  <Plug>(fern-action-move) *@:<C-U>call <SNR>303_call('move')<CR>
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/fern/scheme/file/mapping.vim line 11
n  <Plug>(fern-action-copy) *@:<C-U>call <SNR>303_call('copy')<CR>
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/fern/scheme/file/mapping.vim line 10
n  <Plug>(fern-action-new-dir=) *@:<C-U>call <SNR>303_call_without_guard('new_dir')<CR>
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/fern/scheme/file/mapping.vim line 9
n  <Plug>(fern-action-new-file=) *@:<C-U>call <SNR>303_call_without_guard('new_file')<CR>
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/fern/scheme/file/mapping.vim line 8
n  <Plug>(fern-action-new-path=) *@:<C-U>call <SNR>303_call_without_guard('new_path')<CR>
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/fern/scheme/file/mapping.vim line 7
n  <Plug>(fern-action-new-dir) *@:<C-U>call <SNR>303_call('new_dir')<CR>
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/fern/scheme/file/mapping.vim line 6
n  <Plug>(fern-action-new-file) *@:<C-U>call <SNR>303_call('new_file')<CR>
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/fern/scheme/file/mapping.vim line 5
n  <Plug>(fern-action-new-path) *@:<C-U>call <SNR>303_call('new_path')<CR>
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/fern/scheme/file/mapping.vim line 4
n  <Plug>(fern-action-yank)  @<Plug>(fern-action-yank:path)
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/fern/scheme/file/mapping/yank.vim line 4
n  <Plug>(fern-action-yank:bufname) *@:<C-U>call <SNR>302_call('yank', 'bufname')<CR>
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/fern/mapping/yank.vim line 4
n  <Plug>(fern-action-yank:badge) *@:<C-U>call <SNR>302_call('yank', 'badge')<CR>
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/fern/mapping/yank.vim line 3
n  <Plug>(fern-action-yank:label) *@:<C-U>call <SNR>302_call('yank', 'label')<CR>
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/fern/mapping/yank.vim line 2
n  <Plug>(fern-action-redraw) *@:<C-U>call <SNR>300_call('redraw')<CR>
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/fern/mapping/tree.vim line 6
n  <Plug>(fern-action-cancel) *@:<C-U>call <SNR>300_call('cancel')<CR>
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/fern/mapping/tree.vim line 5
n  <Plug>(fern-action-open)  @<Plug>(fern-action-open:edit)
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/fern/mapping/open.vim line 45
n  <Plug>(fern-action-open:edit)  @<Plug>(fern-action-open:edit-or-error)
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/fern/mapping/open.vim line 44
n  <Plug>(fern-action-open-or-expand)  @fern#smart#leaf(   "\<Plug>(fern-action-open)",   "\<Plug>(fern-action-expand)", )
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/fern/mapping/open.vim line 36
n  <Plug>(fern-action-open-or-enter)  @fern#smart#leaf(   "\<Plug>(fern-action-open)",   "\<Plug>(fern-action-enter)", )
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/fern/mapping/open.vim line 30
n  <Plug>(fern-action-open:side)  @fern#smart#drawer(   "\<Plug>(fern-action-open:left)",   "\<Plug>(fern-action-open:right)",   "\<Plug>(fern-action-open:right)", )
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/fern/mapping/open.vim line 23
n  <Plug>(fern-action-open:edit-or-tabedit) *@:<C-U>call <SNR>299_call('open', 'edit/tabedit')<CR>
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/fern/mapping/open.vim line 20
n  <Plug>(fern-action-open:edit-or-vsplit) *@:<C-U>call <SNR>299_call('open', 'edit/vsplit')<CR>
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/fern/mapping/open.vim line 19
n  <Plug>(fern-action-open:edit-or-split) *@:<C-U>call <SNR>299_call('open', 'edit/split')<CR>
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/fern/mapping/open.vim line 18
n  <Plug>(fern-action-open:edit-or-error) *@:<C-U>call <SNR>299_call('open', 'edit')<CR>
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/fern/mapping/open.vim line 17
n  <Plug>(fern-action-open:drop) *@:<C-U>call <SNR>299_call('open', 'drop')<CR>
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/fern/mapping/open.vim line 16
n  <Plug>(fern-action-open:rightest) *@:<C-U>call <SNR>299_call('open', 'botright vsplit')<CR>
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/fern/mapping/open.vim line 15
n  <Plug>(fern-action-open:bottom) *@:<C-U>call <SNR>299_call('open', 'botright split')<CR>
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/fern/mapping/open.vim line 14
n  <Plug>(fern-action-open:leftest) *@:<C-U>call <SNR>299_call('open', 'topleft vsplit')<CR>
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/fern/mapping/open.vim line 13
n  <Plug>(fern-action-open:top) *@:<C-U>call <SNR>299_call('open', 'topleft split')<CR>
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/fern/mapping/open.vim line 12
n  <Plug>(fern-action-open:right) *@:<C-U>call <SNR>299_call('open', 'rightbelow vsplit')<CR>
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/fern/mapping/open.vim line 11
n  <Plug>(fern-action-open:below) *@:<C-U>call <SNR>299_call('open', 'rightbelow split')<CR>
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/fern/mapping/open.vim line 10
n  <Plug>(fern-action-open:left) *@:<C-U>call <SNR>299_call('open', 'leftabove vsplit')<CR>
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/fern/mapping/open.vim line 9
n  <Plug>(fern-action-open:above) *@:<C-U>call <SNR>299_call('open', 'leftabove split')<CR>
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/fern/mapping/open.vim line 8
n  <Plug>(fern-action-open:tabedit) *@:<C-U>call <SNR>299_call('open', 'tabedit')<CR>
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/fern/mapping/open.vim line 7
n  <Plug>(fern-action-open:vsplit) *@:<C-U>call <SNR>299_call('open', 'vsplit')<CR>
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/fern/mapping/open.vim line 6
n  <Plug>(fern-action-open:split) *@:<C-U>call <SNR>299_call('open', 'split')<CR>
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/fern/mapping/open.vim line 5
n  <Plug>(fern-action-open:select) *@:<C-U>call <SNR>299_call('open', 'select')<CR>
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/fern/mapping/open.vim line 4
n  <Plug>(fern-action-expand)  @<Plug>(fern-action-expand:in)
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/fern/mapping/node.vim line 19
n  <Plug>(fern-action-reload)  @<Plug>(fern-action-reload:all)
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/fern/mapping/node.vim line 18
n  <Plug>(fern-action-leave) *@:<C-U>call <SNR>298_call('leave')<CR>
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/fern/mapping/node.vim line 16
n  <Plug>(fern-action-enter) *@:<C-U>call <SNR>298_call('enter')<CR>
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/fern/mapping/node.vim line 15
n  <Plug>(fern-action-focus:parent) *@:<C-U>call <SNR>298_call('focus_parent')<CR>
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/fern/mapping/node.vim line 13
n  <Plug>(fern-action-reveal=) *@:<C-U>call <SNR>298_call_without_guard('reveal')<CR>
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/fern/mapping/node.vim line 12
n  <Plug>(fern-action-reveal) *@:<C-U>call <SNR>298_call('reveal')<CR>
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/fern/mapping/node.vim line 11
n  <Plug>(fern-action-collapse) *@:<C-U>call <SNR>298_call('collapse')<CR>
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/fern/mapping/node.vim line 10
n  <Plug>(fern-action-expand:in) *@:<C-U>call <SNR>298_call('expand_in')<CR>
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/fern/mapping/node.vim line 9
n  <Plug>(fern-action-expand:stay) *@:<C-U>call <SNR>298_call('expand_stay')<CR>
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/fern/mapping/node.vim line 8
n  <Plug>(fern-action-reload:cursor) *@:<C-U>call <SNR>298_call('reload_cursor')<CR>
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/fern/mapping/node.vim line 7
n  <Plug>(fern-action-reload:all) *@:<C-U>call <SNR>298_call('reload_all')<CR>
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/fern/mapping/node.vim line 6
n  <Plug>(fern-action-debug) *@:<C-U>call <SNR>298_call('debug')<CR>
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/fern/mapping/node.vim line 5
n  <Plug>(fern-action-mark)  @<Plug>(fern-action-mark:toggle)
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/fern/mapping/mark.vim line 13
n  <Plug>(fern-action-mark:toggle) *@:<C-U>call <SNR>297_call('mark_toggle')<CR>
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/fern/mapping/mark.vim line 7
n  <Plug>(fern-action-mark:unset *@:<C-U>call <SNR>297_call('mark_unset')<CR>
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/fern/mapping/mark.vim line 6
n  <Plug>(fern-action-mark:set) *@:<C-U>call <SNR>297_call('mark_set')<CR>
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/fern/mapping/mark.vim line 5
n  <Plug>(fern-action-mark:clear) *@:<C-U>call <SNR>297_call('mark_clear')<CR>
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/fern/mapping/mark.vim line 4
n  <Plug>(fern-action-hidden)  @<Plug>(fern-action-hidden:toggle)
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/fern/mapping/filter.vim line 11
n  <Plug>(fern-action-exclude=) *@:<C-U>call <SNR>296_call_without_guard('exclude')<CR>
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/fern/mapping/filter.vim line 8
n  <Plug>(fern-action-include=) *@:<C-U>call <SNR>296_call_without_guard('include')<CR>
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/fern/mapping/filter.vim line 7
n  <Plug>(fern-action-exclude) *@:<C-U>call <SNR>296_call('exclude')<CR>
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/fern/mapping/filter.vim line 6
n  <Plug>(fern-action-include) *@:<C-U>call <SNR>296_call('include')<CR>
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/fern/mapping/filter.vim line 5
n  <Plug>(fern-action-hidden:toggle) *@:<C-U>call <SNR>296_call('hidden_toggle')<CR>
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/fern/mapping/filter.vim line 4
n  <Plug>(fern-action-hidden:unset) *@:<C-U>call <SNR>296_call('hidden_unset')<CR>
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/fern/mapping/filter.vim line 3
n  <Plug>(fern-action-hidden:set) *@:<C-U>call <SNR>296_call('hidden_set')<CR>
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/fern/mapping/filter.vim line 2
n  <Plug>(fern-action-zoom:full)  @9<Plug>(fern-action-zoom)
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/fern/mapping/drawer.vim line 5
n  <Plug>(fern-action-zoom:half)  @4<Plug>(fern-action-zoom)
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/fern/mapping/drawer.vim line 4
n  <Plug>(fern-action-zoom:reset) *@:<C-U>call <SNR>295_call('zoom_reset')<CR>
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/fern/mapping/drawer.vim line 3
n  <Plug>(fern-action-zoom) *@:<C-U>call <SNR>295_call('zoom')<CR>
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/fern/mapping/drawer.vim line 2
n  <Plug>(fern-action-diff:vert)  @<Plug>(fern-action-diff:edit:vert)
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/fern/mapping/diff.vim line 57
n  <Plug>(fern-action-diff)  @<Plug>(fern-action-diff:edit)
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/fern/mapping/diff.vim line 56
n  <Plug>(fern-action-diff:edit:vert)  @<Plug>(fern-action-diff:edit-or-error:vert)
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/fern/mapping/diff.vim line 55
n  <Plug>(fern-action-diff:edit)  @<Plug>(fern-action-diff:edit-or-error)
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/fern/mapping/diff.vim line 54
n  <Plug>(fern-action-diff:side:vert)  @fern#smart#drawer(   "\<Plug>(fern-action-diff:left:vert)",   "\<Plug>(fern-action-diff:right:vert)", )
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/fern/mapping/diff.vim line 46
n  <Plug>(fern-action-diff:side)  @fern#smart#drawer(   "\<Plug>(fern-action-diff:left)",   "\<Plug>(fern-action-diff:right)", )
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/fern/mapping/diff.vim line 40
n  <Plug>(fern-action-diff:edit-or-tabedit:vert) *@:<C-U>call <SNR>294_call('diff', 'edit/tabedit', v:true)<CR>
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/fern/mapping/diff.vim line 37
n  <Plug>(fern-action-diff:edit-or-vsplit:vert) *@:<C-U>call <SNR>294_call('diff', 'edit/vsplit', v:true)<CR>
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/fern/mapping/diff.vim line 36
n  <Plug>(fern-action-diff:edit-or-split:vert) *@:<C-U>call <SNR>294_call('diff', 'edit/split', v:true)<CR>
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/fern/mapping/diff.vim line 35
n  <Plug>(fern-action-diff:edit-or-error:vert) *@:<C-U>call <SNR>294_call('diff', 'edit', v:true)<CR>
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/fern/mapping/diff.vim line 34
n  <Plug>(fern-action-diff:rightest:vert) *@:<C-U>call <SNR>294_call('diff', 'botright vsplit', v:true)<CR>
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/fern/mapping/diff.vim line 33
n  <Plug>(fern-action-diff:bottom:vert) *@:<C-U>call <SNR>294_call('diff', 'botright split', v:true)<CR>
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/fern/mapping/diff.vim line 32
n  <Plug>(fern-action-diff:leftest:vert) *@:<C-U>call <SNR>294_call('diff', 'topleft vsplit', v:true)<CR>
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/fern/mapping/diff.vim line 31
n  <Plug>(fern-action-diff:top:vert) *@:<C-U>call <SNR>294_call('diff', 'topleft split', v:true)<CR>
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/fern/mapping/diff.vim line 30
n  <Plug>(fern-action-diff:right:vert) *@:<C-U>call <SNR>294_call('diff', 'rightbelow vsplit', v:true)<CR>
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/fern/mapping/diff.vim line 29
n  <Plug>(fern-action-diff:below:vert) *@:<C-U>call <SNR>294_call('diff', 'rightbelow split', v:true)<CR>
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/fern/mapping/diff.vim line 28
n  <Plug>(fern-action-diff:left:vert) *@:<C-U>call <SNR>294_call('diff', 'leftabove vsplit', v:true)<CR>
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/fern/mapping/diff.vim line 27
n  <Plug>(fern-action-diff:above:vert) *@:<C-U>call <SNR>294_call('diff', 'leftabove split', v:true)<CR>
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/fern/mapping/diff.vim line 26
n  <Plug>(fern-action-diff:tabedit:vert) *@:<C-U>call <SNR>294_call('diff', 'tabedit', v:true)<CR>
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/fern/mapping/diff.vim line 25
n  <Plug>(fern-action-diff:vsplit:vert) *@:<C-U>call <SNR>294_call('diff', 'vsplit', v:true)<CR>
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/fern/mapping/diff.vim line 24
n  <Plug>(fern-action-diff:split:vert) *@:<C-U>call <SNR>294_call('diff', 'split', v:true)<CR>
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/fern/mapping/diff.vim line 23
n  <Plug>(fern-action-diff:select:vert) *@:<C-U>call <SNR>294_call('diff', 'select', v:true)<CR>
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/fern/mapping/diff.vim line 22
n  <Plug>(fern-action-diff:edit-or-tabedit) *@:<C-U>call <SNR>294_call('diff', 'edit/tabedit', v:false)<CR>
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/fern/mapping/diff.vim line 20
n  <Plug>(fern-action-diff:edit-or-vsplit) *@:<C-U>call <SNR>294_call('diff', 'edit/vsplit', v:false)<CR>
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/fern/mapping/diff.vim line 19
n  <Plug>(fern-action-diff:edit-or-split) *@:<C-U>call <SNR>294_call('diff', 'edit/split', v:false)<CR>
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/fern/mapping/diff.vim line 18
n  <Plug>(fern-action-diff:edit-or-error) *@:<C-U>call <SNR>294_call('diff', 'edit', v:false)<CR>
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/fern/mapping/diff.vim line 17
n  <Plug>(fern-action-diff:rightest) *@:<C-U>call <SNR>294_call('diff', 'botright vsplit', v:false)<CR>
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/fern/mapping/diff.vim line 16
n  <Plug>(fern-action-diff:bottom) *@:<C-U>call <SNR>294_call('diff', 'botright split', v:false)<CR>
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/fern/mapping/diff.vim line 15
n  <Plug>(fern-action-diff:leftest) *@:<C-U>call <SNR>294_call('diff', 'topleft vsplit', v:false)<CR>
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/fern/mapping/diff.vim line 14
n  <Plug>(fern-action-diff:top) *@:<C-U>call <SNR>294_call('diff', 'topleft split', v:false)<CR>
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/fern/mapping/diff.vim line 13
n  <Plug>(fern-action-diff:right) *@:<C-U>call <SNR>294_call('diff', 'rightbelow vsplit', v:false)<CR>
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/fern/mapping/diff.vim line 12
n  <Plug>(fern-action-diff:below) *@:<C-U>call <SNR>294_call('diff', 'rightbelow split', v:false)<CR>
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/fern/mapping/diff.vim line 11
n  <Plug>(fern-action-diff:left) *@:<C-U>call <SNR>294_call('diff', 'leftabove vsplit', v:false)<CR>
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/fern/mapping/diff.vim line 10
n  <Plug>(fern-action-diff:above) *@:<C-U>call <SNR>294_call('diff', 'leftabove split', v:false)<CR>
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/fern/mapping/diff.vim line 9
n  <Plug>(fern-action-diff:tabedit) *@:<C-U>call <SNR>294_call('diff', 'tabedit', v:false)<CR>
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/fern/mapping/diff.vim line 8
n  <Plug>(fern-action-diff:vsplit) *@:<C-U>call <SNR>294_call('diff', 'vsplit', v:false)<CR>
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/fern/mapping/diff.vim line 7
n  <Plug>(fern-action-diff:split) *@:<C-U>call <SNR>294_call('diff', 'split', v:false)<CR>
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/fern/mapping/diff.vim line 6
n  <Plug>(fern-action-diff:select) *@:<C-U>call <SNR>294_call('diff', 'select', v:false)<CR>
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/fern/mapping/diff.vim line 5
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/fern)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 57: sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/fern/profile.vim"
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/fern/profile.vim
continuing in <SNR>264_init
Executing BufEnter Autocommands for "*"
autocommand set fo-=c fo-=r fo-=o

Executing BufEnter Autocommands for "*"
autocommand call s:Autocmd('BufEnter', +expand('<abuf>'))

Executing BufEnter Autocommands for "*"
autocommand if conflict_marker#detect#markers() | call s:on_detected() | endif

Executing BufEnter Autocommands for "*"
autocommand call s:mru_append(expand('<amatch>'))

Executing BufEnter Autocommands for "<buffer=86>"
autocommand setlocal nobuflisted

Executing BufEnter Autocommands for "<buffer=86>"
autocommand call s:load_width()

Executing BufEnter Autocommands for "<buffer=86>"
autocommand call s:set_winfixwidth()

Executing BufEnter Autocommands for "<buffer=86>"
autocommand call s:smart_quit()

Executing BufEnter Autocommands for "<buffer=86>"
autocommand call s:apply()

Executing BufWinEnter Autocommands for "*"
autocommand call <sid>on_window_changed('BufWinEnter')

Executing BufWinEnter Autocommands for "*"
autocommand call s:Autocmd('BufWinEnter', +expand('<abuf>'), win_getid())

Executing BufWinEnter Autocommands for "*"
autocommand let g:fzf#vim#buffers[bufnr('')] = reltimefloat(reltime())

Executing BufWinEnter Autocommands for "*"
autocommand call s:mru_append(expand('<amatch>'))

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "<buffer=86>"
autocommand let b:fern_cursor = getcurpos()[1:2]

Executing CursorMoved Autocommands for "<buffer=86>"
autocommand call s:debounced_show()

Executing WinScrolled Autocommands for "*"
autocommand call s:HandleWinScrolled(+expand('<amatch>'))

Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/coc)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/coc/highlight.vim"
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/coc/highlight.vim
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/fern/internal)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 1: sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/fern/internal/mark.vim"
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/fern/internal/mark.vim
continuing in <lambda>1572
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/fern_git_status)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 16: sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/fern_git_status/investigator.vim"
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/fern_git_status/investigator.vim
continuing in <SNR>153_on_redraw
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/fern_git_status)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 10: sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/fern_git_status/process.vim"
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/fern_git_status/process.vim
continuing in <SNR>326_get_toplevel
Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "<buffer=86>"
autocommand let b:fern_cursor = getcurpos()[1:2]

Executing CursorMoved Autocommands for "<buffer=86>"
autocommand call s:debounced_show()

Executing TextChanged Autocommands for "*"
autocommand call s:Autocmd('TextChanged', +expand('<abuf>'), getbufvar(+expand('<abuf>'), 'changedtick'))

Executing TextChanged Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorHold Autocommands for "*"
autocommand silent call CocActionAsync('highlight')

autocommand silent call CocActionAsync('highlight')

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "<buffer=86>"
autocommand let b:fern_cursor = getcurpos()[1:2]

Executing CursorMoved Autocommands for "<buffer=86>"
autocommand call s:debounced_show()

Executing CursorHold Autocommands for "*"
autocommand silent call CocActionAsync('highlight')

autocommand silent call CocActionAsync('highlight')

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "<buffer=86>"
autocommand let b:fern_cursor = getcurpos()[1:2]

Executing CursorMoved Autocommands for "<buffer=86>"
autocommand call s:debounced_show()

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/fern)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/fern/smart.vim"
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/fern/smart.vim
Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()


Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/fern/internal)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 17: sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/fern/internal/locator.vim"
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/vital/_fern/App)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 3: sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/vital/_fern/App/WindowLocator.vim"
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/vital/_fern/App/WindowLocator.vim
continuing in <SNR>77__get_module
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/fern/internal/locator.vim
continuing in fern#internal#buffer#open
Executing BufLeave Autocommands for "<buffer=86>"
autocommand let b:fern_cursor = getcurpos()[1:2]

Executing BufLeave Autocommands for "<buffer=86>"
autocommand call s:hide()

Executing WinLeave Autocommands for "*"
autocommand call s:Autocmd('WinLeave', win_getid())

Executing WinLeave Autocommands for "*"
autocommand call s:Remove_Matches()

Executing WinLeave Autocommands for "<buffer=86>"
autocommand call s:save_width()

Executing WinLeave Autocommands for "<buffer=86>"
autocommand call s:auto_restore_focus_pre()

Executing WinEnter Autocommands for "*"
autocommand call s:dopopd()

Executing WinEnter Autocommands for "*"
autocommand call <sid>on_window_changed('WinEnter')

Executing WinEnter Autocommands for "*"
autocommand call coc#float#nvim_win_enter(win_getid())

autocommand call s:Autocmd('WinEnter', win_getid())

Executing WinEnter Autocommands for "*"
autocommand let g:fzf#vim#buffers[bufnr('')] = reltimefloat(reltime())

Executing WinEnter Autocommands for "*"
autocommand let s:tmux_is_last_pane = 0

Executing WinEnter Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing WinEnter Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing WinEnter Autocommands for "*"
autocommand call s:auto_restore_focus()

Executing BufEnter Autocommands for "*"
autocommand set fo-=c fo-=r fo-=o

Executing BufEnter Autocommands for "*"
autocommand call s:Autocmd('BufEnter', +expand('<abuf>'))

Executing BufEnter Autocommands for "*"
autocommand if conflict_marker#detect#markers() | call s:on_detected() | endif

Executing BufEnter Autocommands for "*"
autocommand call s:mru_append(expand('<amatch>'))

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
Executing BufWinLeave Autocommands for "*"
autocommand call s:Autocmd('BufWinLeave', +expand('<abuf>'), bufwinid(+expand('<abuf>')))

Executing BufHidden Autocommands for "*"
autocommand call s:Autocmd('BufHidden', +expand('<abuf>'))

Executing BufEnter Autocommands for "*"
autocommand set fo-=c fo-=r fo-=o

Executing BufEnter Autocommands for "*"
autocommand call s:Autocmd('BufEnter', +expand('<abuf>'))

Executing BufEnter Autocommands for "*"
autocommand if conflict_marker#detect#markers() | call s:on_detected() | endif

Executing BufEnter Autocommands for "*"
autocommand call s:mru_append(expand('<amatch>'))

Executing BufWinEnter Autocommands for "*"
autocommand call <sid>on_window_changed('BufWinEnter')

Executing BufWinEnter Autocommands for "*"
autocommand call s:Autocmd('BufWinEnter', +expand('<abuf>'), win_getid())

Executing BufWinEnter Autocommands for "*"
autocommand let g:fzf#vim#buffers[bufnr('')] = reltimefloat(reltime())

Executing BufWinEnter Autocommands for "*"
autocommand call s:mru_append(expand('<amatch>'))


Executing WinScrolled Autocommands for "*"
autocommand call s:HandleWinScrolled(+expand('<amatch>'))

Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()


Executing BufLeave Autocommands for "<buffer=86>"
autocommand let b:fern_cursor = getcurpos()[1:2]

Executing BufLeave Autocommands for "<buffer=86>"
autocommand call s:hide()

Executing WinLeave Autocommands for "*"
autocommand call s:Autocmd('WinLeave', win_getid())

Executing WinLeave Autocommands for "*"
autocommand call s:Remove_Matches()

Executing WinLeave Autocommands for "<buffer=86>"
autocommand call s:save_width()

Executing WinLeave Autocommands for "<buffer=86>"
autocommand call s:auto_restore_focus_pre()

Executing WinClosed Autocommands for "*"
autocommand call s:HandleWinClosed(+expand('<amatch>'))

Executing BufWinLeave Autocommands for "*"
autocommand call s:Autocmd('BufWinLeave', +expand('<abuf>'), bufwinid(+expand('<abuf>')))

Executing BufUnload Autocommands for "*"
autocommand call <sid>on_window_changed('BufUnload')

Executing BufUnload Autocommands for "*"
autocommand call s:Autocmd('BufUnload', +expand('<abuf>'))

Executing WinEnter Autocommands for "*"
autocommand call s:dopopd()

Executing WinEnter Autocommands for "*"
autocommand call <sid>on_window_changed('WinEnter')

Executing WinEnter Autocommands for "*"
autocommand call coc#float#nvim_win_enter(win_getid())

autocommand call s:Autocmd('WinEnter', win_getid())

Executing WinEnter Autocommands for "*"
autocommand let g:fzf#vim#buffers[bufnr('')] = reltimefloat(reltime())

Executing WinEnter Autocommands for "*"
autocommand let s:tmux_is_last_pane = 0

Executing WinEnter Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing WinEnter Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing WinEnter Autocommands for "*"
autocommand call s:auto_restore_focus()

Executing WinLeave Autocommands for "*"
autocommand call s:Autocmd('WinLeave', win_getid())

Executing WinLeave Autocommands for "*"
autocommand call s:Remove_Matches()

Executing WinEnter Autocommands for "*"
autocommand call s:dopopd()

Executing WinEnter Autocommands for "*"
autocommand call <sid>on_window_changed('WinEnter')

Executing WinEnter Autocommands for "*"
autocommand call coc#float#nvim_win_enter(win_getid())

autocommand call s:Autocmd('WinEnter', win_getid())

Executing WinEnter Autocommands for "*"
autocommand let g:fzf#vim#buffers[bufnr('')] = reltimefloat(reltime())

Executing WinEnter Autocommands for "*"
autocommand let s:tmux_is_last_pane = 0

Executing WinEnter Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing WinEnter Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing WinEnter Autocommands for "*"
autocommand call s:auto_restore_focus()

Executing BufEnter Autocommands for "*"
autocommand set fo-=c fo-=r fo-=o

Executing BufEnter Autocommands for "*"
autocommand call s:Autocmd('BufEnter', +expand('<abuf>'))

Executing BufEnter Autocommands for "*"
autocommand if conflict_marker#detect#markers() | call s:on_detected() | endif

Executing BufEnter Autocommands for "*"
autocommand call s:mru_append(expand('<amatch>'))

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing BufEnter Autocommands for "*"
autocommand set fo-=c fo-=r fo-=o

Executing BufEnter Autocommands for "*"
autocommand call s:Autocmd('BufEnter', +expand('<abuf>'))

Executing BufEnter Autocommands for "*"
autocommand if conflict_marker#detect#markers() | call s:on_detected() | endif

Executing BufEnter Autocommands for "*"
autocommand call s:mru_append(expand('<amatch>'))

Executing WinScrolled Autocommands for "*"
autocommand call s:HandleWinScrolled(+expand('<amatch>'))

Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/coc)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/coc/highlight.vim"
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/coc/highlight.vim
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/coc)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/coc/highlight.vim"
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/coc/highlight.vim
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/coc)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/coc/highlight.vim"
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/coc/highlight.vim
Executing CursorHold Autocommands for "*"
autocommand silent call CocActionAsync('highlight')

autocommand silent call CocActionAsync('highlight')

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorHold Autocommands for "*"
autocommand silent call CocActionAsync('highlight')

autocommand silent call CocActionAsync('highlight')

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorHold Autocommands for "*"
autocommand silent call CocActionAsync('highlight')

autocommand silent call CocActionAsync('highlight')

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing BufWinLeave Autocommands for "*"
autocommand call s:Autocmd('BufWinLeave', +expand('<abuf>'), bufwinid(+expand('<abuf>')))

Executing BufHidden Autocommands for "*"
autocommand call s:Autocmd('BufHidden', +expand('<abuf>'))

Executing BufEnter Autocommands for "*"
autocommand set fo-=c fo-=r fo-=o

Executing BufEnter Autocommands for "*"
autocommand call s:Autocmd('BufEnter', +expand('<abuf>'))

Executing BufEnter Autocommands for "*"
autocommand if conflict_marker#detect#markers() | call s:on_detected() | endif

Executing BufEnter Autocommands for "*"
autocommand call s:mru_append(expand('<amatch>'))

Executing BufWinEnter Autocommands for "*"
autocommand call <sid>on_window_changed('BufWinEnter')

Executing BufWinEnter Autocommands for "*"
autocommand call s:Autocmd('BufWinEnter', +expand('<abuf>'), win_getid())

Executing BufWinEnter Autocommands for "*"
autocommand let g:fzf#vim#buffers[bufnr('')] = reltimefloat(reltime())

Executing BufWinEnter Autocommands for "*"
autocommand call s:mru_append(expand('<amatch>'))


Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing WinScrolled Autocommands for "*"
autocommand call s:HandleWinScrolled(+expand('<amatch>'))

Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorHold Autocommands for "*"
autocommand silent call CocActionAsync('highlight')

autocommand silent call CocActionAsync('highlight')

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing WinScrolled Autocommands for "*"
autocommand call s:HandleWinScrolled(+expand('<amatch>'))

Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing WinScrolled Autocommands for "*"
autocommand call s:HandleWinScrolled(+expand('<amatch>'))

Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing WinScrolled Autocommands for "*"
autocommand call s:HandleWinScrolled(+expand('<amatch>'))

Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorHold Autocommands for "*"
autocommand silent call CocActionAsync('highlight')

autocommand silent call CocActionAsync('highlight')

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorHold Autocommands for "*"
autocommand silent call CocActionAsync('highlight')

autocommand silent call CocActionAsync('highlight')

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing WinScrolled Autocommands for "*"
autocommand call s:HandleWinScrolled(+expand('<amatch>'))

Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing WinScrolled Autocommands for "*"
autocommand call s:HandleWinScrolled(+expand('<amatch>'))

Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing WinScrolled Autocommands for "*"
autocommand call s:HandleWinScrolled(+expand('<amatch>'))

Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing WinScrolled Autocommands for "*"
autocommand call s:HandleWinScrolled(+expand('<amatch>'))

Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing WinScrolled Autocommands for "*"
autocommand call s:HandleWinScrolled(+expand('<amatch>'))

Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing WinScrolled Autocommands for "*"
autocommand call s:HandleWinScrolled(+expand('<amatch>'))

Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing WinScrolled Autocommands for "*"
autocommand call s:HandleWinScrolled(+expand('<amatch>'))

Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing WinScrolled Autocommands for "*"
autocommand call s:HandleWinScrolled(+expand('<amatch>'))

Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing WinScrolled Autocommands for "*"
autocommand call s:HandleWinScrolled(+expand('<amatch>'))

Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorHold Autocommands for "*"
autocommand silent call CocActionAsync('highlight')

autocommand silent call CocActionAsync('highlight')

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing WinScrolled Autocommands for "*"
autocommand call s:HandleWinScrolled(+expand('<amatch>'))

Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing WinScrolled Autocommands for "*"
autocommand call s:HandleWinScrolled(+expand('<amatch>'))

Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing WinScrolled Autocommands for "*"
autocommand call s:HandleWinScrolled(+expand('<amatch>'))

Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing WinScrolled Autocommands for "*"
autocommand call s:HandleWinScrolled(+expand('<amatch>'))

Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing WinScrolled Autocommands for "*"
autocommand call s:HandleWinScrolled(+expand('<amatch>'))

Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing WinScrolled Autocommands for "*"
autocommand call s:HandleWinScrolled(+expand('<amatch>'))

Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorHold Autocommands for "*"
autocommand silent call CocActionAsync('highlight')

autocommand silent call CocActionAsync('highlight')

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorHold Autocommands for "*"
autocommand silent call CocActionAsync('highlight')

autocommand silent call CocActionAsync('highlight')

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorHold Autocommands for "*"
autocommand silent call CocActionAsync('highlight')

autocommand silent call CocActionAsync('highlight')

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorHold Autocommands for "*"
autocommand silent call CocActionAsync('highlight')

autocommand silent call CocActionAsync('highlight')

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing WinScrolled Autocommands for "*"
autocommand call s:HandleWinScrolled(+expand('<amatch>'))

Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing WinScrolled Autocommands for "*"
autocommand call s:HandleWinScrolled(+expand('<amatch>'))

Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorHold Autocommands for "*"
autocommand silent call CocActionAsync('highlight')

autocommand silent call CocActionAsync('highlight')

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorHold Autocommands for "*"
autocommand silent call CocActionAsync('highlight')

autocommand silent call CocActionAsync('highlight')

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorHold Autocommands for "*"
autocommand silent call CocActionAsync('highlight')

autocommand silent call CocActionAsync('highlight')

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing WinScrolled Autocommands for "*"
autocommand call s:HandleWinScrolled(+expand('<amatch>'))

Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing WinScrolled Autocommands for "*"
autocommand call s:HandleWinScrolled(+expand('<amatch>'))

Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing WinScrolled Autocommands for "*"
autocommand call s:HandleWinScrolled(+expand('<amatch>'))

Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()


Executing BufWritePre Autocommands for "*"
autocommand call s:SyncAutocmd('BufWritePre', +expand('<abuf>'), bufname(+expand('<abuf>')), getbufvar(+expand('<abuf>'), 'changedtick'))

"index.cpp" 
"index.cpp" 52L, 964B written
Executing BufWritePost Autocommands for "*"
autocommand call s:Autocmd('BufWritePost', +expand('<abuf>'), getbufvar(+expand('<abuf>'), 'changedtick'))

Executing BufWritePost Autocommands for "*"
autocommand call s:reset_untracked_cache(0)

Executing BufWritePost Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing BufWritePost Autocommands for "*"
autocommand call s:mru_append(expand('<amatch>'))

autocommand call s:mrw_append(expand('<amatch>'))

"index.cpp" 52L, 964B written
Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing WinScrolled Autocommands for "*"
autocommand call s:HandleWinScrolled(+expand('<amatch>'))

Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing WinScrolled Autocommands for "*"
autocommand call s:HandleWinScrolled(+expand('<amatch>'))

Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing WinScrolled Autocommands for "*"
autocommand call s:HandleWinScrolled(+expand('<amatch>'))

Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing WinScrolled Autocommands for "*"
autocommand call s:HandleWinScrolled(+expand('<amatch>'))

Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing WinScrolled Autocommands for "*"
autocommand call s:HandleWinScrolled(+expand('<amatch>'))

Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing WinScrolled Autocommands for "*"
autocommand call s:HandleWinScrolled(+expand('<amatch>'))

Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing WinScrolled Autocommands for "*"
autocommand call s:HandleWinScrolled(+expand('<amatch>'))

Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing WinScrolled Autocommands for "*"
autocommand call s:HandleWinScrolled(+expand('<amatch>'))

Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing WinScrolled Autocommands for "*"
autocommand call s:HandleWinScrolled(+expand('<amatch>'))

Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorHold Autocommands for "*"
autocommand silent call CocActionAsync('highlight')

autocommand silent call CocActionAsync('highlight')

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorHold Autocommands for "*"
autocommand silent call CocActionAsync('highlight')

autocommand silent call CocActionAsync('highlight')

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing WinScrolled Autocommands for "*"
autocommand call s:HandleWinScrolled(+expand('<amatch>'))

Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing WinScrolled Autocommands for "*"
autocommand call s:HandleWinScrolled(+expand('<amatch>'))

Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing WinScrolled Autocommands for "*"
autocommand call s:HandleWinScrolled(+expand('<amatch>'))

Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing WinScrolled Autocommands for "*"
autocommand call s:HandleWinScrolled(+expand('<amatch>'))

Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorHold Autocommands for "*"
autocommand silent call CocActionAsync('highlight')

autocommand silent call CocActionAsync('highlight')

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing WinScrolled Autocommands for "*"
autocommand call s:HandleWinScrolled(+expand('<amatch>'))

Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing WinScrolled Autocommands for "*"
autocommand call s:HandleWinScrolled(+expand('<amatch>'))

Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorHold Autocommands for "*"
autocommand silent call CocActionAsync('highlight')

autocommand silent call CocActionAsync('highlight')

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorHold Autocommands for "*"
autocommand silent call CocActionAsync('highlight')

autocommand silent call CocActionAsync('highlight')

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorHold Autocommands for "*"
autocommand silent call CocActionAsync('highlight')

autocommand silent call CocActionAsync('highlight')

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorHold Autocommands for "*"
autocommand silent call CocActionAsync('highlight')

autocommand silent call CocActionAsync('highlight')

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing WinScrolled Autocommands for "*"
autocommand call s:HandleWinScrolled(+expand('<amatch>'))

Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing WinScrolled Autocommands for "*"
autocommand call s:HandleWinScrolled(+expand('<amatch>'))

Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing WinScrolled Autocommands for "*"
autocommand call s:HandleWinScrolled(+expand('<amatch>'))

Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing WinScrolled Autocommands for "*"
autocommand call s:HandleWinScrolled(+expand('<amatch>'))

Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing WinScrolled Autocommands for "*"
autocommand call s:HandleWinScrolled(+expand('<amatch>'))

Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorHold Autocommands for "*"
autocommand silent call CocActionAsync('highlight')

autocommand silent call CocActionAsync('highlight')

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing WinScrolled Autocommands for "*"
autocommand call s:HandleWinScrolled(+expand('<amatch>'))

Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing WinScrolled Autocommands for "*"
autocommand call s:HandleWinScrolled(+expand('<amatch>'))

Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing WinScrolled Autocommands for "*"
autocommand call s:HandleWinScrolled(+expand('<amatch>'))

Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing WinScrolled Autocommands for "*"
autocommand call s:HandleWinScrolled(+expand('<amatch>'))

Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorHold Autocommands for "*"
autocommand silent call CocActionAsync('highlight')

autocommand silent call CocActionAsync('highlight')

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()


Executing WinLeave Autocommands for "*"
autocommand call s:Autocmd('WinLeave', win_getid())

Executing WinLeave Autocommands for "*"
autocommand call s:Remove_Matches()

Executing WinEnter Autocommands for "*"
autocommand call s:dopopd()

Executing WinEnter Autocommands for "*"
autocommand call <sid>on_window_changed('WinEnter')

Executing WinEnter Autocommands for "*"
autocommand call coc#float#nvim_win_enter(win_getid())

autocommand call s:Autocmd('WinEnter', win_getid())

Executing WinEnter Autocommands for "*"
autocommand let g:fzf#vim#buffers[bufnr('')] = reltimefloat(reltime())

Executing WinEnter Autocommands for "*"
autocommand let s:tmux_is_last_pane = 0

Executing WinEnter Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing WinEnter Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing WinEnter Autocommands for "*"
autocommand call s:auto_restore_focus()

Executing BufEnter Autocommands for "*"
autocommand set fo-=c fo-=r fo-=o

Executing BufEnter Autocommands for "*"
autocommand call s:Autocmd('BufEnter', +expand('<abuf>'))

Executing BufEnter Autocommands for "*"
autocommand if conflict_marker#detect#markers() | call s:on_detected() | endif

Executing BufEnter Autocommands for "*"
autocommand call s:mru_append(expand('<amatch>'))

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing User Autocommands for "AirlineModeChanged"
autocommand call airline#mode_changed()

Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 3: sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component/repo.vim"
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

not found in runtime path: "autoload/vital/_gina/Git.vim"
function <SNR>251__get_reference(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 139
function <SNR>251_relpath(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 76
function <SNR>251__vital_loaded(V) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 1
function <SNR>251__get_reference_trad(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 147
function <SNR>251_abspath(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 68
function <SNR>251_ref(git, refname) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 102
function <SNR>251_new(path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 17
function <SNR>251__vital_depends() abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 8
function <SNR>251__get_packed_refs(git) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 124
function <SNR>251_resolve(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 87
function <SNR>251__get_reference_packed(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 168
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component/repo.vim
continuing in <SNR>135_config_gina_branch
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 3: sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component/repo.vim"
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

not found in runtime path: "autoload/vital/_gina/Git.vim"
function <SNR>251__get_reference(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 139
function <SNR>251_relpath(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 76
function <SNR>251__vital_loaded(V) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 1
function <SNR>251__get_reference_trad(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 147
function <SNR>251_abspath(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 68
function <SNR>251_ref(git, refname) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 102
function <SNR>251_new(path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 17
function <SNR>251__vital_depends() abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 8
function <SNR>251__get_packed_refs(git) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 124
function <SNR>251_resolve(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 87
function <SNR>251__get_reference_packed(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 168
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component/repo.vim
continuing in <SNR>135_config_gina_branch
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/coc)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/coc/highlight.vim"
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/coc/highlight.vim
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 3: sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component/repo.vim"
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

not found in runtime path: "autoload/vital/_gina/Git.vim"
function <SNR>251__get_reference(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 139
function <SNR>251_relpath(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 76
function <SNR>251__vital_loaded(V) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 1
function <SNR>251__get_reference_trad(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 147
function <SNR>251_abspath(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 68
function <SNR>251_ref(git, refname) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 102
function <SNR>251_new(path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 17
function <SNR>251__vital_depends() abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 8
function <SNR>251__get_packed_refs(git) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 124
function <SNR>251_resolve(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 87
function <SNR>251__get_reference_packed(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 168
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component/repo.vim
continuing in <SNR>135_config_gina_branch
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 3: sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component/repo.vim"
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

not found in runtime path: "autoload/vital/_gina/Git.vim"
function <SNR>251__get_reference(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 139
function <SNR>251_relpath(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 76
function <SNR>251__vital_loaded(V) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 1
function <SNR>251__get_reference_trad(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 147
function <SNR>251_abspath(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 68
function <SNR>251_ref(git, refname) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 102
function <SNR>251_new(path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 17
function <SNR>251__vital_depends() abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 8
function <SNR>251__get_packed_refs(git) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 124
function <SNR>251_resolve(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 87
function <SNR>251__get_reference_packed(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 168
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component/repo.vim
continuing in <SNR>135_config_gina_branch
Executing CursorHold Autocommands for "*"
autocommand silent call CocActionAsync('highlight')

autocommand silent call CocActionAsync('highlight')

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 3: sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component/repo.vim"
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

not found in runtime path: "autoload/vital/_gina/Git.vim"
function <SNR>251__get_reference(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 139
function <SNR>251_relpath(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 76
function <SNR>251__vital_loaded(V) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 1
function <SNR>251__get_reference_trad(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 147
function <SNR>251_abspath(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 68
function <SNR>251_ref(git, refname) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 102
function <SNR>251_new(path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 17
function <SNR>251__vital_depends() abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 8
function <SNR>251__get_packed_refs(git) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 124
function <SNR>251_resolve(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 87
function <SNR>251__get_reference_packed(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 168
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component/repo.vim
continuing in <SNR>135_config_gina_branch
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 3: sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component/repo.vim"
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

not found in runtime path: "autoload/vital/_gina/Git.vim"
function <SNR>251__get_reference(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 139
function <SNR>251_relpath(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 76
function <SNR>251__vital_loaded(V) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 1
function <SNR>251__get_reference_trad(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 147
function <SNR>251_abspath(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 68
function <SNR>251_ref(git, refname) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 102
function <SNR>251_new(path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 17
function <SNR>251__vital_depends() abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 8
function <SNR>251__get_packed_refs(git) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 124
function <SNR>251_resolve(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 87
function <SNR>251__get_reference_packed(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 168
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component/repo.vim
continuing in <SNR>135_config_gina_branch
Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()


Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 3: sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component/repo.vim"
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

not found in runtime path: "autoload/vital/_gina/Git.vim"
function <SNR>251__get_reference(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 139
function <SNR>251_relpath(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 76
function <SNR>251__vital_loaded(V) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 1
function <SNR>251__get_reference_trad(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 147
function <SNR>251_abspath(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 68
function <SNR>251_ref(git, refname) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 102
function <SNR>251_new(path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 17
function <SNR>251__vital_depends() abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 8
function <SNR>251__get_packed_refs(git) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 124
function <SNR>251_resolve(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 87
function <SNR>251__get_reference_packed(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 168
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component/repo.vim
continuing in <SNR>135_config_gina_branch
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 3: sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component/repo.vim"
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

not found in runtime path: "autoload/vital/_gina/Git.vim"
function <SNR>251__get_reference(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 139
function <SNR>251_relpath(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 76
function <SNR>251__vital_loaded(V) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 1
function <SNR>251__get_reference_trad(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 147
function <SNR>251_abspath(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 68
function <SNR>251_ref(git, refname) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 102
function <SNR>251_new(path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 17
function <SNR>251__vital_depends() abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 8
function <SNR>251__get_packed_refs(git) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 124
function <SNR>251_resolve(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 87
function <SNR>251__get_reference_packed(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 168
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component/repo.vim
continuing in <SNR>135_config_gina_branch
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 3: sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component/repo.vim"
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

not found in runtime path: "autoload/vital/_gina/Git.vim"
function <SNR>251__get_reference(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 139
function <SNR>251_relpath(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 76
function <SNR>251__vital_loaded(V) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 1
function <SNR>251__get_reference_trad(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 147
function <SNR>251_abspath(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 68
function <SNR>251_ref(git, refname) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 102
function <SNR>251_new(path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 17
function <SNR>251__vital_depends() abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 8
function <SNR>251__get_packed_refs(git) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 124
function <SNR>251_resolve(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 87
function <SNR>251__get_reference_packed(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 168
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component/repo.vim
continuing in <SNR>135_config_gina_branch
Executing command: "'/bin/zsh' '-c' 'git rev-parse --show-toplevel 2>/dev/null'"


Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 3: sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component/repo.vim"
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

not found in runtime path: "autoload/vital/_gina/Git.vim"
function <SNR>251__get_reference(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 139
function <SNR>251_relpath(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 76
function <SNR>251__vital_loaded(V) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 1
function <SNR>251__get_reference_trad(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 147
function <SNR>251_abspath(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 68
function <SNR>251_ref(git, refname) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 102
function <SNR>251_new(path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 17
function <SNR>251__vital_depends() abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 8
function <SNR>251__get_packed_refs(git) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 124
function <SNR>251_resolve(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 87
function <SNR>251__get_reference_packed(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 168
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component/repo.vim
continuing in <SNR>135_config_gina_branch
Executing command: "'/bin/zsh' '-c' 'rg --files --hidden --no-messages --glob '!.git/*' --glob !'* *''"


Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 3: sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component/repo.vim"
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

not found in runtime path: "autoload/vital/_gina/Git.vim"
function <SNR>251__get_reference(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 139
function <SNR>251_relpath(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 76
function <SNR>251__vital_loaded(V) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 1
function <SNR>251__get_reference_trad(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 147
function <SNR>251_abspath(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 68
function <SNR>251_ref(git, refname) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 102
function <SNR>251_new(path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 17
function <SNR>251__vital_depends() abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 8
function <SNR>251__get_packed_refs(git) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 124
function <SNR>251_resolve(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 87
function <SNR>251__get_reference_packed(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 168
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component/repo.vim
continuing in <SNR>135_config_gina_branch
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 3: sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component/repo.vim"
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

not found in runtime path: "autoload/vital/_gina/Git.vim"
function <SNR>251__get_reference(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 139
function <SNR>251_relpath(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 76
function <SNR>251__vital_loaded(V) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 1
function <SNR>251__get_reference_trad(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 147
function <SNR>251_abspath(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 68
function <SNR>251_ref(git, refname) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 102
function <SNR>251_new(path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 17
function <SNR>251__vital_depends() abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 8
function <SNR>251__get_packed_refs(git) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 124
function <SNR>251_resolve(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 87
function <SNR>251__get_reference_packed(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 168
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component/repo.vim
continuing in <SNR>135_config_gina_branch
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 3: sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component/repo.vim"
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

not found in runtime path: "autoload/vital/_gina/Git.vim"
function <SNR>251__get_reference(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 139
function <SNR>251_relpath(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 76
function <SNR>251__vital_loaded(V) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 1
function <SNR>251__get_reference_trad(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 147
function <SNR>251_abspath(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 68
function <SNR>251_ref(git, refname) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 102
function <SNR>251_new(path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 17
function <SNR>251__vital_depends() abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 8
function <SNR>251__get_packed_refs(git) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 124
function <SNR>251_resolve(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 87
function <SNR>251__get_reference_packed(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 168
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component/repo.vim
continuing in <SNR>135_config_gina_branch
Executing WinLeave Autocommands for "*"
autocommand call s:Autocmd('WinLeave', win_getid())

Executing WinLeave Autocommands for "*"
autocommand call s:Remove_Matches()

Executing WinEnter Autocommands for "*"
autocommand call s:dopopd()

Executing WinEnter Autocommands for "*"
autocommand call <sid>on_window_changed('WinEnter')

Executing WinEnter Autocommands for "*"
autocommand call coc#float#nvim_win_enter(win_getid())

autocommand call s:Autocmd('WinEnter', win_getid())

Executing WinEnter Autocommands for "*"
autocommand let g:fzf#vim#buffers[bufnr('')] = reltimefloat(reltime())

Executing WinEnter Autocommands for "*"
autocommand let s:tmux_is_last_pane = 0

Executing WinEnter Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing WinEnter Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing WinEnter Autocommands for "*"
autocommand call s:auto_restore_focus()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing BufEnter Autocommands for "*"
autocommand set fo-=c fo-=r fo-=o

Executing BufEnter Autocommands for "*"
autocommand call s:Autocmd('BufEnter', +expand('<abuf>'))

Executing BufEnter Autocommands for "*"
autocommand if conflict_marker#detect#markers() | call s:on_detected() | endif

Executing BufEnter Autocommands for "*"
autocommand call s:mru_append(expand('<amatch>'))

Executing BufWinEnter Autocommands for "*"
autocommand call <sid>on_window_changed('BufWinEnter')

Executing BufWinEnter Autocommands for "*"
autocommand call s:Autocmd('BufWinEnter', +expand('<abuf>'), win_getid())

Executing BufWinEnter Autocommands for "*"
autocommand let g:fzf#vim#buffers[bufnr('')] = reltimefloat(reltime())

Executing BufWinEnter Autocommands for "*"
autocommand call s:mru_append(expand('<amatch>'))

[window] /Users/tomoya_tanaka/projects/git...om/txxxxc/competitive-programming/ABC_207/c
Executing BufFilePost Autocommands for "*"
autocommand call s:UseConfigFiles()

Executing TermOpen Autocommands for "*"
autocommand startinsert

Executing TermOpen Autocommands for "term://*"
autocommand <Lua 12: ~/.cache/dein/.cache/init.vim/.dein/lua/toggleterm.lua:25>

Executing TermOpen Autocommands for "*"
autocommand call s:Autocmd('TermOpen', +expand('<abuf>'))

[global] /Users/tomoya_tanaka/projects/git...om/txxxxc/competitive-programming/ABC_207/c
Executing FileType Autocommands for "*"
autocommand call s:LoadFTPlugin()

not found in runtime path: "ftplugin/fzf.vim ftplugin/fzf_*.vim ftplugin/fzf/*.vim"
not found in runtime path: "ftplugin/fzf.lua ftplugin/fzf_*.lua ftplugin/fzf/*.lua"
Executing FileType Autocommands for "*"
autocommand call s:LoadIndent()

not found in runtime path: "indent/fzf.vim"
not found in runtime path: "indent/fzf.lua"
Executing FileType Autocommands for "*?"
autocommand call dein#autoload#_on_default_event('FileType')

Executing FileType Autocommands for "*"
autocommand if !exists('b:ts_highlight') | 0verbose exe "set syntax=" . expand("<amatch>") | endif

Executing FileType Autocommands for "*"
autocommand set fo-=c fo-=r fo-=o

autocommand set fo-=c fo-=r fo-=o " 改行時の自動コメントアウトを無効化する 

autocommand <Lua 22: ~/.cache/dein/repos/github.com/nvim-treesitter/nvim-treesitter/lua/nvim-treesitter/install.lua:431>

Executing FileType Autocommands for "*"
autocommand call <sid>on_window_changed('FileType')

Executing FileType Autocommands for "*"
autocommand call s:Autocmd('FileType', expand('<amatch>'), +expand('<abuf>'))

Executing FileType Autocommands for "*"
autocommand <Lua 23: ~/.cache/dein/repos/github.com/nvim-treesitter/nvim-treesitter/lua/nvim-treesitter/configs.lua:107>

Executing FileType Autocommands for "fzf"
autocommand tnoremap <silent> <buffer> <Esc> <C-g>

autocommand nnoremap <silent> <buffer> <C-g> i<C-g>

autocommand vnoremap <silent> <buffer> <C-g> <Esc>i<C-g>

Executing FileType Autocommands for "fzf"
autocommand call fzf_preview#remote#window#set_fzf_last_query()

Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/coc)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/coc/highlight.vim"
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/coc/highlight.vim
Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing User Autocommands for "AirlineModeChanged"
autocommand call airline#mode_changed()

Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 3: sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component/repo.vim"
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

not found in runtime path: "autoload/vital/_gina/Git.vim"
function <SNR>251__get_reference(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 139
function <SNR>251_relpath(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 76
function <SNR>251__vital_loaded(V) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 1
function <SNR>251__get_reference_trad(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 147
function <SNR>251_abspath(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 68
function <SNR>251_ref(git, refname) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 102
function <SNR>251_new(path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 17
function <SNR>251__vital_depends() abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 8
function <SNR>251__get_packed_refs(git) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 124
function <SNR>251_resolve(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 87
function <SNR>251__get_reference_packed(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 168
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component/repo.vim
continuing in <SNR>135_config_gina_branch
Executing WinLeave Autocommands for "*"
autocommand call s:Autocmd('WinLeave', win_getid())

Executing WinLeave Autocommands for "*"
autocommand call s:Remove_Matches()

Executing WinClosed Autocommands for "*"
autocommand call s:HandleWinClosed(+expand('<amatch>'))

Executing BufWinLeave Autocommands for "*"
autocommand call s:Autocmd('BufWinLeave', +expand('<abuf>'), bufwinid(+expand('<abuf>')))

Executing BufUnload Autocommands for "*"
autocommand call <sid>on_window_changed('BufUnload')

Executing BufUnload Autocommands for "*"
autocommand call s:Autocmd('BufUnload', +expand('<abuf>'))

Executing WinEnter Autocommands for "*"
autocommand call s:dopopd()

Executing WinEnter Autocommands for "*"
autocommand call <sid>on_window_changed('WinEnter')

Executing WinEnter Autocommands for "*"
autocommand call coc#float#nvim_win_enter(win_getid())

autocommand call s:Autocmd('WinEnter', win_getid())

Executing WinEnter Autocommands for "*"
autocommand let g:fzf#vim#buffers[bufnr('')] = reltimefloat(reltime())

Executing WinEnter Autocommands for "*"
autocommand let s:tmux_is_last_pane = 0

Executing WinEnter Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing WinEnter Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing WinEnter Autocommands for "*"
autocommand call s:auto_restore_focus()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing BufEnter Autocommands for "*"
autocommand set fo-=c fo-=r fo-=o

Executing BufEnter Autocommands for "*"
autocommand call s:Autocmd('BufEnter', +expand('<abuf>'))

Executing BufEnter Autocommands for "*"
autocommand if conflict_marker#detect#markers() | call s:on_detected() | endif

Executing BufEnter Autocommands for "*"
autocommand call s:mru_append(expand('<amatch>'))

[window] /Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/coc)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 16: sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/coc/highlight.vim"
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/coc/highlight.vim
continuing in <SNR>61_request
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
Executing BufWinLeave Autocommands for "*"
autocommand call s:Autocmd('BufWinLeave', +expand('<abuf>'), bufwinid(+expand('<abuf>')))

Executing BufHidden Autocommands for "*"
autocommand call s:Autocmd('BufHidden', +expand('<abuf>'))

Executing BufEnter Autocommands for "*"
autocommand set fo-=c fo-=r fo-=o

Executing BufEnter Autocommands for "*"
autocommand call s:Autocmd('BufEnter', +expand('<abuf>'))

Executing BufEnter Autocommands for "*"
autocommand if conflict_marker#detect#markers() | call s:on_detected() | endif

Executing BufEnter Autocommands for "*"
autocommand call s:mru_append(expand('<amatch>'))

Executing BufWinEnter Autocommands for "*"
autocommand call <sid>on_window_changed('BufWinEnter')

Executing BufWinEnter Autocommands for "*"
autocommand call s:Autocmd('BufWinEnter', +expand('<abuf>'), win_getid())

Executing BufWinEnter Autocommands for "*"
autocommand let g:fzf#vim#buffers[bufnr('')] = reltimefloat(reltime())

Executing BufWinEnter Autocommands for "*"
autocommand call s:mru_append(expand('<amatch>'))


[global] /Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c
Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing User Autocommands for "AirlineModeChanged"
autocommand call airline#mode_changed()

Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 3: sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component/repo.vim"
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

not found in runtime path: "autoload/vital/_gina/Git.vim"
function <SNR>251__get_reference(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 139
function <SNR>251_relpath(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 76
function <SNR>251__vital_loaded(V) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 1
function <SNR>251__get_reference_trad(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 147
function <SNR>251_abspath(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 68
function <SNR>251_ref(git, refname) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 102
function <SNR>251_new(path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 17
function <SNR>251__vital_depends() abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 8
function <SNR>251__get_packed_refs(git) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 124
function <SNR>251_resolve(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 87
function <SNR>251__get_reference_packed(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 168
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component/repo.vim
continuing in <SNR>135_config_gina_branch
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/airline)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 38: sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/airline/async.vim"
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/airline/async.vim
continuing in <SNR>135_update_untracked
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 3: sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component/repo.vim"
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

not found in runtime path: "autoload/vital/_gina/Git.vim"
function <SNR>251__get_reference(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 139
function <SNR>251_relpath(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 76
function <SNR>251__vital_loaded(V) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 1
function <SNR>251__get_reference_trad(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 147
function <SNR>251_abspath(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 68
function <SNR>251_ref(git, refname) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 102
function <SNR>251_new(path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 17
function <SNR>251__vital_depends() abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 8
function <SNR>251__get_packed_refs(git) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 124
function <SNR>251_resolve(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 87
function <SNR>251__get_reference_packed(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 168
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component/repo.vim
continuing in <SNR>135_config_gina_branch
Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 3: sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component/repo.vim"
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

not found in runtime path: "autoload/vital/_gina/Git.vim"
function <SNR>251__get_reference(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 139
function <SNR>251_relpath(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 76
function <SNR>251__vital_loaded(V) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 1
function <SNR>251__get_reference_trad(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 147
function <SNR>251_abspath(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 68
function <SNR>251_ref(git, refname) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 102
function <SNR>251_new(path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 17
function <SNR>251__vital_depends() abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 8
function <SNR>251__get_packed_refs(git) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 124
function <SNR>251_resolve(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 87
function <SNR>251__get_reference_packed(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 168
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component/repo.vim
continuing in <SNR>135_config_gina_branch
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 3: sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component/repo.vim"
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

not found in runtime path: "autoload/vital/_gina/Git.vim"
function <SNR>251__get_reference(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 139
function <SNR>251_relpath(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 76
function <SNR>251__vital_loaded(V) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 1
function <SNR>251__get_reference_trad(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 147
function <SNR>251_abspath(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 68
function <SNR>251_ref(git, refname) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 102
function <SNR>251_new(path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 17
function <SNR>251__vital_depends() abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 8
function <SNR>251__get_packed_refs(git) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 124
function <SNR>251_resolve(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 87
function <SNR>251__get_reference_packed(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 168
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component/repo.vim
continuing in <SNR>135_config_gina_branch
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 3: sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component/repo.vim"
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

not found in runtime path: "autoload/vital/_gina/Git.vim"
function <SNR>251__get_reference(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 139
function <SNR>251_relpath(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 76
function <SNR>251__vital_loaded(V) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 1
function <SNR>251__get_reference_trad(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 147
function <SNR>251_abspath(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 68
function <SNR>251_ref(git, refname) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 102
function <SNR>251_new(path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 17
function <SNR>251__vital_depends() abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 8
function <SNR>251__get_packed_refs(git) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 124
function <SNR>251_resolve(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 87
function <SNR>251__get_reference_packed(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 168
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component/repo.vim
continuing in <SNR>135_config_gina_branch
Executing CursorHold Autocommands for "*"
autocommand silent call CocActionAsync('highlight')

autocommand silent call CocActionAsync('highlight')

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 3: sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component/repo.vim"
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

not found in runtime path: "autoload/vital/_gina/Git.vim"
function <SNR>251__get_reference(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 139
function <SNR>251_relpath(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 76
function <SNR>251__vital_loaded(V) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 1
function <SNR>251__get_reference_trad(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 147
function <SNR>251_abspath(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 68
function <SNR>251_ref(git, refname) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 102
function <SNR>251_new(path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 17
function <SNR>251__vital_depends() abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 8
function <SNR>251__get_packed_refs(git) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 124
function <SNR>251_resolve(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 87
function <SNR>251__get_reference_packed(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 168
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component/repo.vim
continuing in <SNR>135_config_gina_branch
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 3: sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component/repo.vim"
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

not found in runtime path: "autoload/vital/_gina/Git.vim"
function <SNR>251__get_reference(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 139
function <SNR>251_relpath(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 76
function <SNR>251__vital_loaded(V) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 1
function <SNR>251__get_reference_trad(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 147
function <SNR>251_abspath(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 68
function <SNR>251_ref(git, refname) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 102
function <SNR>251_new(path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 17
function <SNR>251__vital_depends() abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 8
function <SNR>251__get_packed_refs(git) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 124
function <SNR>251_resolve(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 87
function <SNR>251__get_reference_packed(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 168
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component/repo.vim
continuing in <SNR>135_config_gina_branch
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 3: sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component/repo.vim"
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

not found in runtime path: "autoload/vital/_gina/Git.vim"
function <SNR>251__get_reference(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 139
function <SNR>251_relpath(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 76
function <SNR>251__vital_loaded(V) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 1
function <SNR>251__get_reference_trad(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 147
function <SNR>251_abspath(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 68
function <SNR>251_ref(git, refname) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 102
function <SNR>251_new(path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 17
function <SNR>251__vital_depends() abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 8
function <SNR>251__get_packed_refs(git) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 124
function <SNR>251_resolve(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 87
function <SNR>251__get_reference_packed(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 168
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component/repo.vim
continuing in <SNR>135_config_gina_branch
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 3: sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component/repo.vim"
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

not found in runtime path: "autoload/vital/_gina/Git.vim"
function <SNR>251__get_reference(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 139
function <SNR>251_relpath(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 76
function <SNR>251__vital_loaded(V) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 1
function <SNR>251__get_reference_trad(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 147
function <SNR>251_abspath(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 68
function <SNR>251_ref(git, refname) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 102
function <SNR>251_new(path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 17
function <SNR>251__vital_depends() abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 8
function <SNR>251__get_packed_refs(git) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 124
function <SNR>251_resolve(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 87
function <SNR>251__get_reference_packed(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 168
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component/repo.vim
continuing in <SNR>135_config_gina_branch
Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 3: sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component/repo.vim"
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

not found in runtime path: "autoload/vital/_gina/Git.vim"
function <SNR>251__get_reference(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 139
function <SNR>251_relpath(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 76
function <SNR>251__vital_loaded(V) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 1
function <SNR>251__get_reference_trad(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 147
function <SNR>251_abspath(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 68
function <SNR>251_ref(git, refname) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 102
function <SNR>251_new(path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 17
function <SNR>251__vital_depends() abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 8
function <SNR>251__get_packed_refs(git) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 124
function <SNR>251_resolve(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 87
function <SNR>251__get_reference_packed(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 168
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component/repo.vim
continuing in <SNR>135_config_gina_branch
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 3: sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component/repo.vim"
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

not found in runtime path: "autoload/vital/_gina/Git.vim"
function <SNR>251__get_reference(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 139
function <SNR>251_relpath(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 76
function <SNR>251__vital_loaded(V) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 1
function <SNR>251__get_reference_trad(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 147
function <SNR>251_abspath(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 68
function <SNR>251_ref(git, refname) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 102
function <SNR>251_new(path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 17
function <SNR>251__vital_depends() abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 8
function <SNR>251__get_packed_refs(git) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 124
function <SNR>251_resolve(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 87
function <SNR>251__get_reference_packed(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 168
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component/repo.vim
continuing in <SNR>135_config_gina_branch
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 3: sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component/repo.vim"
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

not found in runtime path: "autoload/vital/_gina/Git.vim"
function <SNR>251__get_reference(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 139
function <SNR>251_relpath(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 76
function <SNR>251__vital_loaded(V) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 1
function <SNR>251__get_reference_trad(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 147
function <SNR>251_abspath(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 68
function <SNR>251_ref(git, refname) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 102
function <SNR>251_new(path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 17
function <SNR>251__vital_depends() abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 8
function <SNR>251__get_packed_refs(git) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 124
function <SNR>251_resolve(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 87
function <SNR>251__get_reference_packed(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 168
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component/repo.vim
continuing in <SNR>135_config_gina_branch
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 3: sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component/repo.vim"
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

not found in runtime path: "autoload/vital/_gina/Git.vim"
function <SNR>251__get_reference(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 139
function <SNR>251_relpath(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 76
function <SNR>251__vital_loaded(V) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 1
function <SNR>251__get_reference_trad(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 147
function <SNR>251_abspath(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 68
function <SNR>251_ref(git, refname) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 102
function <SNR>251_new(path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 17
function <SNR>251__vital_depends() abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 8
function <SNR>251__get_packed_refs(git) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 124
function <SNR>251_resolve(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 87
function <SNR>251__get_reference_packed(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 168
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component/repo.vim
continuing in <SNR>135_config_gina_branch
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 3: sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component/repo.vim"
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

not found in runtime path: "autoload/vital/_gina/Git.vim"
function <SNR>251__get_reference(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 139
function <SNR>251_relpath(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 76
function <SNR>251__vital_loaded(V) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 1
function <SNR>251__get_reference_trad(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 147
function <SNR>251_abspath(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 68
function <SNR>251_ref(git, refname) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 102
function <SNR>251_new(path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 17
function <SNR>251__vital_depends() abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 8
function <SNR>251__get_packed_refs(git) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 124
function <SNR>251_resolve(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 87
function <SNR>251__get_reference_packed(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 168
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component/repo.vim
continuing in <SNR>135_config_gina_branch
Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()


Executing WinLeave Autocommands for "*"
autocommand call s:Autocmd('WinLeave', win_getid())

Executing WinLeave Autocommands for "*"
autocommand call s:Remove_Matches()

Executing WinEnter Autocommands for "*"
autocommand call s:dopopd()

Executing WinEnter Autocommands for "*"
autocommand call <sid>on_window_changed('WinEnter')

Executing WinEnter Autocommands for "*"
autocommand call coc#float#nvim_win_enter(win_getid())

autocommand call s:Autocmd('WinEnter', win_getid())

Executing WinEnter Autocommands for "*"
autocommand let g:fzf#vim#buffers[bufnr('')] = reltimefloat(reltime())

Executing WinEnter Autocommands for "*"
autocommand let s:tmux_is_last_pane = 0

Executing WinEnter Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing WinEnter Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing WinEnter Autocommands for "*"
autocommand call s:auto_restore_focus()

Executing BufEnter Autocommands for "*"
autocommand set fo-=c fo-=r fo-=o

Executing BufEnter Autocommands for "*"
autocommand call s:Autocmd('BufEnter', +expand('<abuf>'))

Executing BufEnter Autocommands for "*"
autocommand if conflict_marker#detect#markers() | call s:on_detected() | endif

Executing BufEnter Autocommands for "*"
autocommand call s:mru_append(expand('<amatch>'))

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing User Autocommands for "AirlineModeChanged"
autocommand call airline#mode_changed()

Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/coc)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/coc/highlight.vim"
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/coc/highlight.vim
Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()


Executing BufWritePre Autocommands for "*"
autocommand call s:SyncAutocmd('BufWritePre', +expand('<abuf>'), bufname(+expand('<abuf>')), getbufvar(+expand('<abuf>'), 'changedtick'))

"index.cpp" 
"index.cpp" 52L, 964B written
Executing BufWritePost Autocommands for "*"
autocommand call s:Autocmd('BufWritePost', +expand('<abuf>'), getbufvar(+expand('<abuf>'), 'changedtick'))

Executing BufWritePost Autocommands for "*"
autocommand call s:reset_untracked_cache(0)

Executing BufWritePost Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing BufWritePost Autocommands for "*"
autocommand call s:mru_append(expand('<amatch>'))

autocommand call s:mrw_append(expand('<amatch>'))

"index.cpp" 52L, 964B written
Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()


Executing WinLeave Autocommands for "*"
autocommand call s:Autocmd('WinLeave', win_getid())

Executing WinLeave Autocommands for "*"
autocommand call s:Remove_Matches()

Executing WinEnter Autocommands for "*"
autocommand call s:dopopd()

Executing WinEnter Autocommands for "*"
autocommand call <sid>on_window_changed('WinEnter')

Executing WinEnter Autocommands for "*"
autocommand call coc#float#nvim_win_enter(win_getid())

autocommand call s:Autocmd('WinEnter', win_getid())

Executing WinEnter Autocommands for "*"
autocommand let g:fzf#vim#buffers[bufnr('')] = reltimefloat(reltime())

Executing WinEnter Autocommands for "*"
autocommand let s:tmux_is_last_pane = 0

Executing WinEnter Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing WinEnter Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing WinEnter Autocommands for "*"
autocommand call s:auto_restore_focus()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing BufEnter Autocommands for "*"
autocommand set fo-=c fo-=r fo-=o

Executing BufEnter Autocommands for "*"
autocommand call s:Autocmd('BufEnter', +expand('<abuf>'))

Executing BufEnter Autocommands for "*"
autocommand if conflict_marker#detect#markers() | call s:on_detected() | endif

Executing BufEnter Autocommands for "*"
autocommand call s:mru_append(expand('<amatch>'))

Executing BufWinEnter Autocommands for "*"
autocommand call <sid>on_window_changed('BufWinEnter')

Executing BufWinEnter Autocommands for "*"
autocommand call s:Autocmd('BufWinEnter', +expand('<abuf>'), win_getid())

Executing BufWinEnter Autocommands for "*"
autocommand let g:fzf#vim#buffers[bufnr('')] = reltimefloat(reltime())

Executing BufWinEnter Autocommands for "*"
autocommand call s:mru_append(expand('<amatch>'))


Executing WinLeave Autocommands for "*"
autocommand call s:Autocmd('WinLeave', win_getid())

Executing WinLeave Autocommands for "*"
autocommand call s:Remove_Matches()

Executing WinEnter Autocommands for "*"
autocommand call s:dopopd()

Executing WinEnter Autocommands for "*"
autocommand call <sid>on_window_changed('WinEnter')

Executing WinEnter Autocommands for "*"
autocommand call coc#float#nvim_win_enter(win_getid())

autocommand call s:Autocmd('WinEnter', win_getid())

Executing WinEnter Autocommands for "*"
autocommand let g:fzf#vim#buffers[bufnr('')] = reltimefloat(reltime())

Executing WinEnter Autocommands for "*"
autocommand let s:tmux_is_last_pane = 0

Executing WinEnter Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing WinEnter Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing WinEnter Autocommands for "*"
autocommand call s:auto_restore_focus()

Executing BufEnter Autocommands for "*"
autocommand set fo-=c fo-=r fo-=o

Executing BufEnter Autocommands for "*"
autocommand call s:Autocmd('BufEnter', +expand('<abuf>'))

Executing BufEnter Autocommands for "*"
autocommand if conflict_marker#detect#markers() | call s:on_detected() | endif

Executing BufEnter Autocommands for "*"
autocommand call s:mru_append(expand('<amatch>'))

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing command: "'/bin/zsh' '-c' ''/usr/bin/g++' -std=c++14 -Wall -Wextra --pedantic-errors '/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c/index.cpp' -o '/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207..."


Executing command: "'/bin/zsh' '-c' ''/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c/index' '"


Executing WinLeave Autocommands for "*"
autocommand call s:Autocmd('WinLeave', win_getid())

Executing WinLeave Autocommands for "*"
autocommand call s:Remove_Matches()

Executing WinEnter Autocommands for "*"
autocommand call s:dopopd()

Executing WinEnter Autocommands for "*"
autocommand call <sid>on_window_changed('WinEnter')

Executing WinEnter Autocommands for "*"
autocommand call coc#float#nvim_win_enter(win_getid())

autocommand call s:Autocmd('WinEnter', win_getid())

Executing WinEnter Autocommands for "*"
autocommand let g:fzf#vim#buffers[bufnr('')] = reltimefloat(reltime())

Executing WinEnter Autocommands for "*"
autocommand let s:tmux_is_last_pane = 0

Executing WinEnter Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing WinEnter Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing WinEnter Autocommands for "*"
autocommand call s:auto_restore_focus()

Executing BufEnter Autocommands for "*"
autocommand set fo-=c fo-=r fo-=o

Executing BufEnter Autocommands for "*"
autocommand call s:Autocmd('BufEnter', +expand('<abuf>'))

Executing BufEnter Autocommands for "*"
autocommand if conflict_marker#detect#markers() | call s:on_detected() | endif

Executing BufEnter Autocommands for "*"
autocommand call s:mru_append(expand('<amatch>'))

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing WinLeave Autocommands for "*"
autocommand call s:Autocmd('WinLeave', win_getid())

Executing WinLeave Autocommands for "*"
autocommand call s:Remove_Matches()

Executing WinEnter Autocommands for "*"
autocommand call s:dopopd()

Executing WinEnter Autocommands for "*"
autocommand call <sid>on_window_changed('WinEnter')

Executing WinEnter Autocommands for "*"
autocommand call coc#float#nvim_win_enter(win_getid())

autocommand call s:Autocmd('WinEnter', win_getid())

Executing WinEnter Autocommands for "*"
autocommand let g:fzf#vim#buffers[bufnr('')] = reltimefloat(reltime())

Executing WinEnter Autocommands for "*"
autocommand let s:tmux_is_last_pane = 0

Executing WinEnter Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing WinEnter Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing WinEnter Autocommands for "*"
autocommand call s:auto_restore_focus()

Executing BufEnter Autocommands for "*"
autocommand set fo-=c fo-=r fo-=o

Executing BufEnter Autocommands for "*"
autocommand call s:Autocmd('BufEnter', +expand('<abuf>'))

Executing BufEnter Autocommands for "*"
autocommand if conflict_marker#detect#markers() | call s:on_detected() | endif

Executing BufEnter Autocommands for "*"
autocommand call s:mru_append(expand('<amatch>'))

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing WinScrolled Autocommands for "*"
autocommand call s:HandleWinScrolled(+expand('<amatch>'))

Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/coc)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/coc/highlight.vim"
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/coc/highlight.vim
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/coc)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/coc/highlight.vim"
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/coc/highlight.vim
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/coc)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/coc/highlight.vim"
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/coc/highlight.vim
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/coc)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/coc/highlight.vim"
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/coc/highlight.vim
Executing CursorHold Autocommands for "*"
autocommand silent call CocActionAsync('highlight')

autocommand silent call CocActionAsync('highlight')

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing WinScrolled Autocommands for "*"
autocommand call s:HandleWinScrolled(+expand('<amatch>'))

Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing WinScrolled Autocommands for "*"
autocommand call s:HandleWinScrolled(+expand('<amatch>'))

Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing WinScrolled Autocommands for "*"
autocommand call s:HandleWinScrolled(+expand('<amatch>'))

Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing WinScrolled Autocommands for "*"
autocommand call s:HandleWinScrolled(+expand('<amatch>'))

Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing WinScrolled Autocommands for "*"
autocommand call s:HandleWinScrolled(+expand('<amatch>'))

Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing WinScrolled Autocommands for "*"
autocommand call s:HandleWinScrolled(+expand('<amatch>'))

Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing WinScrolled Autocommands for "*"
autocommand call s:HandleWinScrolled(+expand('<amatch>'))

Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing WinScrolled Autocommands for "*"
autocommand call s:HandleWinScrolled(+expand('<amatch>'))

Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorHold Autocommands for "*"
autocommand silent call CocActionAsync('highlight')

autocommand silent call CocActionAsync('highlight')

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing WinScrolled Autocommands for "*"
autocommand call s:HandleWinScrolled(+expand('<amatch>'))

Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing WinScrolled Autocommands for "*"
autocommand call s:HandleWinScrolled(+expand('<amatch>'))

Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing WinScrolled Autocommands for "*"
autocommand call s:HandleWinScrolled(+expand('<amatch>'))

Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing WinScrolled Autocommands for "*"
autocommand call s:HandleWinScrolled(+expand('<amatch>'))

Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing WinScrolled Autocommands for "*"
autocommand call s:HandleWinScrolled(+expand('<amatch>'))

Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing WinScrolled Autocommands for "*"
autocommand call s:HandleWinScrolled(+expand('<amatch>'))

Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing WinScrolled Autocommands for "*"
autocommand call s:HandleWinScrolled(+expand('<amatch>'))

Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorHold Autocommands for "*"
autocommand silent call CocActionAsync('highlight')

autocommand silent call CocActionAsync('highlight')

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorHold Autocommands for "*"
autocommand silent call CocActionAsync('highlight')

autocommand silent call CocActionAsync('highlight')

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorHold Autocommands for "*"
autocommand silent call CocActionAsync('highlight')

autocommand silent call CocActionAsync('highlight')

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorHold Autocommands for "*"
autocommand silent call CocActionAsync('highlight')

autocommand silent call CocActionAsync('highlight')

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorHold Autocommands for "*"
autocommand silent call CocActionAsync('highlight')

autocommand silent call CocActionAsync('highlight')

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorHold Autocommands for "*"
autocommand silent call CocActionAsync('highlight')

autocommand silent call CocActionAsync('highlight')

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorHold Autocommands for "*"
autocommand silent call CocActionAsync('highlight')

autocommand silent call CocActionAsync('highlight')

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing WinScrolled Autocommands for "*"
autocommand call s:HandleWinScrolled(+expand('<amatch>'))

Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing WinScrolled Autocommands for "*"
autocommand call s:HandleWinScrolled(+expand('<amatch>'))

Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing WinScrolled Autocommands for "*"
autocommand call s:HandleWinScrolled(+expand('<amatch>'))

Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing WinScrolled Autocommands for "*"
autocommand call s:HandleWinScrolled(+expand('<amatch>'))

Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing WinScrolled Autocommands for "*"
autocommand call s:HandleWinScrolled(+expand('<amatch>'))

Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing WinScrolled Autocommands for "*"
autocommand call s:HandleWinScrolled(+expand('<amatch>'))

Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing WinScrolled Autocommands for "*"
autocommand call s:HandleWinScrolled(+expand('<amatch>'))

Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing WinScrolled Autocommands for "*"
autocommand call s:HandleWinScrolled(+expand('<amatch>'))

Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing WinScrolled Autocommands for "*"
autocommand call s:HandleWinScrolled(+expand('<amatch>'))

Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing WinScrolled Autocommands for "*"
autocommand call s:HandleWinScrolled(+expand('<amatch>'))

Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing WinScrolled Autocommands for "*"
autocommand call s:HandleWinScrolled(+expand('<amatch>'))

Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing WinScrolled Autocommands for "*"
autocommand call s:HandleWinScrolled(+expand('<amatch>'))

Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing WinScrolled Autocommands for "*"
autocommand call s:HandleWinScrolled(+expand('<amatch>'))

Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing WinScrolled Autocommands for "*"
autocommand call s:HandleWinScrolled(+expand('<amatch>'))

Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing WinScrolled Autocommands for "*"
autocommand call s:HandleWinScrolled(+expand('<amatch>'))

Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing WinScrolled Autocommands for "*"
autocommand call s:HandleWinScrolled(+expand('<amatch>'))

Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing WinScrolled Autocommands for "*"
autocommand call s:HandleWinScrolled(+expand('<amatch>'))

Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing WinScrolled Autocommands for "*"
autocommand call s:HandleWinScrolled(+expand('<amatch>'))

Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing WinScrolled Autocommands for "*"
autocommand call s:HandleWinScrolled(+expand('<amatch>'))

Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorHold Autocommands for "*"
autocommand silent call CocActionAsync('highlight')

autocommand silent call CocActionAsync('highlight')

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorHold Autocommands for "*"
autocommand silent call CocActionAsync('highlight')

autocommand silent call CocActionAsync('highlight')

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing InsertEnter Autocommands for "*"
autocommand call s:Autocmd('InsertEnter', +expand('<abuf>'))

Executing InsertEnter Autocommands for "*"
autocommand call lexima#insmode#clear_stack()

autocommand call s:setup_insmode()

Executing InsertEnter Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMovedI Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMovedI Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing CursorHoldI Autocommands for "*"
autocommand call s:Autocmd('CursorHoldI', +expand('<abuf>'), [line('.'), col('.')])

Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMovedI Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing CursorHoldI Autocommands for "*"
autocommand call s:Autocmd('CursorHoldI', +expand('<abuf>'), [line('.'), col('.')])

Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMovedI Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing WinClosed Autocommands for "*"
autocommand call s:HandleWinClosed(+expand('<amatch>'))

Executing BufWinLeave Autocommands for "*"
autocommand call s:Autocmd('BufWinLeave', +expand('<abuf>'), bufwinid(+expand('<abuf>')))

Executing BufHidden Autocommands for "*"
autocommand call s:Autocmd('BufHidden', +expand('<abuf>'))

Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMovedI Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMovedI Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMovedI Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMovedI Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMovedI Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMovedI Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 5: sourcing "/opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax/cpp.vim"
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 16: sourcing "/opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax/c.vim"
finished sourcing /opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax/c.vim
continuing in /opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax/cpp.vim
finished sourcing /opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/syntax/cpp.vim
continuing in coc#compat#execute
Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMovedI Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing WinClosed Autocommands for "*"
autocommand call s:HandleWinClosed(+expand('<amatch>'))

Executing BufWinLeave Autocommands for "*"
autocommand call s:Autocmd('BufWinLeave', +expand('<abuf>'), bufwinid(+expand('<abuf>')))

Executing BufHidden Autocommands for "*"
autocommand call s:Autocmd('BufHidden', +expand('<abuf>'))

Executing WinClosed Autocommands for "*"
autocommand call s:HandleWinClosed(+expand('<amatch>'))

Executing BufWinLeave Autocommands for "*"
autocommand call s:Autocmd('BufWinLeave', +expand('<abuf>'), bufwinid(+expand('<abuf>')))

Executing BufHidden Autocommands for "*"
autocommand call s:Autocmd('BufHidden', +expand('<abuf>'))

Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMovedI Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMovedI Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMovedI Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMovedI Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMovedI Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing CursorHoldI Autocommands for "*"
autocommand call s:Autocmd('CursorHoldI', +expand('<abuf>'), [line('.'), col('.')])

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing InsertLeave Autocommands for "*"
autocommand call s:Autocmd('InsertLeave', +expand('<abuf>'))

Executing InsertLeave Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing WinClosed Autocommands for "*"
autocommand call s:HandleWinClosed(+expand('<amatch>'))

Executing BufWinLeave Autocommands for "*"
autocommand call s:Autocmd('BufWinLeave', +expand('<abuf>'), bufwinid(+expand('<abuf>')))

Executing BufHidden Autocommands for "*"
autocommand call s:Autocmd('BufHidden', +expand('<abuf>'))

Executing WinClosed Autocommands for "*"
autocommand call s:HandleWinClosed(+expand('<amatch>'))

Executing BufWinLeave Autocommands for "*"
autocommand call s:Autocmd('BufWinLeave', +expand('<abuf>'), bufwinid(+expand('<abuf>')))

Executing BufHidden Autocommands for "*"
autocommand call s:Autocmd('BufHidden', +expand('<abuf>'))

Executing InsertEnter Autocommands for "*"
autocommand call s:Autocmd('InsertEnter', +expand('<abuf>'))

Executing InsertEnter Autocommands for "*"
autocommand call lexima#insmode#clear_stack()

autocommand call s:setup_insmode()

Executing InsertEnter Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMovedI Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorHoldI Autocommands for "*"
autocommand call s:Autocmd('CursorHoldI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMovedI Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMovedI Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMovedI Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMovedI Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing CursorHoldI Autocommands for "*"
autocommand call s:Autocmd('CursorHoldI', +expand('<abuf>'), [line('.'), col('.')])

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing InsertLeave Autocommands for "*"
autocommand call s:Autocmd('InsertLeave', +expand('<abuf>'))

Executing InsertLeave Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing WinClosed Autocommands for "*"
autocommand call s:HandleWinClosed(+expand('<amatch>'))

Executing BufWinLeave Autocommands for "*"
autocommand call s:Autocmd('BufWinLeave', +expand('<abuf>'), bufwinid(+expand('<abuf>')))

Executing BufHidden Autocommands for "*"
autocommand call s:Autocmd('BufHidden', +expand('<abuf>'))

Executing WinClosed Autocommands for "*"
autocommand call s:HandleWinClosed(+expand('<amatch>'))

Executing BufWinLeave Autocommands for "*"
autocommand call s:Autocmd('BufWinLeave', +expand('<abuf>'), bufwinid(+expand('<abuf>')))

Executing BufHidden Autocommands for "*"
autocommand call s:Autocmd('BufHidden', +expand('<abuf>'))

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing command: "'/usr/bin/pbcopy'"


Executing TextYankPost Autocommands for "*"
autocommand call highlightedyank#debounce()

Executing TextYankPost Autocommands for "*"
autocommand call coc#rpc#notify('doAutocmd', [2, v:event, +expand('<abuf>'), win_getid()])

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing command: "'/usr/bin/pbpaste'"


Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing TextChanged Autocommands for "*"
autocommand call s:Autocmd('TextChanged', +expand('<abuf>'), getbufvar(+expand('<abuf>'), 'changedtick'))

Executing TextChanged Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing TextChanged Autocommands for "*"
autocommand call s:_doautocmd('highlightedyank-highlight', 'TextChanged', '*')

not found in runtime path: "parser/comment.*"
Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorHold Autocommands for "*"
autocommand silent call CocActionAsync('highlight')

autocommand silent call CocActionAsync('highlight')

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing command: "'/usr/bin/pbcopy'"


Executing TextYankPost Autocommands for "*"
autocommand call highlightedyank#debounce()

Executing TextYankPost Autocommands for "*"
autocommand call coc#rpc#notify('doAutocmd', [2, v:event, +expand('<abuf>'), win_getid()])

Executing InsertEnter Autocommands for "*"
autocommand call s:Autocmd('InsertEnter', +expand('<abuf>'))

Executing InsertEnter Autocommands for "*"
autocommand call lexima#insmode#clear_stack()

autocommand call s:setup_insmode()

Executing InsertEnter Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMovedI Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMovedI Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMovedI Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing CursorHoldI Autocommands for "*"
autocommand call s:Autocmd('CursorHoldI', +expand('<abuf>'), [line('.'), col('.')])

Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMovedI Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMovedI Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMovedI Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMovedI Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing InsertLeave Autocommands for "*"
autocommand call s:Autocmd('InsertLeave', +expand('<abuf>'))

Executing InsertLeave Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing WinClosed Autocommands for "*"
autocommand call s:HandleWinClosed(+expand('<amatch>'))

Executing BufWinLeave Autocommands for "*"
autocommand call s:Autocmd('BufWinLeave', +expand('<abuf>'), bufwinid(+expand('<abuf>')))

Executing BufHidden Autocommands for "*"
autocommand call s:Autocmd('BufHidden', +expand('<abuf>'))

Executing WinClosed Autocommands for "*"
autocommand call s:HandleWinClosed(+expand('<amatch>'))

Executing BufWinLeave Autocommands for "*"
autocommand call s:Autocmd('BufWinLeave', +expand('<abuf>'), bufwinid(+expand('<abuf>')))

Executing BufHidden Autocommands for "*"
autocommand call s:Autocmd('BufHidden', +expand('<abuf>'))

Executing InsertEnter Autocommands for "*"
autocommand call s:Autocmd('InsertEnter', +expand('<abuf>'))

Executing InsertEnter Autocommands for "*"
autocommand call lexima#insmode#clear_stack()

autocommand call s:setup_insmode()

Executing InsertEnter Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMovedI Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMovedI Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing CursorHoldI Autocommands for "*"
autocommand call s:Autocmd('CursorHoldI', +expand('<abuf>'), [line('.'), col('.')])

Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMovedI Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing CursorHoldI Autocommands for "*"
autocommand call s:Autocmd('CursorHoldI', +expand('<abuf>'), [line('.'), col('.')])

Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMovedI Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing InsertLeave Autocommands for "*"
autocommand call s:Autocmd('InsertLeave', +expand('<abuf>'))

Executing InsertLeave Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing InsertEnter Autocommands for "*"
autocommand call s:Autocmd('InsertEnter', +expand('<abuf>'))

Executing InsertEnter Autocommands for "*"
autocommand call lexima#insmode#clear_stack()

autocommand call s:setup_insmode()

Executing InsertEnter Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMovedI Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing InsertCharPre Autocommands for "*"
autocommand call s:HandleCharInsert(v:char, bufnr('%'))

Executing CursorMovedI Autocommands for "*"
autocommand call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMovedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMovedI Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing TextChangedI Autocommands for "*"
autocommand call s:Autocmd('TextChangedI', +expand('<abuf>'), coc#util#change_info())

Executing TextChangedI Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing InsertLeave Autocommands for "*"
autocommand call s:Autocmd('InsertLeave', +expand('<abuf>'))

Executing InsertLeave Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()


Executing BufWritePre Autocommands for "*"
autocommand call s:SyncAutocmd('BufWritePre', +expand('<abuf>'), bufname(+expand('<abuf>')), getbufvar(+expand('<abuf>'), 'changedtick'))

"index.cpp" 
"index.cpp" 53L, 1000B written
Executing BufWritePost Autocommands for "*"
autocommand call s:Autocmd('BufWritePost', +expand('<abuf>'), getbufvar(+expand('<abuf>'), 'changedtick'))

Executing BufWritePost Autocommands for "*"
autocommand call s:reset_untracked_cache(0)

Executing BufWritePost Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing BufWritePost Autocommands for "*"
autocommand call s:mru_append(expand('<amatch>'))

autocommand call s:mrw_append(expand('<amatch>'))

"index.cpp" 53L, 1000B written
Executing CursorHold Autocommands for "*"
autocommand silent call CocActionAsync('highlight')

autocommand silent call CocActionAsync('highlight')

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()


Executing WinLeave Autocommands for "*"
autocommand call s:Autocmd('WinLeave', win_getid())

Executing WinLeave Autocommands for "*"
autocommand call s:Remove_Matches()

Executing WinEnter Autocommands for "*"
autocommand call s:dopopd()

Executing WinEnter Autocommands for "*"
autocommand call <sid>on_window_changed('WinEnter')

Executing WinEnter Autocommands for "*"
autocommand call coc#float#nvim_win_enter(win_getid())

autocommand call s:Autocmd('WinEnter', win_getid())

Executing WinEnter Autocommands for "*"
autocommand let g:fzf#vim#buffers[bufnr('')] = reltimefloat(reltime())

Executing WinEnter Autocommands for "*"
autocommand let s:tmux_is_last_pane = 0

Executing WinEnter Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing WinEnter Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing WinEnter Autocommands for "*"
autocommand call s:auto_restore_focus()

Executing BufEnter Autocommands for "*"
autocommand set fo-=c fo-=r fo-=o

Executing BufEnter Autocommands for "*"
autocommand call s:Autocmd('BufEnter', +expand('<abuf>'))

Executing BufEnter Autocommands for "*"
autocommand if conflict_marker#detect#markers() | call s:on_detected() | endif

Executing BufEnter Autocommands for "*"
autocommand call s:mru_append(expand('<amatch>'))

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing WinLeave Autocommands for "*"
autocommand call s:Autocmd('WinLeave', win_getid())

Executing WinLeave Autocommands for "*"
autocommand call s:Remove_Matches()

Executing WinEnter Autocommands for "*"
autocommand call s:dopopd()

Executing WinEnter Autocommands for "*"
autocommand call <sid>on_window_changed('WinEnter')

Executing WinEnter Autocommands for "*"
autocommand call coc#float#nvim_win_enter(win_getid())

autocommand call s:Autocmd('WinEnter', win_getid())

Executing WinEnter Autocommands for "*"
autocommand let g:fzf#vim#buffers[bufnr('')] = reltimefloat(reltime())

Executing WinEnter Autocommands for "*"
autocommand let s:tmux_is_last_pane = 0

Executing WinEnter Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing WinEnter Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing WinEnter Autocommands for "*"
autocommand call s:auto_restore_focus()

Executing BufEnter Autocommands for "*"
autocommand set fo-=c fo-=r fo-=o

Executing BufEnter Autocommands for "*"
autocommand call s:Autocmd('BufEnter', +expand('<abuf>'))

Executing BufEnter Autocommands for "*"
autocommand if conflict_marker#detect#markers() | call s:on_detected() | endif

Executing BufEnter Autocommands for "*"
autocommand call s:mru_append(expand('<amatch>'))

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing command: "'/bin/zsh' '-c' ''/usr/bin/g++' -std=c++14 -Wall -Wextra --pedantic-errors '/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c/index.cpp' -o '/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207..."


Executing command: "'/bin/zsh' '-c' ''/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c/index' '"


Executing WinLeave Autocommands for "*"
autocommand call s:Autocmd('WinLeave', win_getid())

Executing WinLeave Autocommands for "*"
autocommand call s:Remove_Matches()

Executing WinEnter Autocommands for "*"
autocommand call s:dopopd()

Executing WinEnter Autocommands for "*"
autocommand call <sid>on_window_changed('WinEnter')

Executing WinEnter Autocommands for "*"
autocommand call coc#float#nvim_win_enter(win_getid())

autocommand call s:Autocmd('WinEnter', win_getid())

Executing WinEnter Autocommands for "*"
autocommand let g:fzf#vim#buffers[bufnr('')] = reltimefloat(reltime())

Executing WinEnter Autocommands for "*"
autocommand let s:tmux_is_last_pane = 0

Executing WinEnter Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing WinEnter Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing WinEnter Autocommands for "*"
autocommand call s:auto_restore_focus()

Executing BufEnter Autocommands for "*"
autocommand set fo-=c fo-=r fo-=o

Executing BufEnter Autocommands for "*"
autocommand call s:Autocmd('BufEnter', +expand('<abuf>'))

Executing BufEnter Autocommands for "*"
autocommand if conflict_marker#detect#markers() | call s:on_detected() | endif

Executing BufEnter Autocommands for "*"
autocommand call s:mru_append(expand('<amatch>'))

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing WinLeave Autocommands for "*"
autocommand call s:Autocmd('WinLeave', win_getid())

Executing WinLeave Autocommands for "*"
autocommand call s:Remove_Matches()

Executing WinEnter Autocommands for "*"
autocommand call s:dopopd()

Executing WinEnter Autocommands for "*"
autocommand call <sid>on_window_changed('WinEnter')

Executing WinEnter Autocommands for "*"
autocommand call coc#float#nvim_win_enter(win_getid())

autocommand call s:Autocmd('WinEnter', win_getid())

Executing WinEnter Autocommands for "*"
autocommand let g:fzf#vim#buffers[bufnr('')] = reltimefloat(reltime())

Executing WinEnter Autocommands for "*"
autocommand let s:tmux_is_last_pane = 0

Executing WinEnter Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing WinEnter Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing WinEnter Autocommands for "*"
autocommand call s:auto_restore_focus()

Executing BufEnter Autocommands for "*"
autocommand set fo-=c fo-=r fo-=o

Executing BufEnter Autocommands for "*"
autocommand call s:Autocmd('BufEnter', +expand('<abuf>'))

Executing BufEnter Autocommands for "*"
autocommand if conflict_marker#detect#markers() | call s:on_detected() | endif

Executing BufEnter Autocommands for "*"
autocommand call s:mru_append(expand('<amatch>'))

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/coc)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/coc/highlight.vim"
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/coc/highlight.vim
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/coc)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/coc/highlight.vim"
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/coc/highlight.vim
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/coc)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/coc/highlight.vim"
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/coc/highlight.vim
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/coc)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/coc/highlight.vim"
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/coc/highlight.vim
Executing CursorHold Autocommands for "*"
autocommand silent call CocActionAsync('highlight')

autocommand silent call CocActionAsync('highlight')

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorHold Autocommands for "*"
autocommand silent call CocActionAsync('highlight')

autocommand silent call CocActionAsync('highlight')

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorHold Autocommands for "*"
autocommand silent call CocActionAsync('highlight')

autocommand silent call CocActionAsync('highlight')

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorHold Autocommands for "*"
autocommand silent call CocActionAsync('highlight')

autocommand silent call CocActionAsync('highlight')

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorHold Autocommands for "*"
autocommand silent call CocActionAsync('highlight')

autocommand silent call CocActionAsync('highlight')

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorHold Autocommands for "*"
autocommand silent call CocActionAsync('highlight')

autocommand silent call CocActionAsync('highlight')

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing WinScrolled Autocommands for "*"
autocommand call s:HandleWinScrolled(+expand('<amatch>'))

Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing WinScrolled Autocommands for "*"
autocommand call s:HandleWinScrolled(+expand('<amatch>'))

Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing WinScrolled Autocommands for "*"
autocommand call s:HandleWinScrolled(+expand('<amatch>'))

Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing WinScrolled Autocommands for "*"
autocommand call s:HandleWinScrolled(+expand('<amatch>'))

Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorHold Autocommands for "*"
autocommand silent call CocActionAsync('highlight')

autocommand silent call CocActionAsync('highlight')

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing WinScrolled Autocommands for "*"
autocommand call s:HandleWinScrolled(+expand('<amatch>'))

Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing WinScrolled Autocommands for "*"
autocommand call s:HandleWinScrolled(+expand('<amatch>'))

Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorHold Autocommands for "*"
autocommand silent call CocActionAsync('highlight')

autocommand silent call CocActionAsync('highlight')

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorHold Autocommands for "*"
autocommand silent call CocActionAsync('highlight')

autocommand silent call CocActionAsync('highlight')

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorHold Autocommands for "*"
autocommand silent call CocActionAsync('highlight')

autocommand silent call CocActionAsync('highlight')

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorHold Autocommands for "*"
autocommand silent call CocActionAsync('highlight')

autocommand silent call CocActionAsync('highlight')

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorHold Autocommands for "*"
autocommand silent call CocActionAsync('highlight')

autocommand silent call CocActionAsync('highlight')

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorHold Autocommands for "*"
autocommand silent call CocActionAsync('highlight')

autocommand silent call CocActionAsync('highlight')

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorHold Autocommands for "*"
autocommand silent call CocActionAsync('highlight')

autocommand silent call CocActionAsync('highlight')

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorHold Autocommands for "*"
autocommand silent call CocActionAsync('highlight')

autocommand silent call CocActionAsync('highlight')

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorHold Autocommands for "*"
autocommand silent call CocActionAsync('highlight')

autocommand silent call CocActionAsync('highlight')

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorHold Autocommands for "*"
autocommand silent call CocActionAsync('highlight')

autocommand silent call CocActionAsync('highlight')

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorHold Autocommands for "*"
autocommand silent call CocActionAsync('highlight')

autocommand silent call CocActionAsync('highlight')

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorHold Autocommands for "*"
autocommand silent call CocActionAsync('highlight')

autocommand silent call CocActionAsync('highlight')

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorHold Autocommands for "*"
autocommand silent call CocActionAsync('highlight')

autocommand silent call CocActionAsync('highlight')

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorHold Autocommands for "*"
autocommand silent call CocActionAsync('highlight')

autocommand silent call CocActionAsync('highlight')

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing WinScrolled Autocommands for "*"
autocommand call s:HandleWinScrolled(+expand('<amatch>'))

Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing WinScrolled Autocommands for "*"
autocommand call s:HandleWinScrolled(+expand('<amatch>'))

Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorHold Autocommands for "*"
autocommand silent call CocActionAsync('highlight')

autocommand silent call CocActionAsync('highlight')

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing WinScrolled Autocommands for "*"
autocommand call s:HandleWinScrolled(+expand('<amatch>'))

Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorHold Autocommands for "*"
autocommand silent call CocActionAsync('highlight')

autocommand silent call CocActionAsync('highlight')

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing WinScrolled Autocommands for "*"
autocommand call s:HandleWinScrolled(+expand('<amatch>'))

Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorHold Autocommands for "*"
autocommand silent call CocActionAsync('highlight')

autocommand silent call CocActionAsync('highlight')

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing WinScrolled Autocommands for "*"
autocommand call s:HandleWinScrolled(+expand('<amatch>'))

Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorHold Autocommands for "*"
autocommand silent call CocActionAsync('highlight')

autocommand silent call CocActionAsync('highlight')

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing WinScrolled Autocommands for "*"
autocommand call s:HandleWinScrolled(+expand('<amatch>'))

Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorHold Autocommands for "*"
autocommand silent call CocActionAsync('highlight')

autocommand silent call CocActionAsync('highlight')

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing WinScrolled Autocommands for "*"
autocommand call s:HandleWinScrolled(+expand('<amatch>'))

Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorHold Autocommands for "*"
autocommand silent call CocActionAsync('highlight')

autocommand silent call CocActionAsync('highlight')

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing WinScrolled Autocommands for "*"
autocommand call s:HandleWinScrolled(+expand('<amatch>'))

Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing WinScrolled Autocommands for "*"
autocommand call s:HandleWinScrolled(+expand('<amatch>'))

Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing WinScrolled Autocommands for "*"
autocommand call s:HandleWinScrolled(+expand('<amatch>'))

Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorHold Autocommands for "*"
autocommand silent call CocActionAsync('highlight')

autocommand silent call CocActionAsync('highlight')

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing WinScrolled Autocommands for "*"
autocommand call s:HandleWinScrolled(+expand('<amatch>'))

Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorHold Autocommands for "*"
autocommand silent call CocActionAsync('highlight')

autocommand silent call CocActionAsync('highlight')

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing WinScrolled Autocommands for "*"
autocommand call s:HandleWinScrolled(+expand('<amatch>'))

Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorHold Autocommands for "*"
autocommand silent call CocActionAsync('highlight')

autocommand silent call CocActionAsync('highlight')

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing WinScrolled Autocommands for "*"
autocommand call s:HandleWinScrolled(+expand('<amatch>'))

Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing WinScrolled Autocommands for "*"
autocommand call s:HandleWinScrolled(+expand('<amatch>'))

Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorHold Autocommands for "*"
autocommand silent call CocActionAsync('highlight')

autocommand silent call CocActionAsync('highlight')

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing WinScrolled Autocommands for "*"
autocommand call s:HandleWinScrolled(+expand('<amatch>'))

Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorHold Autocommands for "*"
autocommand silent call CocActionAsync('highlight')

autocommand silent call CocActionAsync('highlight')

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing WinScrolled Autocommands for "*"
autocommand call s:HandleWinScrolled(+expand('<amatch>'))

Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorHold Autocommands for "*"
autocommand silent call CocActionAsync('highlight')

autocommand silent call CocActionAsync('highlight')

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing WinScrolled Autocommands for "*"
autocommand call s:HandleWinScrolled(+expand('<amatch>'))

Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorHold Autocommands for "*"
autocommand silent call CocActionAsync('highlight')

autocommand silent call CocActionAsync('highlight')

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing WinScrolled Autocommands for "*"
autocommand call s:HandleWinScrolled(+expand('<amatch>'))

Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorHold Autocommands for "*"
autocommand silent call CocActionAsync('highlight')

autocommand silent call CocActionAsync('highlight')

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing WinScrolled Autocommands for "*"
autocommand call s:HandleWinScrolled(+expand('<amatch>'))

Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorHold Autocommands for "*"
autocommand silent call CocActionAsync('highlight')

autocommand silent call CocActionAsync('highlight')

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorHold Autocommands for "*"
autocommand silent call CocActionAsync('highlight')

autocommand silent call CocActionAsync('highlight')

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorHold Autocommands for "*"
autocommand silent call CocActionAsync('highlight')

autocommand silent call CocActionAsync('highlight')

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorHold Autocommands for "*"
autocommand silent call CocActionAsync('highlight')

autocommand silent call CocActionAsync('highlight')

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing WinScrolled Autocommands for "*"
autocommand call s:HandleWinScrolled(+expand('<amatch>'))

Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing WinScrolled Autocommands for "*"
autocommand call s:HandleWinScrolled(+expand('<amatch>'))

Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing WinScrolled Autocommands for "*"
autocommand call s:HandleWinScrolled(+expand('<amatch>'))

Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorHold Autocommands for "*"
autocommand silent call CocActionAsync('highlight')

autocommand silent call CocActionAsync('highlight')

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing WinScrolled Autocommands for "*"
autocommand call s:HandleWinScrolled(+expand('<amatch>'))

Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing WinScrolled Autocommands for "*"
autocommand call s:HandleWinScrolled(+expand('<amatch>'))

Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing WinScrolled Autocommands for "*"
autocommand call s:HandleWinScrolled(+expand('<amatch>'))

Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorHold Autocommands for "*"
autocommand silent call CocActionAsync('highlight')

autocommand silent call CocActionAsync('highlight')

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing WinScrolled Autocommands for "*"
autocommand call s:HandleWinScrolled(+expand('<amatch>'))

Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing WinScrolled Autocommands for "*"
autocommand call s:HandleWinScrolled(+expand('<amatch>'))

Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorHold Autocommands for "*"
autocommand silent call CocActionAsync('highlight')

autocommand silent call CocActionAsync('highlight')

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing WinScrolled Autocommands for "*"
autocommand call s:HandleWinScrolled(+expand('<amatch>'))

Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorHold Autocommands for "*"
autocommand silent call CocActionAsync('highlight')

autocommand silent call CocActionAsync('highlight')

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing WinScrolled Autocommands for "*"
autocommand call s:HandleWinScrolled(+expand('<amatch>'))

Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorHold Autocommands for "*"
autocommand silent call CocActionAsync('highlight')

autocommand silent call CocActionAsync('highlight')

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing WinScrolled Autocommands for "*"
autocommand call s:HandleWinScrolled(+expand('<amatch>'))

Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorHold Autocommands for "*"
autocommand silent call CocActionAsync('highlight')

autocommand silent call CocActionAsync('highlight')

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing WinScrolled Autocommands for "*"
autocommand call s:HandleWinScrolled(+expand('<amatch>'))

Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing WinScrolled Autocommands for "*"
autocommand call s:HandleWinScrolled(+expand('<amatch>'))

Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorHold Autocommands for "*"
autocommand silent call CocActionAsync('highlight')

autocommand silent call CocActionAsync('highlight')

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing WinScrolled Autocommands for "*"
autocommand call s:HandleWinScrolled(+expand('<amatch>'))

Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing WinScrolled Autocommands for "*"
autocommand call s:HandleWinScrolled(+expand('<amatch>'))

Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorHold Autocommands for "*"
autocommand silent call CocActionAsync('highlight')

autocommand silent call CocActionAsync('highlight')

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing WinScrolled Autocommands for "*"
autocommand call s:HandleWinScrolled(+expand('<amatch>'))

Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorHold Autocommands for "*"
autocommand silent call CocActionAsync('highlight')

autocommand silent call CocActionAsync('highlight')

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing WinScrolled Autocommands for "*"
autocommand call s:HandleWinScrolled(+expand('<amatch>'))

Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorHold Autocommands for "*"
autocommand silent call CocActionAsync('highlight')

autocommand silent call CocActionAsync('highlight')

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing WinScrolled Autocommands for "*"
autocommand call s:HandleWinScrolled(+expand('<amatch>'))

Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorHold Autocommands for "*"
autocommand silent call CocActionAsync('highlight')

autocommand silent call CocActionAsync('highlight')

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing WinScrolled Autocommands for "*"
autocommand call s:HandleWinScrolled(+expand('<amatch>'))

Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorHold Autocommands for "*"
autocommand silent call CocActionAsync('highlight')

autocommand silent call CocActionAsync('highlight')

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing WinScrolled Autocommands for "*"
autocommand call s:HandleWinScrolled(+expand('<amatch>'))

Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing WinScrolled Autocommands for "*"
autocommand call s:HandleWinScrolled(+expand('<amatch>'))

Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorHold Autocommands for "*"
autocommand silent call CocActionAsync('highlight')

autocommand silent call CocActionAsync('highlight')

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing WinScrolled Autocommands for "*"
autocommand call s:HandleWinScrolled(+expand('<amatch>'))

Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorHold Autocommands for "*"
autocommand silent call CocActionAsync('highlight')

autocommand silent call CocActionAsync('highlight')

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing WinLeave Autocommands for "*"
autocommand call s:Autocmd('WinLeave', win_getid())

Executing WinLeave Autocommands for "*"
autocommand call s:Remove_Matches()

Executing WinEnter Autocommands for "*"
autocommand call s:dopopd()

Executing WinEnter Autocommands for "*"
autocommand call <sid>on_window_changed('WinEnter')

Executing WinEnter Autocommands for "*"
autocommand call coc#float#nvim_win_enter(win_getid())

autocommand call s:Autocmd('WinEnter', win_getid())

Executing WinEnter Autocommands for "*"
autocommand let g:fzf#vim#buffers[bufnr('')] = reltimefloat(reltime())

Executing WinEnter Autocommands for "*"
autocommand let s:tmux_is_last_pane = 0

Executing WinEnter Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing WinEnter Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing WinEnter Autocommands for "*"
autocommand call s:auto_restore_focus()

Executing BufEnter Autocommands for "*"
autocommand set fo-=c fo-=r fo-=o

Executing BufEnter Autocommands for "*"
autocommand call s:Autocmd('BufEnter', +expand('<abuf>'))

Executing BufEnter Autocommands for "*"
autocommand if conflict_marker#detect#markers() | call s:on_detected() | endif

Executing BufEnter Autocommands for "*"
autocommand call s:mru_append(expand('<amatch>'))

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing User Autocommands for "AirlineModeChanged"
autocommand call airline#mode_changed()

Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 3: sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component/repo.vim"
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

not found in runtime path: "autoload/vital/_gina/Git.vim"
function <SNR>251__get_reference(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 139
function <SNR>251_relpath(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 76
function <SNR>251__vital_loaded(V) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 1
function <SNR>251__get_reference_trad(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 147
function <SNR>251_abspath(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 68
function <SNR>251_ref(git, refname) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 102
function <SNR>251_new(path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 17
function <SNR>251__vital_depends() abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 8
function <SNR>251__get_packed_refs(git) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 124
function <SNR>251_resolve(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 87
function <SNR>251__get_reference_packed(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 168
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component/repo.vim
continuing in <SNR>135_config_gina_branch
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 3: sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component/repo.vim"
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

not found in runtime path: "autoload/vital/_gina/Git.vim"
function <SNR>251__get_reference(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 139
function <SNR>251_relpath(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 76
function <SNR>251__vital_loaded(V) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 1
function <SNR>251__get_reference_trad(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 147
function <SNR>251_abspath(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 68
function <SNR>251_ref(git, refname) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 102
function <SNR>251_new(path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 17
function <SNR>251__vital_depends() abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 8
function <SNR>251__get_packed_refs(git) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 124
function <SNR>251_resolve(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 87
function <SNR>251__get_reference_packed(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 168
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component/repo.vim
continuing in <SNR>135_config_gina_branch
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/coc)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/coc/highlight.vim"
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/coc/highlight.vim
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 3: sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component/repo.vim"
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

not found in runtime path: "autoload/vital/_gina/Git.vim"
function <SNR>251__get_reference(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 139
function <SNR>251_relpath(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 76
function <SNR>251__vital_loaded(V) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 1
function <SNR>251__get_reference_trad(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 147
function <SNR>251_abspath(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 68
function <SNR>251_ref(git, refname) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 102
function <SNR>251_new(path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 17
function <SNR>251__vital_depends() abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 8
function <SNR>251__get_packed_refs(git) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 124
function <SNR>251_resolve(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 87
function <SNR>251__get_reference_packed(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 168
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component/repo.vim
continuing in <SNR>135_config_gina_branch
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 3: sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component/repo.vim"
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

not found in runtime path: "autoload/vital/_gina/Git.vim"
function <SNR>251__get_reference(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 139
function <SNR>251_relpath(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 76
function <SNR>251__vital_loaded(V) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 1
function <SNR>251__get_reference_trad(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 147
function <SNR>251_abspath(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 68
function <SNR>251_ref(git, refname) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 102
function <SNR>251_new(path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 17
function <SNR>251__vital_depends() abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 8
function <SNR>251__get_packed_refs(git) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 124
function <SNR>251_resolve(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 87
function <SNR>251__get_reference_packed(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 168
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component/repo.vim
continuing in <SNR>135_config_gina_branch
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 3: sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component/repo.vim"
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

not found in runtime path: "autoload/vital/_gina/Git.vim"
function <SNR>251__get_reference(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 139
function <SNR>251_relpath(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 76
function <SNR>251__vital_loaded(V) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 1
function <SNR>251__get_reference_trad(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 147
function <SNR>251_abspath(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 68
function <SNR>251_ref(git, refname) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 102
function <SNR>251_new(path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 17
function <SNR>251__vital_depends() abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 8
function <SNR>251__get_packed_refs(git) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 124
function <SNR>251_resolve(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 87
function <SNR>251__get_reference_packed(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 168
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component/repo.vim
continuing in <SNR>135_config_gina_branch
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 3: sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component/repo.vim"
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

not found in runtime path: "autoload/vital/_gina/Git.vim"
function <SNR>251__get_reference(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 139
function <SNR>251_relpath(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 76
function <SNR>251__vital_loaded(V) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 1
function <SNR>251__get_reference_trad(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 147
function <SNR>251_abspath(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 68
function <SNR>251_ref(git, refname) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 102
function <SNR>251_new(path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 17
function <SNR>251__vital_depends() abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 8
function <SNR>251__get_packed_refs(git) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 124
function <SNR>251_resolve(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 87
function <SNR>251__get_reference_packed(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 168
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component/repo.vim
continuing in <SNR>135_config_gina_branch
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 3: sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component/repo.vim"
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

not found in runtime path: "autoload/vital/_gina/Git.vim"
function <SNR>251__get_reference(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 139
function <SNR>251_relpath(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 76
function <SNR>251__vital_loaded(V) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 1
function <SNR>251__get_reference_trad(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 147
function <SNR>251_abspath(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 68
function <SNR>251_ref(git, refname) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 102
function <SNR>251_new(path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 17
function <SNR>251__vital_depends() abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 8
function <SNR>251__get_packed_refs(git) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 124
function <SNR>251_resolve(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 87
function <SNR>251__get_reference_packed(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 168
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component/repo.vim
continuing in <SNR>135_config_gina_branch
Executing CursorHold Autocommands for "*"
autocommand silent call CocActionAsync('highlight')

autocommand silent call CocActionAsync('highlight')

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 3: sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component/repo.vim"
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

not found in runtime path: "autoload/vital/_gina/Git.vim"
function <SNR>251__get_reference(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 139
function <SNR>251_relpath(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 76
function <SNR>251__vital_loaded(V) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 1
function <SNR>251__get_reference_trad(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 147
function <SNR>251_abspath(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 68
function <SNR>251_ref(git, refname) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 102
function <SNR>251_new(path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 17
function <SNR>251__vital_depends() abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 8
function <SNR>251__get_packed_refs(git) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 124
function <SNR>251_resolve(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 87
function <SNR>251__get_reference_packed(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 168
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component/repo.vim
continuing in <SNR>135_config_gina_branch
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 3: sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component/repo.vim"
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

not found in runtime path: "autoload/vital/_gina/Git.vim"
function <SNR>251__get_reference(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 139
function <SNR>251_relpath(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 76
function <SNR>251__vital_loaded(V) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 1
function <SNR>251__get_reference_trad(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 147
function <SNR>251_abspath(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 68
function <SNR>251_ref(git, refname) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 102
function <SNR>251_new(path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 17
function <SNR>251__vital_depends() abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 8
function <SNR>251__get_packed_refs(git) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 124
function <SNR>251_resolve(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 87
function <SNR>251__get_reference_packed(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 168
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component/repo.vim
continuing in <SNR>135_config_gina_branch
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 3: sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component/repo.vim"
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

not found in runtime path: "autoload/vital/_gina/Git.vim"
function <SNR>251__get_reference(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 139
function <SNR>251_relpath(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 76
function <SNR>251__vital_loaded(V) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 1
function <SNR>251__get_reference_trad(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 147
function <SNR>251_abspath(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 68
function <SNR>251_ref(git, refname) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 102
function <SNR>251_new(path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 17
function <SNR>251__vital_depends() abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 8
function <SNR>251__get_packed_refs(git) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 124
function <SNR>251_resolve(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 87
function <SNR>251__get_reference_packed(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 168
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component/repo.vim
continuing in <SNR>135_config_gina_branch
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 3: sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component/repo.vim"
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

not found in runtime path: "autoload/vital/_gina/Git.vim"
function <SNR>251__get_reference(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 139
function <SNR>251_relpath(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 76
function <SNR>251__vital_loaded(V) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 1
function <SNR>251__get_reference_trad(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 147
function <SNR>251_abspath(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 68
function <SNR>251_ref(git, refname) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 102
function <SNR>251_new(path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 17
function <SNR>251__vital_depends() abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 8
function <SNR>251__get_packed_refs(git) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 124
function <SNR>251_resolve(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 87
function <SNR>251__get_reference_packed(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 168
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component/repo.vim
continuing in <SNR>135_config_gina_branch
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 3: sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component/repo.vim"
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

not found in runtime path: "autoload/vital/_gina/Git.vim"
function <SNR>251__get_reference(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 139
function <SNR>251_relpath(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 76
function <SNR>251__vital_loaded(V) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 1
function <SNR>251__get_reference_trad(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 147
function <SNR>251_abspath(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 68
function <SNR>251_ref(git, refname) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 102
function <SNR>251_new(path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 17
function <SNR>251__vital_depends() abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 8
function <SNR>251__get_packed_refs(git) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 124
function <SNR>251_resolve(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 87
function <SNR>251__get_reference_packed(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 168
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component/repo.vim
continuing in <SNR>135_config_gina_branch
Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 3: sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component/repo.vim"
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

not found in runtime path: "autoload/vital/_gina/Git.vim"
function <SNR>251__get_reference(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 139
function <SNR>251_relpath(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 76
function <SNR>251__vital_loaded(V) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 1
function <SNR>251__get_reference_trad(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 147
function <SNR>251_abspath(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 68
function <SNR>251_ref(git, refname) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 102
function <SNR>251_new(path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 17
function <SNR>251__vital_depends() abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 8
function <SNR>251__get_packed_refs(git) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 124
function <SNR>251_resolve(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 87
function <SNR>251__get_reference_packed(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 168
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component/repo.vim
continuing in <SNR>135_config_gina_branch
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 3: sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component/repo.vim"
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

not found in runtime path: "autoload/vital/_gina/Git.vim"
function <SNR>251__get_reference(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 139
function <SNR>251_relpath(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 76
function <SNR>251__vital_loaded(V) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 1
function <SNR>251__get_reference_trad(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 147
function <SNR>251_abspath(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 68
function <SNR>251_ref(git, refname) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 102
function <SNR>251_new(path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 17
function <SNR>251__vital_depends() abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 8
function <SNR>251__get_packed_refs(git) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 124
function <SNR>251_resolve(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 87
function <SNR>251__get_reference_packed(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 168
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component/repo.vim
continuing in <SNR>135_config_gina_branch
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 3: sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component/repo.vim"
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

not found in runtime path: "autoload/vital/_gina/Git.vim"
function <SNR>251__get_reference(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 139
function <SNR>251_relpath(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 76
function <SNR>251__vital_loaded(V) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 1
function <SNR>251__get_reference_trad(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 147
function <SNR>251_abspath(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 68
function <SNR>251_ref(git, refname) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 102
function <SNR>251_new(path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 17
function <SNR>251__vital_depends() abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 8
function <SNR>251__get_packed_refs(git) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 124
function <SNR>251_resolve(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 87
function <SNR>251__get_reference_packed(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 168
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component/repo.vim
continuing in <SNR>135_config_gina_branch
Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 3: sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component/repo.vim"
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

not found in runtime path: "autoload/vital/_gina/Git.vim"
function <SNR>251__get_reference(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 139
function <SNR>251_relpath(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 76
function <SNR>251__vital_loaded(V) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 1
function <SNR>251__get_reference_trad(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 147
function <SNR>251_abspath(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 68
function <SNR>251_ref(git, refname) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 102
function <SNR>251_new(path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 17
function <SNR>251__vital_depends() abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 8
function <SNR>251__get_packed_refs(git) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 124
function <SNR>251_resolve(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 87
function <SNR>251__get_reference_packed(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 168
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component/repo.vim
continuing in <SNR>135_config_gina_branch
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 3: sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component/repo.vim"
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

not found in runtime path: "autoload/vital/_gina/Git.vim"
function <SNR>251__get_reference(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 139
function <SNR>251_relpath(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 76
function <SNR>251__vital_loaded(V) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 1
function <SNR>251__get_reference_trad(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 147
function <SNR>251_abspath(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 68
function <SNR>251_ref(git, refname) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 102
function <SNR>251_new(path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 17
function <SNR>251__vital_depends() abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 8
function <SNR>251__get_packed_refs(git) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 124
function <SNR>251_resolve(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 87
function <SNR>251__get_reference_packed(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 168
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component/repo.vim
continuing in <SNR>135_config_gina_branch
Executing CursorHold Autocommands for "*"
autocommand silent call CocActionAsync('highlight')

autocommand silent call CocActionAsync('highlight')

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 3: sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component/repo.vim"
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

not found in runtime path: "autoload/vital/_gina/Git.vim"
function <SNR>251__get_reference(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 139
function <SNR>251_relpath(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 76
function <SNR>251__vital_loaded(V) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 1
function <SNR>251__get_reference_trad(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 147
function <SNR>251_abspath(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 68
function <SNR>251_ref(git, refname) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 102
function <SNR>251_new(path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 17
function <SNR>251__vital_depends() abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 8
function <SNR>251__get_packed_refs(git) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 124
function <SNR>251_resolve(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 87
function <SNR>251__get_reference_packed(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 168
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component/repo.vim
continuing in <SNR>135_config_gina_branch
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 3: sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component/repo.vim"
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

not found in runtime path: "autoload/vital/_gina/Git.vim"
function <SNR>251__get_reference(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 139
function <SNR>251_relpath(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 76
function <SNR>251__vital_loaded(V) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 1
function <SNR>251__get_reference_trad(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 147
function <SNR>251_abspath(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 68
function <SNR>251_ref(git, refname) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 102
function <SNR>251_new(path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 17
function <SNR>251__vital_depends() abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 8
function <SNR>251__get_packed_refs(git) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 124
function <SNR>251_resolve(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 87
function <SNR>251__get_reference_packed(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 168
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component/repo.vim
continuing in <SNR>135_config_gina_branch
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 3: sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component/repo.vim"
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

not found in runtime path: "autoload/vital/_gina/Git.vim"
function <SNR>251__get_reference(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 139
function <SNR>251_relpath(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 76
function <SNR>251__vital_loaded(V) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 1
function <SNR>251__get_reference_trad(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 147
function <SNR>251_abspath(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 68
function <SNR>251_ref(git, refname) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 102
function <SNR>251_new(path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 17
function <SNR>251__vital_depends() abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 8
function <SNR>251__get_packed_refs(git) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 124
function <SNR>251_resolve(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 87
function <SNR>251__get_reference_packed(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 168
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component/repo.vim
continuing in <SNR>135_config_gina_branch
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 3: sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component/repo.vim"
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

not found in runtime path: "autoload/vital/_gina/Git.vim"
function <SNR>251__get_reference(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 139
function <SNR>251_relpath(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 76
function <SNR>251__vital_loaded(V) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 1
function <SNR>251__get_reference_trad(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 147
function <SNR>251_abspath(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 68
function <SNR>251_ref(git, refname) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 102
function <SNR>251_new(path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 17
function <SNR>251__vital_depends() abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 8
function <SNR>251__get_packed_refs(git) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 124
function <SNR>251_resolve(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 87
function <SNR>251__get_reference_packed(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 168
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component/repo.vim
continuing in <SNR>135_config_gina_branch
Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 3: sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component/repo.vim"
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

not found in runtime path: "autoload/vital/_gina/Git.vim"
function <SNR>251__get_reference(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 139
function <SNR>251_relpath(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 76
function <SNR>251__vital_loaded(V) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 1
function <SNR>251__get_reference_trad(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 147
function <SNR>251_abspath(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 68
function <SNR>251_ref(git, refname) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 102
function <SNR>251_new(path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 17
function <SNR>251__vital_depends() abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 8
function <SNR>251__get_packed_refs(git) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 124
function <SNR>251_resolve(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 87
function <SNR>251__get_reference_packed(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 168
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component/repo.vim
continuing in <SNR>135_config_gina_branch
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 3: sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component/repo.vim"
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

not found in runtime path: "autoload/vital/_gina/Git.vim"
function <SNR>251__get_reference(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 139
function <SNR>251_relpath(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 76
function <SNR>251__vital_loaded(V) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 1
function <SNR>251__get_reference_trad(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 147
function <SNR>251_abspath(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 68
function <SNR>251_ref(git, refname) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 102
function <SNR>251_new(path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 17
function <SNR>251__vital_depends() abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 8
function <SNR>251__get_packed_refs(git) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 124
function <SNR>251_resolve(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 87
function <SNR>251__get_reference_packed(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 168
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component/repo.vim
continuing in <SNR>135_config_gina_branch
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 3: sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component/repo.vim"
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

not found in runtime path: "autoload/vital/_gina/Git.vim"
function <SNR>251__get_reference(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 139
function <SNR>251_relpath(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 76
function <SNR>251__vital_loaded(V) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 1
function <SNR>251__get_reference_trad(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 147
function <SNR>251_abspath(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 68
function <SNR>251_ref(git, refname) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 102
function <SNR>251_new(path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 17
function <SNR>251__vital_depends() abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 8
function <SNR>251__get_packed_refs(git) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 124
function <SNR>251_resolve(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 87
function <SNR>251__get_reference_packed(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 168
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component/repo.vim
continuing in <SNR>135_config_gina_branch
Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 3: sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component/repo.vim"
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

not found in runtime path: "autoload/vital/_gina/Git.vim"
function <SNR>251__get_reference(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 139
function <SNR>251_relpath(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 76
function <SNR>251__vital_loaded(V) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 1
function <SNR>251__get_reference_trad(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 147
function <SNR>251_abspath(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 68
function <SNR>251_ref(git, refname) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 102
function <SNR>251_new(path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 17
function <SNR>251__vital_depends() abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 8
function <SNR>251__get_packed_refs(git) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 124
function <SNR>251_resolve(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 87
function <SNR>251__get_reference_packed(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 168
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component/repo.vim
continuing in <SNR>135_config_gina_branch
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 3: sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component/repo.vim"
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

not found in runtime path: "autoload/vital/_gina/Git.vim"
function <SNR>251__get_reference(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 139
function <SNR>251_relpath(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 76
function <SNR>251__vital_loaded(V) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 1
function <SNR>251__get_reference_trad(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 147
function <SNR>251_abspath(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 68
function <SNR>251_ref(git, refname) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 102
function <SNR>251_new(path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 17
function <SNR>251__vital_depends() abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 8
function <SNR>251__get_packed_refs(git) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 124
function <SNR>251_resolve(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 87
function <SNR>251__get_reference_packed(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 168
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component/repo.vim
continuing in <SNR>135_config_gina_branch
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 3: sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component/repo.vim"
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

not found in runtime path: "autoload/vital/_gina/Git.vim"
function <SNR>251__get_reference(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 139
function <SNR>251_relpath(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 76
function <SNR>251__vital_loaded(V) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 1
function <SNR>251__get_reference_trad(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 147
function <SNR>251_abspath(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 68
function <SNR>251_ref(git, refname) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 102
function <SNR>251_new(path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 17
function <SNR>251__vital_depends() abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 8
function <SNR>251__get_packed_refs(git) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 124
function <SNR>251_resolve(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 87
function <SNR>251__get_reference_packed(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 168
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component/repo.vim
continuing in <SNR>135_config_gina_branch
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 3: sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component/repo.vim"
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

not found in runtime path: "autoload/vital/_gina/Git.vim"
function <SNR>251__get_reference(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 139
function <SNR>251_relpath(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 76
function <SNR>251__vital_loaded(V) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 1
function <SNR>251__get_reference_trad(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 147
function <SNR>251_abspath(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 68
function <SNR>251_ref(git, refname) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 102
function <SNR>251_new(path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 17
function <SNR>251__vital_depends() abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 8
function <SNR>251__get_packed_refs(git) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 124
function <SNR>251_resolve(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 87
function <SNR>251__get_reference_packed(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 168
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component/repo.vim
continuing in <SNR>135_config_gina_branch
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 3: sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component/repo.vim"
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

not found in runtime path: "autoload/vital/_gina/Git.vim"
function <SNR>251__get_reference(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 139
function <SNR>251_relpath(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 76
function <SNR>251__vital_loaded(V) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 1
function <SNR>251__get_reference_trad(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 147
function <SNR>251_abspath(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 68
function <SNR>251_ref(git, refname) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 102
function <SNR>251_new(path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 17
function <SNR>251__vital_depends() abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 8
function <SNR>251__get_packed_refs(git) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 124
function <SNR>251_resolve(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 87
function <SNR>251__get_reference_packed(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 168
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component/repo.vim
continuing in <SNR>135_config_gina_branch
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 3: sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component/repo.vim"
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

not found in runtime path: "autoload/vital/_gina/Git.vim"
function <SNR>251__get_reference(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 139
function <SNR>251_relpath(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 76
function <SNR>251__vital_loaded(V) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 1
function <SNR>251__get_reference_trad(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 147
function <SNR>251_abspath(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 68
function <SNR>251_ref(git, refname) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 102
function <SNR>251_new(path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 17
function <SNR>251__vital_depends() abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 8
function <SNR>251__get_packed_refs(git) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 124
function <SNR>251_resolve(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 87
function <SNR>251__get_reference_packed(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 168
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component/repo.vim
continuing in <SNR>135_config_gina_branch
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 3: sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component/repo.vim"
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

not found in runtime path: "autoload/vital/_gina/Git.vim"
function <SNR>251__get_reference(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 139
function <SNR>251_relpath(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 76
function <SNR>251__vital_loaded(V) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 1
function <SNR>251__get_reference_trad(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 147
function <SNR>251_abspath(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 68
function <SNR>251_ref(git, refname) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 102
function <SNR>251_new(path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 17
function <SNR>251__vital_depends() abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 8
function <SNR>251__get_packed_refs(git) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 124
function <SNR>251_resolve(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 87
function <SNR>251__get_reference_packed(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 168
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component/repo.vim
continuing in <SNR>135_config_gina_branch
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 3: sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component/repo.vim"
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

not found in runtime path: "autoload/vital/_gina/Git.vim"
function <SNR>251__get_reference(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 139
function <SNR>251_relpath(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 76
function <SNR>251__vital_loaded(V) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 1
function <SNR>251__get_reference_trad(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 147
function <SNR>251_abspath(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 68
function <SNR>251_ref(git, refname) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 102
function <SNR>251_new(path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 17
function <SNR>251__vital_depends() abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 8
function <SNR>251__get_packed_refs(git) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 124
function <SNR>251_resolve(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 87
function <SNR>251__get_reference_packed(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 168
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component/repo.vim
continuing in <SNR>135_config_gina_branch
Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 3: sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component/repo.vim"
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

not found in runtime path: "autoload/vital/_gina/Git.vim"
function <SNR>251__get_reference(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 139
function <SNR>251_relpath(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 76
function <SNR>251__vital_loaded(V) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 1
function <SNR>251__get_reference_trad(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 147
function <SNR>251_abspath(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 68
function <SNR>251_ref(git, refname) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 102
function <SNR>251_new(path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 17
function <SNR>251__vital_depends() abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 8
function <SNR>251__get_packed_refs(git) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 124
function <SNR>251_resolve(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 87
function <SNR>251__get_reference_packed(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 168
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component/repo.vim
continuing in <SNR>135_config_gina_branch
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 3: sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component/repo.vim"
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

not found in runtime path: "autoload/vital/_gina/Git.vim"
function <SNR>251__get_reference(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 139
function <SNR>251_relpath(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 76
function <SNR>251__vital_loaded(V) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 1
function <SNR>251__get_reference_trad(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 147
function <SNR>251_abspath(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 68
function <SNR>251_ref(git, refname) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 102
function <SNR>251_new(path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 17
function <SNR>251__vital_depends() abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 8
function <SNR>251__get_packed_refs(git) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 124
function <SNR>251_resolve(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 87
function <SNR>251__get_reference_packed(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 168
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component/repo.vim
continuing in <SNR>135_config_gina_branch
Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 3: sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component/repo.vim"
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

not found in runtime path: "autoload/vital/_gina/Git.vim"
function <SNR>251__get_reference(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 139
function <SNR>251_relpath(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 76
function <SNR>251__vital_loaded(V) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 1
function <SNR>251__get_reference_trad(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 147
function <SNR>251_abspath(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 68
function <SNR>251_ref(git, refname) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 102
function <SNR>251_new(path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 17
function <SNR>251__vital_depends() abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 8
function <SNR>251__get_packed_refs(git) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 124
function <SNR>251_resolve(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 87
function <SNR>251__get_reference_packed(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 168
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component/repo.vim
continuing in <SNR>135_config_gina_branch
Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 3: sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component/repo.vim"
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

not found in runtime path: "autoload/vital/_gina/Git.vim"
function <SNR>251__get_reference(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 139
function <SNR>251_relpath(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 76
function <SNR>251__vital_loaded(V) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 1
function <SNR>251__get_reference_trad(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 147
function <SNR>251_abspath(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 68
function <SNR>251_ref(git, refname) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 102
function <SNR>251_new(path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 17
function <SNR>251__vital_depends() abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 8
function <SNR>251__get_packed_refs(git) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 124
function <SNR>251_resolve(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 87
function <SNR>251__get_reference_packed(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 168
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component/repo.vim
continuing in <SNR>135_config_gina_branch
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 3: sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component/repo.vim"
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

not found in runtime path: "autoload/vital/_gina/Git.vim"
function <SNR>251__get_reference(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 139
function <SNR>251_relpath(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 76
function <SNR>251__vital_loaded(V) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 1
function <SNR>251__get_reference_trad(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 147
function <SNR>251_abspath(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 68
function <SNR>251_ref(git, refname) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 102
function <SNR>251_new(path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 17
function <SNR>251__vital_depends() abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 8
function <SNR>251__get_packed_refs(git) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 124
function <SNR>251_resolve(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 87
function <SNR>251__get_reference_packed(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 168
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component/repo.vim
continuing in <SNR>135_config_gina_branch
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 3: sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component/repo.vim"
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

not found in runtime path: "autoload/vital/_gina/Git.vim"
function <SNR>251__get_reference(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 139
function <SNR>251_relpath(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 76
function <SNR>251__vital_loaded(V) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 1
function <SNR>251__get_reference_trad(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 147
function <SNR>251_abspath(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 68
function <SNR>251_ref(git, refname) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 102
function <SNR>251_new(path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 17
function <SNR>251__vital_depends() abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 8
function <SNR>251__get_packed_refs(git) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 124
function <SNR>251_resolve(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 87
function <SNR>251__get_reference_packed(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 168
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component/repo.vim
continuing in <SNR>135_config_gina_branch
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 3: sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component/repo.vim"
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

not found in runtime path: "autoload/vital/_gina/Git.vim"
function <SNR>251__get_reference(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 139
function <SNR>251_relpath(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 76
function <SNR>251__vital_loaded(V) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 1
function <SNR>251__get_reference_trad(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 147
function <SNR>251_abspath(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 68
function <SNR>251_ref(git, refname) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 102
function <SNR>251_new(path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 17
function <SNR>251__vital_depends() abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 8
function <SNR>251__get_packed_refs(git) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 124
function <SNR>251_resolve(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 87
function <SNR>251__get_reference_packed(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 168
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component/repo.vim
continuing in <SNR>135_config_gina_branch
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 3: sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component/repo.vim"
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

not found in runtime path: "autoload/vital/_gina/Git.vim"
function <SNR>251__get_reference(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 139
function <SNR>251_relpath(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 76
function <SNR>251__vital_loaded(V) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 1
function <SNR>251__get_reference_trad(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 147
function <SNR>251_abspath(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 68
function <SNR>251_ref(git, refname) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 102
function <SNR>251_new(path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 17
function <SNR>251__vital_depends() abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 8
function <SNR>251__get_packed_refs(git) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 124
function <SNR>251_resolve(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 87
function <SNR>251__get_reference_packed(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 168
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component/repo.vim
continuing in <SNR>135_config_gina_branch
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 3: sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component/repo.vim"
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

not found in runtime path: "autoload/vital/_gina/Git.vim"
function <SNR>251__get_reference(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 139
function <SNR>251_relpath(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 76
function <SNR>251__vital_loaded(V) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 1
function <SNR>251__get_reference_trad(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 147
function <SNR>251_abspath(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 68
function <SNR>251_ref(git, refname) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 102
function <SNR>251_new(path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 17
function <SNR>251__vital_depends() abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 8
function <SNR>251__get_packed_refs(git) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 124
function <SNR>251_resolve(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 87
function <SNR>251__get_reference_packed(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 168
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component/repo.vim
continuing in <SNR>135_config_gina_branch
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 3: sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component/repo.vim"
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

not found in runtime path: "autoload/vital/_gina/Git.vim"
function <SNR>251__get_reference(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 139
function <SNR>251_relpath(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 76
function <SNR>251__vital_loaded(V) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 1
function <SNR>251__get_reference_trad(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 147
function <SNR>251_abspath(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 68
function <SNR>251_ref(git, refname) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 102
function <SNR>251_new(path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 17
function <SNR>251__vital_depends() abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 8
function <SNR>251__get_packed_refs(git) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 124
function <SNR>251_resolve(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 87
function <SNR>251__get_reference_packed(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 168
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component/repo.vim
continuing in <SNR>135_config_gina_branch
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 3: sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component/repo.vim"
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

not found in runtime path: "autoload/vital/_gina/Git.vim"
function <SNR>251__get_reference(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 139
function <SNR>251_relpath(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 76
function <SNR>251__vital_loaded(V) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 1
function <SNR>251__get_reference_trad(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 147
function <SNR>251_abspath(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 68
function <SNR>251_ref(git, refname) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 102
function <SNR>251_new(path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 17
function <SNR>251__vital_depends() abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 8
function <SNR>251__get_packed_refs(git) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 124
function <SNR>251_resolve(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 87
function <SNR>251__get_reference_packed(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 168
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component/repo.vim
continuing in <SNR>135_config_gina_branch
Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 3: sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component/repo.vim"
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

not found in runtime path: "autoload/vital/_gina/Git.vim"
function <SNR>251__get_reference(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 139
function <SNR>251_relpath(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 76
function <SNR>251__vital_loaded(V) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 1
function <SNR>251__get_reference_trad(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 147
function <SNR>251_abspath(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 68
function <SNR>251_ref(git, refname) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 102
function <SNR>251_new(path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 17
function <SNR>251__vital_depends() abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 8
function <SNR>251__get_packed_refs(git) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 124
function <SNR>251_resolve(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 87
function <SNR>251__get_reference_packed(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 168
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component/repo.vim
continuing in <SNR>135_config_gina_branch
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 3: sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component/repo.vim"
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

not found in runtime path: "autoload/vital/_gina/Git.vim"
function <SNR>251__get_reference(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 139
function <SNR>251_relpath(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 76
function <SNR>251__vital_loaded(V) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 1
function <SNR>251__get_reference_trad(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 147
function <SNR>251_abspath(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 68
function <SNR>251_ref(git, refname) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 102
function <SNR>251_new(path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 17
function <SNR>251__vital_depends() abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 8
function <SNR>251__get_packed_refs(git) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 124
function <SNR>251_resolve(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 87
function <SNR>251__get_reference_packed(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 168
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component/repo.vim
continuing in <SNR>135_config_gina_branch
Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 3: sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component/repo.vim"
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

not found in runtime path: "autoload/vital/_gina/Git.vim"
function <SNR>251__get_reference(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 139
function <SNR>251_relpath(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 76
function <SNR>251__vital_loaded(V) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 1
function <SNR>251__get_reference_trad(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 147
function <SNR>251_abspath(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 68
function <SNR>251_ref(git, refname) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 102
function <SNR>251_new(path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 17
function <SNR>251__vital_depends() abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 8
function <SNR>251__get_packed_refs(git) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 124
function <SNR>251_resolve(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 87
function <SNR>251__get_reference_packed(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 168
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component/repo.vim
continuing in <SNR>135_config_gina_branch
Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 3: sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component/repo.vim"
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

not found in runtime path: "autoload/vital/_gina/Git.vim"
function <SNR>251__get_reference(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 139
function <SNR>251_relpath(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 76
function <SNR>251__vital_loaded(V) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 1
function <SNR>251__get_reference_trad(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 147
function <SNR>251_abspath(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 68
function <SNR>251_ref(git, refname) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 102
function <SNR>251_new(path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 17
function <SNR>251__vital_depends() abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 8
function <SNR>251__get_packed_refs(git) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 124
function <SNR>251_resolve(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 87
function <SNR>251__get_reference_packed(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 168
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component/repo.vim
continuing in <SNR>135_config_gina_branch
Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()


Executing WinLeave Autocommands for "*"
autocommand call s:Autocmd('WinLeave', win_getid())

Executing WinLeave Autocommands for "*"
autocommand call s:Remove_Matches()

Executing WinEnter Autocommands for "*"
autocommand call s:dopopd()

Executing WinEnter Autocommands for "*"
autocommand call <sid>on_window_changed('WinEnter')

Executing WinEnter Autocommands for "*"
autocommand call coc#float#nvim_win_enter(win_getid())

autocommand call s:Autocmd('WinEnter', win_getid())

Executing WinEnter Autocommands for "*"
autocommand let g:fzf#vim#buffers[bufnr('')] = reltimefloat(reltime())

Executing WinEnter Autocommands for "*"
autocommand let s:tmux_is_last_pane = 0

Executing WinEnter Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing WinEnter Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing WinEnter Autocommands for "*"
autocommand call s:auto_restore_focus()

Executing BufEnter Autocommands for "*"
autocommand set fo-=c fo-=r fo-=o

Executing BufEnter Autocommands for "*"
autocommand call s:Autocmd('BufEnter', +expand('<abuf>'))

Executing BufEnter Autocommands for "*"
autocommand if conflict_marker#detect#markers() | call s:on_detected() | endif

Executing BufEnter Autocommands for "*"
autocommand call s:mru_append(expand('<amatch>'))

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing User Autocommands for "AirlineModeChanged"
autocommand call airline#mode_changed()

Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/coc)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/coc/highlight.vim"
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/coc/highlight.vim
Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing WinScrolled Autocommands for "*"
autocommand call s:HandleWinScrolled(+expand('<amatch>'))

Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing WinScrolled Autocommands for "*"
autocommand call s:HandleWinScrolled(+expand('<amatch>'))

Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing WinScrolled Autocommands for "*"
autocommand call s:HandleWinScrolled(+expand('<amatch>'))

Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing WinScrolled Autocommands for "*"
autocommand call s:HandleWinScrolled(+expand('<amatch>'))

Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing WinScrolled Autocommands for "*"
autocommand call s:HandleWinScrolled(+expand('<amatch>'))

Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing WinScrolled Autocommands for "*"
autocommand call s:HandleWinScrolled(+expand('<amatch>'))

Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing WinScrolled Autocommands for "*"
autocommand call s:HandleWinScrolled(+expand('<amatch>'))

Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorHold Autocommands for "*"
autocommand silent call CocActionAsync('highlight')

autocommand silent call CocActionAsync('highlight')

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorHold Autocommands for "*"
autocommand silent call CocActionAsync('highlight')

autocommand silent call CocActionAsync('highlight')

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorHold Autocommands for "*"
autocommand silent call CocActionAsync('highlight')

autocommand silent call CocActionAsync('highlight')

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing TextChanged Autocommands for "*"
autocommand call s:Autocmd('TextChanged', +expand('<abuf>'), getbufvar(+expand('<abuf>'), 'changedtick'))

Executing TextChanged Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorHold Autocommands for "*"
autocommand silent call CocActionAsync('highlight')

autocommand silent call CocActionAsync('highlight')

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing TextChanged Autocommands for "*"
autocommand call s:Autocmd('TextChanged', +expand('<abuf>'), getbufvar(+expand('<abuf>'), 'changedtick'))

Executing TextChanged Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()


Executing BufWritePre Autocommands for "*"
autocommand call s:SyncAutocmd('BufWritePre', +expand('<abuf>'), bufname(+expand('<abuf>')), getbufvar(+expand('<abuf>'), 'changedtick'))

"index.cpp" 
"index.cpp" 53L, 1000B written
Executing BufWritePost Autocommands for "*"
autocommand call s:Autocmd('BufWritePost', +expand('<abuf>'), getbufvar(+expand('<abuf>'), 'changedtick'))

Executing BufWritePost Autocommands for "*"
autocommand call s:reset_untracked_cache(0)

Executing BufWritePost Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing BufWritePost Autocommands for "*"
autocommand call s:mru_append(expand('<amatch>'))

autocommand call s:mrw_append(expand('<amatch>'))

"index.cpp" 53L, 1000B written
Executing CursorHold Autocommands for "*"
autocommand silent call CocActionAsync('highlight')

autocommand silent call CocActionAsync('highlight')

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorHold Autocommands for "*"
autocommand silent call CocActionAsync('highlight')

autocommand silent call CocActionAsync('highlight')

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()


Executing WinLeave Autocommands for "*"
autocommand call s:Autocmd('WinLeave', win_getid())

Executing WinLeave Autocommands for "*"
autocommand call s:Remove_Matches()

Executing WinEnter Autocommands for "*"
autocommand call s:dopopd()

Executing WinEnter Autocommands for "*"
autocommand call <sid>on_window_changed('WinEnter')

Executing WinEnter Autocommands for "*"
autocommand call coc#float#nvim_win_enter(win_getid())

autocommand call s:Autocmd('WinEnter', win_getid())

Executing WinEnter Autocommands for "*"
autocommand let g:fzf#vim#buffers[bufnr('')] = reltimefloat(reltime())

Executing WinEnter Autocommands for "*"
autocommand let s:tmux_is_last_pane = 0

Executing WinEnter Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing WinEnter Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing WinEnter Autocommands for "*"
autocommand call s:auto_restore_focus()

Executing BufEnter Autocommands for "*"
autocommand set fo-=c fo-=r fo-=o

Executing BufEnter Autocommands for "*"
autocommand call s:Autocmd('BufEnter', +expand('<abuf>'))

Executing BufEnter Autocommands for "*"
autocommand if conflict_marker#detect#markers() | call s:on_detected() | endif

Executing BufEnter Autocommands for "*"
autocommand call s:mru_append(expand('<amatch>'))

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing User Autocommands for "AirlineModeChanged"
autocommand call airline#mode_changed()

Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 3: sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component/repo.vim"
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

not found in runtime path: "autoload/vital/_gina/Git.vim"
function <SNR>251__get_reference(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 139
function <SNR>251_relpath(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 76
function <SNR>251__vital_loaded(V) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 1
function <SNR>251__get_reference_trad(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 147
function <SNR>251_abspath(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 68
function <SNR>251_ref(git, refname) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 102
function <SNR>251_new(path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 17
function <SNR>251__vital_depends() abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 8
function <SNR>251__get_packed_refs(git) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 124
function <SNR>251_resolve(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 87
function <SNR>251__get_reference_packed(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 168
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component/repo.vim
continuing in <SNR>135_config_gina_branch
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 3: sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component/repo.vim"
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

not found in runtime path: "autoload/vital/_gina/Git.vim"
function <SNR>251__get_reference(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 139
function <SNR>251_relpath(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 76
function <SNR>251__vital_loaded(V) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 1
function <SNR>251__get_reference_trad(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 147
function <SNR>251_abspath(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 68
function <SNR>251_ref(git, refname) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 102
function <SNR>251_new(path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 17
function <SNR>251__vital_depends() abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 8
function <SNR>251__get_packed_refs(git) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 124
function <SNR>251_resolve(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 87
function <SNR>251__get_reference_packed(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 168
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component/repo.vim
continuing in <SNR>135_config_gina_branch
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/coc)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/coc/highlight.vim"
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/coc/highlight.vim
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 3: sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component/repo.vim"
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

not found in runtime path: "autoload/vital/_gina/Git.vim"
function <SNR>251__get_reference(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 139
function <SNR>251_relpath(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 76
function <SNR>251__vital_loaded(V) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 1
function <SNR>251__get_reference_trad(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 147
function <SNR>251_abspath(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 68
function <SNR>251_ref(git, refname) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 102
function <SNR>251_new(path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 17
function <SNR>251__vital_depends() abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 8
function <SNR>251__get_packed_refs(git) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 124
function <SNR>251_resolve(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 87
function <SNR>251__get_reference_packed(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 168
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component/repo.vim
continuing in <SNR>135_config_gina_branch
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 3: sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component/repo.vim"
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

not found in runtime path: "autoload/vital/_gina/Git.vim"
function <SNR>251__get_reference(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 139
function <SNR>251_relpath(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 76
function <SNR>251__vital_loaded(V) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 1
function <SNR>251__get_reference_trad(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 147
function <SNR>251_abspath(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 68
function <SNR>251_ref(git, refname) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 102
function <SNR>251_new(path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 17
function <SNR>251__vital_depends() abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 8
function <SNR>251__get_packed_refs(git) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 124
function <SNR>251_resolve(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 87
function <SNR>251__get_reference_packed(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 168
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component/repo.vim
continuing in <SNR>135_config_gina_branch
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 3: sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component/repo.vim"
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

not found in runtime path: "autoload/vital/_gina/Git.vim"
function <SNR>251__get_reference(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 139
function <SNR>251_relpath(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 76
function <SNR>251__vital_loaded(V) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 1
function <SNR>251__get_reference_trad(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 147
function <SNR>251_abspath(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 68
function <SNR>251_ref(git, refname) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 102
function <SNR>251_new(path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 17
function <SNR>251__vital_depends() abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 8
function <SNR>251__get_packed_refs(git) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 124
function <SNR>251_resolve(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 87
function <SNR>251__get_reference_packed(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 168
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component/repo.vim
continuing in <SNR>135_config_gina_branch
Executing CursorHold Autocommands for "*"
autocommand silent call CocActionAsync('highlight')

autocommand silent call CocActionAsync('highlight')

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 3: sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component/repo.vim"
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

not found in runtime path: "autoload/vital/_gina/Git.vim"
function <SNR>251__get_reference(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 139
function <SNR>251_relpath(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 76
function <SNR>251__vital_loaded(V) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 1
function <SNR>251__get_reference_trad(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 147
function <SNR>251_abspath(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 68
function <SNR>251_ref(git, refname) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 102
function <SNR>251_new(path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 17
function <SNR>251__vital_depends() abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 8
function <SNR>251__get_packed_refs(git) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 124
function <SNR>251_resolve(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 87
function <SNR>251__get_reference_packed(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 168
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component/repo.vim
continuing in <SNR>135_config_gina_branch
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 3: sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component/repo.vim"
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

not found in runtime path: "autoload/vital/_gina/Git.vim"
function <SNR>251__get_reference(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 139
function <SNR>251_relpath(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 76
function <SNR>251__vital_loaded(V) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 1
function <SNR>251__get_reference_trad(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 147
function <SNR>251_abspath(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 68
function <SNR>251_ref(git, refname) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 102
function <SNR>251_new(path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 17
function <SNR>251__vital_depends() abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 8
function <SNR>251__get_packed_refs(git) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 124
function <SNR>251_resolve(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 87
function <SNR>251__get_reference_packed(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 168
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component/repo.vim
continuing in <SNR>135_config_gina_branch
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 3: sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component/repo.vim"
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

not found in runtime path: "autoload/vital/_gina/Git.vim"
function <SNR>251__get_reference(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 139
function <SNR>251_relpath(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 76
function <SNR>251__vital_loaded(V) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 1
function <SNR>251__get_reference_trad(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 147
function <SNR>251_abspath(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 68
function <SNR>251_ref(git, refname) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 102
function <SNR>251_new(path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 17
function <SNR>251__vital_depends() abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 8
function <SNR>251__get_packed_refs(git) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 124
function <SNR>251_resolve(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 87
function <SNR>251__get_reference_packed(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 168
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component/repo.vim
continuing in <SNR>135_config_gina_branch
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 3: sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component/repo.vim"
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

not found in runtime path: "autoload/vital/_gina/Git.vim"
function <SNR>251__get_reference(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 139
function <SNR>251_relpath(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 76
function <SNR>251__vital_loaded(V) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 1
function <SNR>251__get_reference_trad(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 147
function <SNR>251_abspath(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 68
function <SNR>251_ref(git, refname) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 102
function <SNR>251_new(path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 17
function <SNR>251__vital_depends() abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 8
function <SNR>251__get_packed_refs(git) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 124
function <SNR>251_resolve(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 87
function <SNR>251__get_reference_packed(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 168
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component/repo.vim
continuing in <SNR>135_config_gina_branch
Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()


Executing WinLeave Autocommands for "*"
autocommand call s:Autocmd('WinLeave', win_getid())

Executing WinLeave Autocommands for "*"
autocommand call s:Remove_Matches()

Executing WinEnter Autocommands for "*"
autocommand call s:dopopd()

Executing WinEnter Autocommands for "*"
autocommand call <sid>on_window_changed('WinEnter')

Executing WinEnter Autocommands for "*"
autocommand call coc#float#nvim_win_enter(win_getid())

autocommand call s:Autocmd('WinEnter', win_getid())

Executing WinEnter Autocommands for "*"
autocommand let g:fzf#vim#buffers[bufnr('')] = reltimefloat(reltime())

Executing WinEnter Autocommands for "*"
autocommand let s:tmux_is_last_pane = 0

Executing WinEnter Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing WinEnter Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing WinEnter Autocommands for "*"
autocommand call s:auto_restore_focus()

Executing BufEnter Autocommands for "*"
autocommand set fo-=c fo-=r fo-=o

Executing BufEnter Autocommands for "*"
autocommand call s:Autocmd('BufEnter', +expand('<abuf>'))

Executing BufEnter Autocommands for "*"
autocommand if conflict_marker#detect#markers() | call s:on_detected() | endif

Executing BufEnter Autocommands for "*"
autocommand call s:mru_append(expand('<amatch>'))

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing User Autocommands for "AirlineModeChanged"
autocommand call airline#mode_changed()

Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/coc)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/coc/highlight.vim"
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/coc/highlight.vim
Executing CursorHold Autocommands for "*"
autocommand silent call CocActionAsync('highlight')

autocommand silent call CocActionAsync('highlight')

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()


Executing WinLeave Autocommands for "*"
autocommand call s:Autocmd('WinLeave', win_getid())

Executing WinLeave Autocommands for "*"
autocommand call s:Remove_Matches()

Executing WinEnter Autocommands for "*"
autocommand call s:dopopd()

Executing WinEnter Autocommands for "*"
autocommand call <sid>on_window_changed('WinEnter')

Executing WinEnter Autocommands for "*"
autocommand call coc#float#nvim_win_enter(win_getid())

autocommand call s:Autocmd('WinEnter', win_getid())

Executing WinEnter Autocommands for "*"
autocommand let g:fzf#vim#buffers[bufnr('')] = reltimefloat(reltime())

Executing WinEnter Autocommands for "*"
autocommand let s:tmux_is_last_pane = 0

Executing WinEnter Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing WinEnter Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing WinEnter Autocommands for "*"
autocommand call s:auto_restore_focus()

Executing BufEnter Autocommands for "*"
autocommand set fo-=c fo-=r fo-=o

Executing BufEnter Autocommands for "*"
autocommand call s:Autocmd('BufEnter', +expand('<abuf>'))

Executing BufEnter Autocommands for "*"
autocommand if conflict_marker#detect#markers() | call s:on_detected() | endif

Executing BufEnter Autocommands for "*"
autocommand call s:mru_append(expand('<amatch>'))

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing WinLeave Autocommands for "*"
autocommand call s:Autocmd('WinLeave', win_getid())

Executing WinLeave Autocommands for "*"
autocommand call s:Remove_Matches()

Executing WinEnter Autocommands for "*"
autocommand call s:dopopd()

Executing WinEnter Autocommands for "*"
autocommand call <sid>on_window_changed('WinEnter')

Executing WinEnter Autocommands for "*"
autocommand call coc#float#nvim_win_enter(win_getid())

autocommand call s:Autocmd('WinEnter', win_getid())

Executing WinEnter Autocommands for "*"
autocommand let g:fzf#vim#buffers[bufnr('')] = reltimefloat(reltime())

Executing WinEnter Autocommands for "*"
autocommand let s:tmux_is_last_pane = 0

Executing WinEnter Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing WinEnter Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing WinEnter Autocommands for "*"
autocommand call s:auto_restore_focus()

Executing BufEnter Autocommands for "*"
autocommand set fo-=c fo-=r fo-=o

Executing BufEnter Autocommands for "*"
autocommand call s:Autocmd('BufEnter', +expand('<abuf>'))

Executing BufEnter Autocommands for "*"
autocommand if conflict_marker#detect#markers() | call s:on_detected() | endif

Executing BufEnter Autocommands for "*"
autocommand call s:mru_append(expand('<amatch>'))

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing command: "'/bin/zsh' '-c' ''/usr/bin/g++' -std=c++14 -Wall -Wextra --pedantic-errors '/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c/index.cpp' -o '/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207..."


Executing command: "'/bin/zsh' '-c' ''/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c/index' '"


Executing WinLeave Autocommands for "*"
autocommand call s:Autocmd('WinLeave', win_getid())

Executing WinLeave Autocommands for "*"
autocommand call s:Remove_Matches()

Executing WinEnter Autocommands for "*"
autocommand call s:dopopd()

Executing WinEnter Autocommands for "*"
autocommand call <sid>on_window_changed('WinEnter')

Executing WinEnter Autocommands for "*"
autocommand call coc#float#nvim_win_enter(win_getid())

autocommand call s:Autocmd('WinEnter', win_getid())

Executing WinEnter Autocommands for "*"
autocommand let g:fzf#vim#buffers[bufnr('')] = reltimefloat(reltime())

Executing WinEnter Autocommands for "*"
autocommand let s:tmux_is_last_pane = 0

Executing WinEnter Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing WinEnter Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing WinEnter Autocommands for "*"
autocommand call s:auto_restore_focus()

Executing BufEnter Autocommands for "*"
autocommand set fo-=c fo-=r fo-=o

Executing BufEnter Autocommands for "*"
autocommand call s:Autocmd('BufEnter', +expand('<abuf>'))

Executing BufEnter Autocommands for "*"
autocommand if conflict_marker#detect#markers() | call s:on_detected() | endif

Executing BufEnter Autocommands for "*"
autocommand call s:mru_append(expand('<amatch>'))

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing WinLeave Autocommands for "*"
autocommand call s:Autocmd('WinLeave', win_getid())

Executing WinLeave Autocommands for "*"
autocommand call s:Remove_Matches()

Executing WinEnter Autocommands for "*"
autocommand call s:dopopd()

Executing WinEnter Autocommands for "*"
autocommand call <sid>on_window_changed('WinEnter')

Executing WinEnter Autocommands for "*"
autocommand call coc#float#nvim_win_enter(win_getid())

autocommand call s:Autocmd('WinEnter', win_getid())

Executing WinEnter Autocommands for "*"
autocommand let g:fzf#vim#buffers[bufnr('')] = reltimefloat(reltime())

Executing WinEnter Autocommands for "*"
autocommand let s:tmux_is_last_pane = 0

Executing WinEnter Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing WinEnter Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing WinEnter Autocommands for "*"
autocommand call s:auto_restore_focus()

Executing BufEnter Autocommands for "*"
autocommand set fo-=c fo-=r fo-=o

Executing BufEnter Autocommands for "*"
autocommand call s:Autocmd('BufEnter', +expand('<abuf>'))

Executing BufEnter Autocommands for "*"
autocommand if conflict_marker#detect#markers() | call s:on_detected() | endif

Executing BufEnter Autocommands for "*"
autocommand call s:mru_append(expand('<amatch>'))

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/coc)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/coc/highlight.vim"
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/coc/highlight.vim
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/coc)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/coc/highlight.vim"
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/coc/highlight.vim
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/coc)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/coc/highlight.vim"
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/coc/highlight.vim
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/coc)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/coc/highlight.vim"
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/coc/highlight.vim
Executing CursorHold Autocommands for "*"
autocommand silent call CocActionAsync('highlight')

autocommand silent call CocActionAsync('highlight')

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing WinScrolled Autocommands for "*"
autocommand call s:HandleWinScrolled(+expand('<amatch>'))

Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing WinScrolled Autocommands for "*"
autocommand call s:HandleWinScrolled(+expand('<amatch>'))

Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing WinScrolled Autocommands for "*"
autocommand call s:HandleWinScrolled(+expand('<amatch>'))

Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing WinScrolled Autocommands for "*"
autocommand call s:HandleWinScrolled(+expand('<amatch>'))

Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing WinScrolled Autocommands for "*"
autocommand call s:HandleWinScrolled(+expand('<amatch>'))

Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorHold Autocommands for "*"
autocommand silent call CocActionAsync('highlight')

autocommand silent call CocActionAsync('highlight')

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing command: "'/usr/bin/pbcopy'"


Executing TextYankPost Autocommands for "*"
autocommand call highlightedyank#debounce()

Executing TextYankPost Autocommands for "*"
autocommand call coc#rpc#notify('doAutocmd', [2, v:event, +expand('<abuf>'), win_getid()])

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing TextChanged Autocommands for "*"
autocommand call s:Autocmd('TextChanged', +expand('<abuf>'), getbufvar(+expand('<abuf>'), 'changedtick'))

Executing TextChanged Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()


Executing BufWritePre Autocommands for "*"
autocommand call s:SyncAutocmd('BufWritePre', +expand('<abuf>'), bufname(+expand('<abuf>')), getbufvar(+expand('<abuf>'), 'changedtick'))

"index.cpp" 
"index.cpp" 51L, 963B written
Executing BufWritePost Autocommands for "*"
autocommand call s:Autocmd('BufWritePost', +expand('<abuf>'), getbufvar(+expand('<abuf>'), 'changedtick'))

Executing BufWritePost Autocommands for "*"
autocommand call s:reset_untracked_cache(0)

Executing BufWritePost Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing BufWritePost Autocommands for "*"
autocommand call s:mru_append(expand('<amatch>'))

autocommand call s:mrw_append(expand('<amatch>'))

"index.cpp" 51L, 963B written
Executing CursorHold Autocommands for "*"
autocommand silent call CocActionAsync('highlight')

autocommand silent call CocActionAsync('highlight')

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorHold Autocommands for "*"
autocommand silent call CocActionAsync('highlight')

autocommand silent call CocActionAsync('highlight')

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()


Executing BufWritePre Autocommands for "*"
autocommand call s:SyncAutocmd('BufWritePre', +expand('<abuf>'), bufname(+expand('<abuf>')), getbufvar(+expand('<abuf>'), 'changedtick'))

"index.cpp" 
"index.cpp" 51L, 963B written
Executing BufWritePost Autocommands for "*"
autocommand call s:Autocmd('BufWritePost', +expand('<abuf>'), getbufvar(+expand('<abuf>'), 'changedtick'))

Executing BufWritePost Autocommands for "*"
autocommand call s:reset_untracked_cache(0)

Executing BufWritePost Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing BufWritePost Autocommands for "*"
autocommand call s:mru_append(expand('<amatch>'))

autocommand call s:mrw_append(expand('<amatch>'))

"index.cpp" 51L, 963B written
Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()


51 lines yanked
Executing TextYankPost Autocommands for "*"
autocommand call highlightedyank#debounce()

Executing TextYankPost Autocommands for "*"
autocommand call coc#rpc#notify('doAutocmd', [2, v:event, +expand('<abuf>'), win_getid()])

Executing command: "'/usr/bin/pbcopy'"


Executing CursorHold Autocommands for "*"
autocommand silent call CocActionAsync('highlight')

autocommand silent call CocActionAsync('highlight')

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing WinLeave Autocommands for "*"
autocommand call s:Autocmd('WinLeave', win_getid())

Executing WinLeave Autocommands for "*"
autocommand call s:Remove_Matches()

Executing WinEnter Autocommands for "*"
autocommand call s:dopopd()

Executing WinEnter Autocommands for "*"
autocommand call <sid>on_window_changed('WinEnter')

Executing WinEnter Autocommands for "*"
autocommand call coc#float#nvim_win_enter(win_getid())

autocommand call s:Autocmd('WinEnter', win_getid())

Executing WinEnter Autocommands for "*"
autocommand let g:fzf#vim#buffers[bufnr('')] = reltimefloat(reltime())

Executing WinEnter Autocommands for "*"
autocommand let s:tmux_is_last_pane = 0

Executing WinEnter Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing WinEnter Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing WinEnter Autocommands for "*"
autocommand call s:auto_restore_focus()

Executing BufEnter Autocommands for "*"
autocommand set fo-=c fo-=r fo-=o

Executing BufEnter Autocommands for "*"
autocommand call s:Autocmd('BufEnter', +expand('<abuf>'))

Executing BufEnter Autocommands for "*"
autocommand if conflict_marker#detect#markers() | call s:on_detected() | endif

Executing BufEnter Autocommands for "*"
autocommand call s:mru_append(expand('<amatch>'))

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing TextChanged Autocommands for "*"
autocommand call s:Autocmd('TextChanged', +expand('<abuf>'), getbufvar(+expand('<abuf>'), 'changedtick'))

Executing TextChanged Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing WinScrolled Autocommands for "*"
autocommand call s:HandleWinScrolled(+expand('<amatch>'))

Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/coc)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/coc/highlight.vim"
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/coc/highlight.vim
Executing CursorHold Autocommands for "*"
autocommand silent call CocActionAsync('highlight')

autocommand silent call CocActionAsync('highlight')

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing WinLeave Autocommands for "*"
autocommand call s:Autocmd('WinLeave', win_getid())

Executing WinLeave Autocommands for "*"
autocommand call s:Remove_Matches()

Executing WinEnter Autocommands for "*"
autocommand call s:dopopd()

Executing WinEnter Autocommands for "*"
autocommand call <sid>on_window_changed('WinEnter')

Executing WinEnter Autocommands for "*"
autocommand call coc#float#nvim_win_enter(win_getid())

autocommand call s:Autocmd('WinEnter', win_getid())

Executing WinEnter Autocommands for "*"
autocommand let g:fzf#vim#buffers[bufnr('')] = reltimefloat(reltime())

Executing WinEnter Autocommands for "*"
autocommand let s:tmux_is_last_pane = 0

Executing WinEnter Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing WinEnter Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing WinEnter Autocommands for "*"
autocommand call s:auto_restore_focus()

Executing BufEnter Autocommands for "*"
autocommand set fo-=c fo-=r fo-=o

Executing BufEnter Autocommands for "*"
autocommand call s:Autocmd('BufEnter', +expand('<abuf>'))

Executing BufEnter Autocommands for "*"
autocommand if conflict_marker#detect#markers() | call s:on_detected() | endif

Executing BufEnter Autocommands for "*"
autocommand call s:mru_append(expand('<amatch>'))

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing User Autocommands for "AirlineModeChanged"
autocommand call airline#mode_changed()

Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 3: sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component/repo.vim"
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

not found in runtime path: "autoload/vital/_gina/Git.vim"
function <SNR>251__get_reference(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 139
function <SNR>251_relpath(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 76
function <SNR>251__vital_loaded(V) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 1
function <SNR>251__get_reference_trad(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 147
function <SNR>251_abspath(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 68
function <SNR>251_ref(git, refname) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 102
function <SNR>251_new(path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 17
function <SNR>251__vital_depends() abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 8
function <SNR>251__get_packed_refs(git) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 124
function <SNR>251_resolve(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 87
function <SNR>251__get_reference_packed(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 168
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component/repo.vim
continuing in <SNR>135_config_gina_branch
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 3: sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component/repo.vim"
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

not found in runtime path: "autoload/vital/_gina/Git.vim"
function <SNR>251__get_reference(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 139
function <SNR>251_relpath(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 76
function <SNR>251__vital_loaded(V) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 1
function <SNR>251__get_reference_trad(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 147
function <SNR>251_abspath(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 68
function <SNR>251_ref(git, refname) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 102
function <SNR>251_new(path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 17
function <SNR>251__vital_depends() abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 8
function <SNR>251__get_packed_refs(git) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 124
function <SNR>251_resolve(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 87
function <SNR>251__get_reference_packed(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 168
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component/repo.vim
continuing in <SNR>135_config_gina_branch
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/coc)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/coc/highlight.vim"
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/coc/highlight.vim
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 3: sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component/repo.vim"
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

not found in runtime path: "autoload/vital/_gina/Git.vim"
function <SNR>251__get_reference(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 139
function <SNR>251_relpath(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 76
function <SNR>251__vital_loaded(V) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 1
function <SNR>251__get_reference_trad(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 147
function <SNR>251_abspath(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 68
function <SNR>251_ref(git, refname) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 102
function <SNR>251_new(path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 17
function <SNR>251__vital_depends() abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 8
function <SNR>251__get_packed_refs(git) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 124
function <SNR>251_resolve(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 87
function <SNR>251__get_reference_packed(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 168
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component/repo.vim
continuing in <SNR>135_config_gina_branch
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 3: sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component/repo.vim"
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

not found in runtime path: "autoload/vital/_gina/Git.vim"
function <SNR>251__get_reference(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 139
function <SNR>251_relpath(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 76
function <SNR>251__vital_loaded(V) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 1
function <SNR>251__get_reference_trad(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 147
function <SNR>251_abspath(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 68
function <SNR>251_ref(git, refname) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 102
function <SNR>251_new(path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 17
function <SNR>251__vital_depends() abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 8
function <SNR>251__get_packed_refs(git) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 124
function <SNR>251_resolve(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 87
function <SNR>251__get_reference_packed(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 168
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component/repo.vim
continuing in <SNR>135_config_gina_branch
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 3: sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component/repo.vim"
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

not found in runtime path: "autoload/vital/_gina/Git.vim"
function <SNR>251__get_reference(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 139
function <SNR>251_relpath(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 76
function <SNR>251__vital_loaded(V) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 1
function <SNR>251__get_reference_trad(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 147
function <SNR>251_abspath(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 68
function <SNR>251_ref(git, refname) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 102
function <SNR>251_new(path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 17
function <SNR>251__vital_depends() abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 8
function <SNR>251__get_packed_refs(git) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 124
function <SNR>251_resolve(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 87
function <SNR>251__get_reference_packed(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 168
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component/repo.vim
continuing in <SNR>135_config_gina_branch
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 3: sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component/repo.vim"
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

not found in runtime path: "autoload/vital/_gina/Git.vim"
function <SNR>251__get_reference(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 139
function <SNR>251_relpath(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 76
function <SNR>251__vital_loaded(V) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 1
function <SNR>251__get_reference_trad(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 147
function <SNR>251_abspath(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 68
function <SNR>251_ref(git, refname) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 102
function <SNR>251_new(path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 17
function <SNR>251__vital_depends() abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 8
function <SNR>251__get_packed_refs(git) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 124
function <SNR>251_resolve(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 87
function <SNR>251__get_reference_packed(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 168
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component/repo.vim
continuing in <SNR>135_config_gina_branch
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 3: sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component/repo.vim"
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

not found in runtime path: "autoload/vital/_gina/Git.vim"
function <SNR>251__get_reference(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 139
function <SNR>251_relpath(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 76
function <SNR>251__vital_loaded(V) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 1
function <SNR>251__get_reference_trad(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 147
function <SNR>251_abspath(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 68
function <SNR>251_ref(git, refname) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 102
function <SNR>251_new(path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 17
function <SNR>251__vital_depends() abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 8
function <SNR>251__get_packed_refs(git) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 124
function <SNR>251_resolve(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 87
function <SNR>251__get_reference_packed(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 168
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component/repo.vim
continuing in <SNR>135_config_gina_branch
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 3: sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component/repo.vim"
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

not found in runtime path: "autoload/vital/_gina/Git.vim"
function <SNR>251__get_reference(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 139
function <SNR>251_relpath(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 76
function <SNR>251__vital_loaded(V) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 1
function <SNR>251__get_reference_trad(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 147
function <SNR>251_abspath(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 68
function <SNR>251_ref(git, refname) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 102
function <SNR>251_new(path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 17
function <SNR>251__vital_depends() abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 8
function <SNR>251__get_packed_refs(git) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 124
function <SNR>251_resolve(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 87
function <SNR>251__get_reference_packed(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 168
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component/repo.vim
continuing in <SNR>135_config_gina_branch
Executing CursorHold Autocommands for "*"
autocommand silent call CocActionAsync('highlight')

autocommand silent call CocActionAsync('highlight')

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 3: sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component/repo.vim"
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

not found in runtime path: "autoload/vital/_gina/Git.vim"
function <SNR>251__get_reference(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 139
function <SNR>251_relpath(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 76
function <SNR>251__vital_loaded(V) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 1
function <SNR>251__get_reference_trad(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 147
function <SNR>251_abspath(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 68
function <SNR>251_ref(git, refname) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 102
function <SNR>251_new(path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 17
function <SNR>251__vital_depends() abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 8
function <SNR>251__get_packed_refs(git) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 124
function <SNR>251_resolve(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 87
function <SNR>251__get_reference_packed(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 168
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component/repo.vim
continuing in <SNR>135_config_gina_branch
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 3: sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component/repo.vim"
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

not found in runtime path: "autoload/vital/_gina/Git.vim"
function <SNR>251__get_reference(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 139
function <SNR>251_relpath(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 76
function <SNR>251__vital_loaded(V) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 1
function <SNR>251__get_reference_trad(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 147
function <SNR>251_abspath(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 68
function <SNR>251_ref(git, refname) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 102
function <SNR>251_new(path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 17
function <SNR>251__vital_depends() abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 8
function <SNR>251__get_packed_refs(git) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 124
function <SNR>251_resolve(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 87
function <SNR>251__get_reference_packed(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 168
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component/repo.vim
continuing in <SNR>135_config_gina_branch
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 3: sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component/repo.vim"
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

not found in runtime path: "autoload/vital/_gina/Git.vim"
function <SNR>251__get_reference(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 139
function <SNR>251_relpath(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 76
function <SNR>251__vital_loaded(V) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 1
function <SNR>251__get_reference_trad(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 147
function <SNR>251_abspath(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 68
function <SNR>251_ref(git, refname) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 102
function <SNR>251_new(path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 17
function <SNR>251__vital_depends() abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 8
function <SNR>251__get_packed_refs(git) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 124
function <SNR>251_resolve(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 87
function <SNR>251__get_reference_packed(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 168
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component/repo.vim
continuing in <SNR>135_config_gina_branch
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 3: sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component/repo.vim"
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

not found in runtime path: "autoload/vital/_gina/Git.vim"
function <SNR>251__get_reference(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 139
function <SNR>251_relpath(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 76
function <SNR>251__vital_loaded(V) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 1
function <SNR>251__get_reference_trad(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 147
function <SNR>251_abspath(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 68
function <SNR>251_ref(git, refname) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 102
function <SNR>251_new(path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 17
function <SNR>251__vital_depends() abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 8
function <SNR>251__get_packed_refs(git) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 124
function <SNR>251_resolve(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 87
function <SNR>251__get_reference_packed(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 168
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component/repo.vim
continuing in <SNR>135_config_gina_branch
function <SNR>251__get_reference(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 139
function <SNR>251_relpath(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 76
function <SNR>251__vital_loaded(V) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 1
function <SNR>251__get_reference_trad(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 147
function <SNR>251_abspath(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 68
function <SNR>251_ref(git, refname) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 102
function <SNR>251_new(path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 17
function <SNR>251__vital_depends() abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 8
function <SNR>251__get_packed_refs(git) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 124
function <SNR>251_resolve(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 87
function <SNR>251__get_reference_packed(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 168
Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing User Autocommands for "AirlineModeChanged"
autocommand call airline#mode_changed()

Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 3: sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component/repo.vim"
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

not found in runtime path: "autoload/vital/_gina/Git.vim"
function <SNR>251__get_reference(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 139
function <SNR>251_relpath(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 76
function <SNR>251__vital_loaded(V) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 1
function <SNR>251__get_reference_trad(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 147
function <SNR>251_abspath(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 68
function <SNR>251_ref(git, refname) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 102
function <SNR>251_new(path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 17
function <SNR>251__vital_depends() abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 8
function <SNR>251__get_packed_refs(git) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 124
function <SNR>251_resolve(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 87
function <SNR>251__get_reference_packed(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 168
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component/repo.vim
continuing in <SNR>135_config_gina_branch
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 3: sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component/repo.vim"
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

not found in runtime path: "autoload/vital/_gina/Git.vim"
function <SNR>251__get_reference(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 139
function <SNR>251_relpath(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 76
function <SNR>251__vital_loaded(V) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 1
function <SNR>251__get_reference_trad(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 147
function <SNR>251_abspath(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 68
function <SNR>251_ref(git, refname) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 102
function <SNR>251_new(path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 17
function <SNR>251__vital_depends() abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 8
function <SNR>251__get_packed_refs(git) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 124
function <SNR>251_resolve(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 87
function <SNR>251__get_reference_packed(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 168
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component/repo.vim
continuing in <SNR>135_config_gina_branch
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 3: sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component/repo.vim"
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

not found in runtime path: "autoload/vital/_gina/Git.vim"
function <SNR>251__get_reference(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 139
function <SNR>251_relpath(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 76
function <SNR>251__vital_loaded(V) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 1
function <SNR>251__get_reference_trad(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 147
function <SNR>251_abspath(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 68
function <SNR>251_ref(git, refname) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 102
function <SNR>251_new(path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 17
function <SNR>251__vital_depends() abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 8
function <SNR>251__get_packed_refs(git) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 124
function <SNR>251_resolve(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 87
function <SNR>251__get_reference_packed(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 168
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component/repo.vim
continuing in <SNR>135_config_gina_branch
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 3: sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component/repo.vim"
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

not found in runtime path: "autoload/vital/_gina/Git.vim"
function <SNR>251__get_reference(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 139
function <SNR>251_relpath(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 76
function <SNR>251__vital_loaded(V) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 1
function <SNR>251__get_reference_trad(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 147
function <SNR>251_abspath(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 68
function <SNR>251_ref(git, refname) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 102
function <SNR>251_new(path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 17
function <SNR>251__vital_depends() abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 8
function <SNR>251__get_packed_refs(git) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 124
function <SNR>251_resolve(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 87
function <SNR>251__get_reference_packed(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 168
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component/repo.vim
continuing in <SNR>135_config_gina_branch
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 3: sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component/repo.vim"
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

not found in runtime path: "autoload/vital/_gina/Git.vim"
function <SNR>251__get_reference(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 139
function <SNR>251_relpath(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 76
function <SNR>251__vital_loaded(V) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 1
function <SNR>251__get_reference_trad(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 147
function <SNR>251_abspath(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 68
function <SNR>251_ref(git, refname) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 102
function <SNR>251_new(path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 17
function <SNR>251__vital_depends() abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 8
function <SNR>251__get_packed_refs(git) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 124
function <SNR>251_resolve(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 87
function <SNR>251__get_reference_packed(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 168
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component/repo.vim
continuing in <SNR>135_config_gina_branch
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 3: sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component/repo.vim"
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

not found in runtime path: "autoload/vital/_gina/Git.vim"
function <SNR>251__get_reference(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 139
function <SNR>251_relpath(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 76
function <SNR>251__vital_loaded(V) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 1
function <SNR>251__get_reference_trad(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 147
function <SNR>251_abspath(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 68
function <SNR>251_ref(git, refname) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 102
function <SNR>251_new(path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 17
function <SNR>251__vital_depends() abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 8
function <SNR>251__get_packed_refs(git) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 124
function <SNR>251_resolve(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 87
function <SNR>251__get_reference_packed(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 168
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component/repo.vim
continuing in <SNR>135_config_gina_branch
Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 3: sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component/repo.vim"
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

not found in runtime path: "autoload/vital/_gina/Git.vim"
function <SNR>251__get_reference(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 139
function <SNR>251_relpath(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 76
function <SNR>251__vital_loaded(V) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 1
function <SNR>251__get_reference_trad(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 147
function <SNR>251_abspath(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 68
function <SNR>251_ref(git, refname) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 102
function <SNR>251_new(path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 17
function <SNR>251__vital_depends() abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 8
function <SNR>251__get_packed_refs(git) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 124
function <SNR>251_resolve(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 87
function <SNR>251__get_reference_packed(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 168
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component/repo.vim
continuing in <SNR>135_config_gina_branch
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 3: sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component/repo.vim"
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

not found in runtime path: "autoload/vital/_gina/Git.vim"
function <SNR>251__get_reference(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 139
function <SNR>251_relpath(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 76
function <SNR>251__vital_loaded(V) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 1
function <SNR>251__get_reference_trad(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 147
function <SNR>251_abspath(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 68
function <SNR>251_ref(git, refname) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 102
function <SNR>251_new(path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 17
function <SNR>251__vital_depends() abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 8
function <SNR>251__get_packed_refs(git) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 124
function <SNR>251_resolve(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 87
function <SNR>251__get_reference_packed(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 168
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component/repo.vim
continuing in <SNR>135_config_gina_branch
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 3: sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component/repo.vim"
Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

not found in runtime path: "autoload/vital/_gina/Git.vim"
function <SNR>251__get_reference(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 139
function <SNR>251_relpath(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 76
function <SNR>251__vital_loaded(V) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 1
function <SNR>251__get_reference_trad(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 147
function <SNR>251_abspath(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 68
function <SNR>251_ref(git, refname) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 102
function <SNR>251_new(path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 17
function <SNR>251__vital_depends() abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 8
function <SNR>251__get_packed_refs(git) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 124
function <SNR>251_resolve(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 87
function <SNR>251__get_reference_packed(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 168
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/gina/component/repo.vim
continuing in <SNR>135_config_gina_branch
function <SNR>251__get_reference(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 139
function <SNR>251_relpath(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 76
function <SNR>251__vital_loaded(V) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 1
function <SNR>251__get_reference_trad(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 147
function <SNR>251_abspath(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 68
function <SNR>251_ref(git, refname) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 102
function <SNR>251_new(path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 17
function <SNR>251__vital_depends() abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 8
function <SNR>251__get_packed_refs(git) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 124
function <SNR>251_resolve(git, path) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 87
function <SNR>251__get_reference_packed(git, refname, packed_refs) abort
	Last set from ~/.cache/dein/.cache/init.vim/.dein/autoload/vital/__gina__/Git.vim line 168
Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()


Executing QuitPre Autocommands for "*"
autocommand call s:smart_quit_pre()

Executing WinLeave Autocommands for "*"
autocommand call s:Autocmd('WinLeave', win_getid())

Executing WinLeave Autocommands for "*"
autocommand call s:Remove_Matches()

Executing WinClosed Autocommands for "*"
autocommand call s:HandleWinClosed(+expand('<amatch>'))

Executing BufWinLeave Autocommands for "*"
autocommand call s:Autocmd('BufWinLeave', +expand('<abuf>'), bufwinid(+expand('<abuf>')))

Executing BufHidden Autocommands for "*"
autocommand call s:Autocmd('BufHidden', +expand('<abuf>'))

Executing WinEnter Autocommands for "*"
autocommand call s:dopopd()

Executing WinEnter Autocommands for "*"
autocommand call <sid>on_window_changed('WinEnter')

Executing WinEnter Autocommands for "*"
autocommand call coc#float#nvim_win_enter(win_getid())

autocommand call s:Autocmd('WinEnter', win_getid())

Executing WinEnter Autocommands for "*"
autocommand let g:fzf#vim#buffers[bufnr('')] = reltimefloat(reltime())

Executing WinEnter Autocommands for "*"
autocommand let s:tmux_is_last_pane = 0

Executing WinEnter Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing WinEnter Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing WinEnter Autocommands for "*"
autocommand call s:auto_restore_focus()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing BufEnter Autocommands for "*"
autocommand set fo-=c fo-=r fo-=o

Executing BufEnter Autocommands for "*"
autocommand call s:Autocmd('BufEnter', +expand('<abuf>'))

Executing BufEnter Autocommands for "*"
autocommand if conflict_marker#detect#markers() | call s:on_detected() | endif

Executing BufEnter Autocommands for "*"
autocommand call s:mru_append(expand('<amatch>'))

Executing WinScrolled Autocommands for "*"
autocommand call s:HandleWinScrolled(+expand('<amatch>'))

Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/coc)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/coc/highlight.vim"
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/coc/highlight.vim
Executing CursorHold Autocommands for "*"
autocommand silent call CocActionAsync('highlight')

autocommand silent call CocActionAsync('highlight')

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorHold Autocommands for "*"
autocommand silent call CocActionAsync('highlight')

autocommand silent call CocActionAsync('highlight')

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()


Executing WinLeave Autocommands for "*"
autocommand call s:Autocmd('WinLeave', win_getid())

Executing WinLeave Autocommands for "*"
autocommand call s:Remove_Matches()

Executing WinEnter Autocommands for "*"
autocommand call s:dopopd()

Executing WinEnter Autocommands for "*"
autocommand call <sid>on_window_changed('WinEnter')

Executing WinEnter Autocommands for "*"
autocommand call coc#float#nvim_win_enter(win_getid())

autocommand call s:Autocmd('WinEnter', win_getid())

Executing WinEnter Autocommands for "*"
autocommand let g:fzf#vim#buffers[bufnr('')] = reltimefloat(reltime())

Executing WinEnter Autocommands for "*"
autocommand let s:tmux_is_last_pane = 0

Executing WinEnter Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing WinEnter Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing WinEnter Autocommands for "*"
autocommand call s:auto_restore_focus()

Executing BufEnter Autocommands for "*"
autocommand set fo-=c fo-=r fo-=o

Executing BufEnter Autocommands for "*"
autocommand call s:Autocmd('BufEnter', +expand('<abuf>'))

Executing BufEnter Autocommands for "*"
autocommand if conflict_marker#detect#markers() | call s:on_detected() | endif

Executing BufEnter Autocommands for "*"
autocommand call s:mru_append(expand('<amatch>'))

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing WinScrolled Autocommands for "*"
autocommand call s:HandleWinScrolled(+expand('<amatch>'))

Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/coc)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/coc/highlight.vim"
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/coc/highlight.vim
Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()


Executing command: "'/bin/zsh' '-c' 'git rev-parse --show-toplevel 2>/dev/null'"


Executing command: "'/bin/zsh' '-c' 'rg --files --hidden --no-messages --glob '!.git/*' --glob !'* *''"


Executing WinLeave Autocommands for "*"
autocommand call s:Autocmd('WinLeave', win_getid())

Executing WinLeave Autocommands for "*"
autocommand call s:Remove_Matches()

Executing WinEnter Autocommands for "*"
autocommand call s:dopopd()

Executing WinEnter Autocommands for "*"
autocommand call <sid>on_window_changed('WinEnter')

Executing WinEnter Autocommands for "*"
autocommand call coc#float#nvim_win_enter(win_getid())

autocommand call s:Autocmd('WinEnter', win_getid())

Executing WinEnter Autocommands for "*"
autocommand let g:fzf#vim#buffers[bufnr('')] = reltimefloat(reltime())

Executing WinEnter Autocommands for "*"
autocommand let s:tmux_is_last_pane = 0

Executing WinEnter Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing WinEnter Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing WinEnter Autocommands for "*"
autocommand call s:auto_restore_focus()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing BufEnter Autocommands for "*"
autocommand set fo-=c fo-=r fo-=o

Executing BufEnter Autocommands for "*"
autocommand call s:Autocmd('BufEnter', +expand('<abuf>'))

Executing BufEnter Autocommands for "*"
autocommand if conflict_marker#detect#markers() | call s:on_detected() | endif

Executing BufEnter Autocommands for "*"
autocommand call s:mru_append(expand('<amatch>'))

Executing BufWinEnter Autocommands for "*"
autocommand call <sid>on_window_changed('BufWinEnter')

Executing BufWinEnter Autocommands for "*"
autocommand call s:Autocmd('BufWinEnter', +expand('<abuf>'), win_getid())

Executing BufWinEnter Autocommands for "*"
autocommand let g:fzf#vim#buffers[bufnr('')] = reltimefloat(reltime())

Executing BufWinEnter Autocommands for "*"
autocommand call s:mru_append(expand('<amatch>'))

[window] /Users/tomoya_tanaka/projects/git...om/txxxxc/competitive-programming/ABC_207/c
Executing BufFilePost Autocommands for "*"
autocommand call s:UseConfigFiles()

Executing TermOpen Autocommands for "*"
autocommand startinsert

Executing TermOpen Autocommands for "term://*"
autocommand <Lua 12: ~/.cache/dein/.cache/init.vim/.dein/lua/toggleterm.lua:25>

Executing TermOpen Autocommands for "*"
autocommand call s:Autocmd('TermOpen', +expand('<abuf>'))

[global] /Users/tomoya_tanaka/projects/git...om/txxxxc/competitive-programming/ABC_207/c
Executing FileType Autocommands for "*"
autocommand call s:LoadFTPlugin()

not found in runtime path: "ftplugin/fzf.vim ftplugin/fzf_*.vim ftplugin/fzf/*.vim"
not found in runtime path: "ftplugin/fzf.lua ftplugin/fzf_*.lua ftplugin/fzf/*.lua"
Executing FileType Autocommands for "*"
autocommand call s:LoadIndent()

not found in runtime path: "indent/fzf.vim"
not found in runtime path: "indent/fzf.lua"
Executing FileType Autocommands for "*?"
autocommand call dein#autoload#_on_default_event('FileType')

Executing FileType Autocommands for "*"
autocommand if !exists('b:ts_highlight') | 0verbose exe "set syntax=" . expand("<amatch>") | endif

Executing FileType Autocommands for "*"
autocommand set fo-=c fo-=r fo-=o

autocommand set fo-=c fo-=r fo-=o " 改行時の自動コメントアウトを無効化する 

autocommand <Lua 22: ~/.cache/dein/repos/github.com/nvim-treesitter/nvim-treesitter/lua/nvim-treesitter/install.lua:431>

Executing FileType Autocommands for "*"
autocommand call <sid>on_window_changed('FileType')

Executing FileType Autocommands for "*"
autocommand call s:Autocmd('FileType', expand('<amatch>'), +expand('<abuf>'))

Executing FileType Autocommands for "*"
autocommand <Lua 23: ~/.cache/dein/repos/github.com/nvim-treesitter/nvim-treesitter/lua/nvim-treesitter/configs.lua:107>

Executing FileType Autocommands for "fzf"
autocommand tnoremap <silent> <buffer> <Esc> <C-g>

autocommand nnoremap <silent> <buffer> <C-g> i<C-g>

autocommand vnoremap <silent> <buffer> <C-g> <Esc>i<C-g>

Executing FileType Autocommands for "fzf"
autocommand call fzf_preview#remote#window#set_fzf_last_query()

Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/coc)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/coc/highlight.vim"
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/coc/highlight.vim
Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing WinLeave Autocommands for "*"
autocommand call s:Autocmd('WinLeave', win_getid())

Executing WinLeave Autocommands for "*"
autocommand call s:Remove_Matches()

Executing WinClosed Autocommands for "*"
autocommand call s:HandleWinClosed(+expand('<amatch>'))

Executing BufWinLeave Autocommands for "*"
autocommand call s:Autocmd('BufWinLeave', +expand('<abuf>'), bufwinid(+expand('<abuf>')))

Executing BufUnload Autocommands for "*"
autocommand call <sid>on_window_changed('BufUnload')

Executing BufUnload Autocommands for "*"
autocommand call s:Autocmd('BufUnload', +expand('<abuf>'))

Executing WinEnter Autocommands for "*"
autocommand call s:dopopd()

Executing WinEnter Autocommands for "*"
autocommand call <sid>on_window_changed('WinEnter')

Executing WinEnter Autocommands for "*"
autocommand call coc#float#nvim_win_enter(win_getid())

autocommand call s:Autocmd('WinEnter', win_getid())

Executing WinEnter Autocommands for "*"
autocommand let g:fzf#vim#buffers[bufnr('')] = reltimefloat(reltime())

Executing WinEnter Autocommands for "*"
autocommand let s:tmux_is_last_pane = 0

Executing WinEnter Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing WinEnter Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing WinEnter Autocommands for "*"
autocommand call s:auto_restore_focus()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing BufEnter Autocommands for "*"
autocommand set fo-=c fo-=r fo-=o

Executing BufEnter Autocommands for "*"
autocommand call s:Autocmd('BufEnter', +expand('<abuf>'))

Executing BufEnter Autocommands for "*"
autocommand if conflict_marker#detect#markers() | call s:on_detected() | endif

Executing BufEnter Autocommands for "*"
autocommand call s:mru_append(expand('<amatch>'))

[window] /Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c
Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing InsertEnter Autocommands for "*"
autocommand call s:Autocmd('InsertEnter', +expand('<abuf>'))

Executing InsertEnter Autocommands for "*"
autocommand call lexima#insmode#clear_stack()

autocommand call s:setup_insmode()

Executing InsertEnter Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing InsertLeave Autocommands for "*"
autocommand call s:Autocmd('InsertLeave', +expand('<abuf>'))

Executing InsertLeave Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/coc)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
line 16: sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/coc/highlight.vim"
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/coc/highlight.vim
continuing in <SNR>61_request
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
Executing BufWinLeave Autocommands for "*"
autocommand call s:Autocmd('BufWinLeave', +expand('<abuf>'), bufwinid(+expand('<abuf>')))

Executing BufHidden Autocommands for "*"
autocommand call s:Autocmd('BufHidden', +expand('<abuf>'))

Executing BufEnter Autocommands for "*"
autocommand set fo-=c fo-=r fo-=o

Executing BufEnter Autocommands for "*"
autocommand call s:Autocmd('BufEnter', +expand('<abuf>'))

Executing BufEnter Autocommands for "*"
autocommand if conflict_marker#detect#markers() | call s:on_detected() | endif

Executing BufEnter Autocommands for "*"
autocommand call s:mru_append(expand('<amatch>'))

Executing BufWinEnter Autocommands for "*"
autocommand call <sid>on_window_changed('BufWinEnter')

Executing BufWinEnter Autocommands for "*"
autocommand call s:Autocmd('BufWinEnter', +expand('<abuf>'), win_getid())

Executing BufWinEnter Autocommands for "*"
autocommand let g:fzf#vim#buffers[bufnr('')] = reltimefloat(reltime())

Executing BufWinEnter Autocommands for "*"
autocommand call s:mru_append(expand('<amatch>'))


[global] /Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c
Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorHold Autocommands for "*"
autocommand silent call CocActionAsync('highlight')

autocommand silent call CocActionAsync('highlight')

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()


Executing WinLeave Autocommands for "*"
autocommand call s:Autocmd('WinLeave', win_getid())

Executing WinLeave Autocommands for "*"
autocommand call s:Remove_Matches()

Executing WinEnter Autocommands for "*"
autocommand call s:dopopd()

Executing WinEnter Autocommands for "*"
autocommand call <sid>on_window_changed('WinEnter')

Executing WinEnter Autocommands for "*"
autocommand call coc#float#nvim_win_enter(win_getid())

autocommand call s:Autocmd('WinEnter', win_getid())

Executing WinEnter Autocommands for "*"
autocommand let g:fzf#vim#buffers[bufnr('')] = reltimefloat(reltime())

Executing WinEnter Autocommands for "*"
autocommand let s:tmux_is_last_pane = 0

Executing WinEnter Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing WinEnter Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing WinEnter Autocommands for "*"
autocommand call s:auto_restore_focus()

Executing BufEnter Autocommands for "*"
autocommand set fo-=c fo-=r fo-=o

Executing BufEnter Autocommands for "*"
autocommand call s:Autocmd('BufEnter', +expand('<abuf>'))

Executing BufEnter Autocommands for "*"
autocommand if conflict_marker#detect#markers() | call s:on_detected() | endif

Executing BufEnter Autocommands for "*"
autocommand call s:mru_append(expand('<amatch>'))

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/coc)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/coc/highlight.vim"
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/coc/highlight.vim
Executing CursorHold Autocommands for "*"
autocommand silent call CocActionAsync('highlight')

autocommand silent call CocActionAsync('highlight')

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing VimResized Autocommands for "*"
autocommand call <sid>on_focus_gained()

Executing User Autocommands for "AirlineBeforeRefresh"
autocommand call s:sh_autocmd_handler()

Executing VimResized Autocommands for "*"
autocommand call s:Autocmd('VimResized', &columns, &lines)

Executing VimResized Autocommands for "*"
autocommand call <sid>on_focus_gained()

Executing User Autocommands for "AirlineBeforeRefresh"
autocommand call s:sh_autocmd_handler()

Executing VimResized Autocommands for "*"
autocommand call s:Autocmd('VimResized', &columns, &lines)

Executing VimResized Autocommands for "*"
autocommand call <sid>on_focus_gained()

Executing User Autocommands for "AirlineBeforeRefresh"
autocommand call s:sh_autocmd_handler()

Executing VimResized Autocommands for "*"
autocommand call s:Autocmd('VimResized', &columns, &lines)

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorHold Autocommands for "*"
autocommand silent call CocActionAsync('highlight')

autocommand silent call CocActionAsync('highlight')

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing WinLeave Autocommands for "*"
autocommand call s:Autocmd('WinLeave', win_getid())

Executing WinLeave Autocommands for "*"
autocommand call s:Remove_Matches()

Executing WinEnter Autocommands for "*"
autocommand call s:dopopd()

Executing WinEnter Autocommands for "*"
autocommand call <sid>on_window_changed('WinEnter')

Executing WinEnter Autocommands for "*"
autocommand call coc#float#nvim_win_enter(win_getid())

autocommand call s:Autocmd('WinEnter', win_getid())

Executing WinEnter Autocommands for "*"
autocommand let g:fzf#vim#buffers[bufnr('')] = reltimefloat(reltime())

Executing WinEnter Autocommands for "*"
autocommand let s:tmux_is_last_pane = 0

Executing WinEnter Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing WinEnter Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing WinEnter Autocommands for "*"
autocommand call s:auto_restore_focus()

Executing BufEnter Autocommands for "*"
autocommand set fo-=c fo-=r fo-=o

Executing BufEnter Autocommands for "*"
autocommand call s:Autocmd('BufEnter', +expand('<abuf>'))

Executing BufEnter Autocommands for "*"
autocommand if conflict_marker#detect#markers() | call s:on_detected() | endif

Executing BufEnter Autocommands for "*"
autocommand call s:mru_append(expand('<amatch>'))

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing WinScrolled Autocommands for "*"
autocommand call s:HandleWinScrolled(+expand('<amatch>'))

Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/coc)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/coc/highlight.vim"
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/coc/highlight.vim
Executing CursorHold Autocommands for "*"
autocommand silent call CocActionAsync('highlight')

autocommand silent call CocActionAsync('highlight')

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing WinLeave Autocommands for "*"
autocommand call s:Autocmd('WinLeave', win_getid())

Executing WinLeave Autocommands for "*"
autocommand call s:Remove_Matches()

Executing WinEnter Autocommands for "*"
autocommand call s:dopopd()

Executing WinEnter Autocommands for "*"
autocommand call <sid>on_window_changed('WinEnter')

Executing WinEnter Autocommands for "*"
autocommand call coc#float#nvim_win_enter(win_getid())

autocommand call s:Autocmd('WinEnter', win_getid())

Executing WinEnter Autocommands for "*"
autocommand let g:fzf#vim#buffers[bufnr('')] = reltimefloat(reltime())

Executing WinEnter Autocommands for "*"
autocommand let s:tmux_is_last_pane = 0

Executing WinEnter Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing WinEnter Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing WinEnter Autocommands for "*"
autocommand call s:auto_restore_focus()

Executing BufEnter Autocommands for "*"
autocommand set fo-=c fo-=r fo-=o

Executing BufEnter Autocommands for "*"
autocommand call s:Autocmd('BufEnter', +expand('<abuf>'))

Executing BufEnter Autocommands for "*"
autocommand if conflict_marker#detect#markers() | call s:on_detected() | endif

Executing BufEnter Autocommands for "*"
autocommand call s:mru_append(expand('<amatch>'))

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/coc)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/coc/highlight.vim"
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/coc/highlight.vim
Executing CursorHold Autocommands for "*"
autocommand silent call CocActionAsync('highlight')

autocommand silent call CocActionAsync('highlight')

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorHold Autocommands for "*"
autocommand silent call CocActionAsync('highlight')

autocommand silent call CocActionAsync('highlight')

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorHold Autocommands for "*"
autocommand silent call CocActionAsync('highlight')

autocommand silent call CocActionAsync('highlight')

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing command: "'/usr/bin/pbcopy'"


Executing TextYankPost Autocommands for "*"
autocommand call highlightedyank#debounce()

Executing TextYankPost Autocommands for "*"
autocommand call coc#rpc#notify('doAutocmd', [2, v:event, +expand('<abuf>'), win_getid()])

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing TextChanged Autocommands for "*"
autocommand call s:Autocmd('TextChanged', +expand('<abuf>'), getbufvar(+expand('<abuf>'), 'changedtick'))

Executing TextChanged Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

not found in runtime path: "parser/comment.*"
Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing WinScrolled Autocommands for "*"
autocommand call s:HandleWinScrolled(+expand('<amatch>'))

Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing WinScrolled Autocommands for "*"
autocommand call s:HandleWinScrolled(+expand('<amatch>'))

Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing WinScrolled Autocommands for "*"
autocommand call s:HandleWinScrolled(+expand('<amatch>'))

Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing WinScrolled Autocommands for "*"
autocommand call s:HandleWinScrolled(+expand('<amatch>'))

Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing WinScrolled Autocommands for "*"
autocommand call s:HandleWinScrolled(+expand('<amatch>'))

Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing WinScrolled Autocommands for "*"
autocommand call s:HandleWinScrolled(+expand('<amatch>'))

Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing WinScrolled Autocommands for "*"
autocommand call s:HandleWinScrolled(+expand('<amatch>'))

Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing WinScrolled Autocommands for "*"
autocommand call s:HandleWinScrolled(+expand('<amatch>'))

Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing WinScrolled Autocommands for "*"
autocommand call s:HandleWinScrolled(+expand('<amatch>'))

Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing WinScrolled Autocommands for "*"
autocommand call s:HandleWinScrolled(+expand('<amatch>'))

Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing WinScrolled Autocommands for "*"
autocommand call s:HandleWinScrolled(+expand('<amatch>'))

Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()


Executing BufWritePre Autocommands for "*"
autocommand call s:SyncAutocmd('BufWritePre', +expand('<abuf>'), bufname(+expand('<abuf>')), getbufvar(+expand('<abuf>'), 'changedtick'))

"index.cpp" 
"index.cpp" 49L, 937B written
Executing BufWritePost Autocommands for "*"
autocommand call s:Autocmd('BufWritePost', +expand('<abuf>'), getbufvar(+expand('<abuf>'), 'changedtick'))

Executing BufWritePost Autocommands for "*"
autocommand call s:reset_untracked_cache(0)

Executing BufWritePost Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing BufWritePost Autocommands for "*"
autocommand call s:mru_append(expand('<amatch>'))

autocommand call s:mrw_append(expand('<amatch>'))

"index.cpp" 49L, 937B written
Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorHold Autocommands for "*"
autocommand silent call CocActionAsync('highlight')

autocommand silent call CocActionAsync('highlight')

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorHold Autocommands for "*"
autocommand silent call CocActionAsync('highlight')

autocommand silent call CocActionAsync('highlight')

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing WinScrolled Autocommands for "*"
autocommand call s:HandleWinScrolled(+expand('<amatch>'))

Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorHold Autocommands for "*"
autocommand silent call CocActionAsync('highlight')

autocommand silent call CocActionAsync('highlight')

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()


Executing CmdUndefined Autocommands for "*"
autocommand call dein#autoload#_on_pre_cmd(expand('<afile>'))

E492: Not an editor command: %Y
Executing CursorHold Autocommands for "*"
autocommand silent call CocActionAsync('highlight')

autocommand silent call CocActionAsync('highlight')

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()


49 lines yanked
Executing TextYankPost Autocommands for "*"
autocommand call highlightedyank#debounce()

Executing TextYankPost Autocommands for "*"
autocommand call coc#rpc#notify('doAutocmd', [2, v:event, +expand('<abuf>'), win_getid()])

Executing command: "'/usr/bin/pbcopy'"


Executing CursorHold Autocommands for "*"
autocommand silent call CocActionAsync('highlight')

autocommand silent call CocActionAsync('highlight')

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing VimResized Autocommands for "*"
autocommand call <sid>on_focus_gained()

Executing User Autocommands for "AirlineBeforeRefresh"
autocommand call s:sh_autocmd_handler()

Executing VimResized Autocommands for "*"
autocommand call s:Autocmd('VimResized', &columns, &lines)

Executing VimResized Autocommands for "*"
autocommand call <sid>on_focus_gained()

Executing User Autocommands for "AirlineBeforeRefresh"
autocommand call s:sh_autocmd_handler()

Executing VimResized Autocommands for "*"
autocommand call s:Autocmd('VimResized', &columns, &lines)

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorHold Autocommands for "*"
autocommand silent call CocActionAsync('highlight')

autocommand silent call CocActionAsync('highlight')

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing WinScrolled Autocommands for "*"
autocommand call s:HandleWinScrolled(+expand('<amatch>'))

Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing WinScrolled Autocommands for "*"
autocommand call s:HandleWinScrolled(+expand('<amatch>'))

Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorHold Autocommands for "*"
autocommand silent call CocActionAsync('highlight')

autocommand silent call CocActionAsync('highlight')

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing WinLeave Autocommands for "*"
autocommand call s:Autocmd('WinLeave', win_getid())

Executing WinLeave Autocommands for "*"
autocommand call s:Remove_Matches()

Executing WinEnter Autocommands for "*"
autocommand call s:dopopd()

Executing WinEnter Autocommands for "*"
autocommand call <sid>on_window_changed('WinEnter')

Executing WinEnter Autocommands for "*"
autocommand call coc#float#nvim_win_enter(win_getid())

autocommand call s:Autocmd('WinEnter', win_getid())

Executing WinEnter Autocommands for "*"
autocommand let g:fzf#vim#buffers[bufnr('')] = reltimefloat(reltime())

Executing WinEnter Autocommands for "*"
autocommand let s:tmux_is_last_pane = 0

Executing WinEnter Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing WinEnter Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing WinEnter Autocommands for "*"
autocommand call s:auto_restore_focus()

Executing BufEnter Autocommands for "*"
autocommand set fo-=c fo-=r fo-=o

Executing BufEnter Autocommands for "*"
autocommand call s:Autocmd('BufEnter', +expand('<abuf>'))

Executing BufEnter Autocommands for "*"
autocommand if conflict_marker#detect#markers() | call s:on_detected() | endif

Executing BufEnter Autocommands for "*"
autocommand call s:mru_append(expand('<amatch>'))

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing WinScrolled Autocommands for "*"
autocommand call s:HandleWinScrolled(+expand('<amatch>'))

Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/coc)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/coc/highlight.vim"
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/coc/highlight.vim
Executing CursorHold Autocommands for "*"
autocommand silent call CocActionAsync('highlight')

autocommand silent call CocActionAsync('highlight')

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing WinLeave Autocommands for "*"
autocommand call s:Autocmd('WinLeave', win_getid())

Executing WinLeave Autocommands for "*"
autocommand call s:Remove_Matches()

Executing WinEnter Autocommands for "*"
autocommand call s:dopopd()

Executing WinEnter Autocommands for "*"
autocommand call <sid>on_window_changed('WinEnter')

Executing WinEnter Autocommands for "*"
autocommand call coc#float#nvim_win_enter(win_getid())

autocommand call s:Autocmd('WinEnter', win_getid())

Executing WinEnter Autocommands for "*"
autocommand let g:fzf#vim#buffers[bufnr('')] = reltimefloat(reltime())

Executing WinEnter Autocommands for "*"
autocommand let s:tmux_is_last_pane = 0

Executing WinEnter Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing WinEnter Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing WinEnter Autocommands for "*"
autocommand call s:auto_restore_focus()

Executing BufEnter Autocommands for "*"
autocommand set fo-=c fo-=r fo-=o

Executing BufEnter Autocommands for "*"
autocommand call s:Autocmd('BufEnter', +expand('<abuf>'))

Executing BufEnter Autocommands for "*"
autocommand if conflict_marker#detect#markers() | call s:on_detected() | endif

Executing BufEnter Autocommands for "*"
autocommand call s:mru_append(expand('<amatch>'))

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/coc)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/coc/highlight.vim"
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/coc/highlight.vim
Executing WinLeave Autocommands for "*"
autocommand call s:Autocmd('WinLeave', win_getid())

Executing WinLeave Autocommands for "*"
autocommand call s:Remove_Matches()

Executing WinEnter Autocommands for "*"
autocommand call s:dopopd()

Executing WinEnter Autocommands for "*"
autocommand call <sid>on_window_changed('WinEnter')

Executing WinEnter Autocommands for "*"
autocommand call coc#float#nvim_win_enter(win_getid())

autocommand call s:Autocmd('WinEnter', win_getid())

Executing WinEnter Autocommands for "*"
autocommand let g:fzf#vim#buffers[bufnr('')] = reltimefloat(reltime())

Executing WinEnter Autocommands for "*"
autocommand let s:tmux_is_last_pane = 0

Executing WinEnter Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing WinEnter Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing WinEnter Autocommands for "*"
autocommand call s:auto_restore_focus()

Executing BufEnter Autocommands for "*"
autocommand set fo-=c fo-=r fo-=o

Executing BufEnter Autocommands for "*"
autocommand call s:Autocmd('BufEnter', +expand('<abuf>'))

Executing BufEnter Autocommands for "*"
autocommand if conflict_marker#detect#markers() | call s:on_detected() | endif

Executing BufEnter Autocommands for "*"
autocommand call s:mru_append(expand('<amatch>'))

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/coc)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/coc/highlight.vim"
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/coc/highlight.vim
Executing CursorHold Autocommands for "*"
autocommand silent call CocActionAsync('highlight')

autocommand silent call CocActionAsync('highlight')

Executing CursorHold Autocommands for "*"
autocommand call coc#float#check_related()

autocommand call s:Autocmd('CursorHold', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorHold Autocommands for "*"
autocommand silent! call s:CursorHoldUpdate()

Executing CursorHold Autocommands for "*"
autocommand call <sid>ws_refresh()

Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()


Executing QuitPre Autocommands for "*"
autocommand call s:smart_quit_pre()

Executing WinLeave Autocommands for "*"
autocommand call s:Autocmd('WinLeave', win_getid())

Executing WinLeave Autocommands for "*"
autocommand call s:Remove_Matches()

Executing WinClosed Autocommands for "*"
autocommand call s:HandleWinClosed(+expand('<amatch>'))

Executing BufWinLeave Autocommands for "*"
autocommand call s:Autocmd('BufWinLeave', +expand('<abuf>'), bufwinid(+expand('<abuf>')))

Executing BufHidden Autocommands for "*"
autocommand call s:Autocmd('BufHidden', +expand('<abuf>'))

Executing WinEnter Autocommands for "*"
autocommand call s:dopopd()

Executing WinEnter Autocommands for "*"
autocommand call <sid>on_window_changed('WinEnter')

Executing WinEnter Autocommands for "*"
autocommand call coc#float#nvim_win_enter(win_getid())

autocommand call s:Autocmd('WinEnter', win_getid())

Executing WinEnter Autocommands for "*"
autocommand let g:fzf#vim#buffers[bufnr('')] = reltimefloat(reltime())

Executing WinEnter Autocommands for "*"
autocommand let s:tmux_is_last_pane = 0

Executing WinEnter Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing WinEnter Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing WinEnter Autocommands for "*"
autocommand call s:auto_restore_focus()

Executing CursorMoved Autocommands for "*"
autocommand call <sid>on_cursor_moved()

Executing CursorMoved Autocommands for "*"
autocommand call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing CursorMoved Autocommands for "*"
autocommand if 0 < s:winid | call popup_close(s:winid) | let s:winid = 0 | endif

Executing BufEnter Autocommands for "*"
autocommand set fo-=c fo-=r fo-=o

Executing BufEnter Autocommands for "*"
autocommand call s:Autocmd('BufEnter', +expand('<abuf>'))

Executing BufEnter Autocommands for "*"
autocommand if conflict_marker#detect#markers() | call s:on_detected() | endif

Executing BufEnter Autocommands for "*"
autocommand call s:mru_append(expand('<amatch>'))

Executing WinScrolled Autocommands for "*"
autocommand call s:HandleWinScrolled(+expand('<amatch>'))

Executing WinScrolled Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing FuncUndefined Autocommands for "*"
autocommand if stridx(expand('<afile>'), 'remote#') != 0 |   call dein#autoload#_on_func(expand('<afile>')) | endif

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
chdir(/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/coc)
chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
sourcing "/Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/coc/highlight.vim"
finished sourcing /Users/tomoya_tanaka/.cache/dein/.cache/init.vim/.dein/autoload/coc/highlight.vim
Executing ModeChanged Autocommands for "*"
autocommand :call airline#update_tabline()


Executing QuitPre Autocommands for "*"
autocommand call s:smart_quit_pre()

Executing BufWinLeave Autocommands for "*"
autocommand call s:Autocmd('BufWinLeave', +expand('<abuf>'), bufwinid(+expand('<abuf>')))

Executing BufUnload Autocommands for "*"
autocommand call <sid>on_window_changed('BufUnload')

Executing BufUnload Autocommands for "*"
autocommand call s:Autocmd('BufUnload', +expand('<abuf>'))

Executing BufUnload Autocommands for "*"
autocommand call <sid>on_window_changed('BufUnload')

Executing BufUnload Autocommands for "*"
autocommand call s:Autocmd('BufUnload', +expand('<abuf>'))

Executing BufUnload Autocommands for "*"
autocommand call <sid>on_window_changed('BufUnload')

Executing BufUnload Autocommands for "*"
autocommand call s:Autocmd('BufUnload', +expand('<abuf>'))

Executing BufUnload Autocommands for "*"
autocommand call <sid>on_window_changed('BufUnload')

Executing BufUnload Autocommands for "*"
autocommand call s:Autocmd('BufUnload', +expand('<abuf>'))

Executing BufUnload Autocommands for "*"
autocommand call <sid>on_window_changed('BufUnload')

Executing BufUnload Autocommands for "*"
autocommand call s:Autocmd('BufUnload', +expand('<abuf>'))

Executing BufUnload Autocommands for "*"
autocommand call <sid>on_window_changed('BufUnload')

Executing BufUnload Autocommands for "*"
autocommand call s:Autocmd('BufUnload', +expand('<abuf>'))

Executing BufUnload Autocommands for "*"
autocommand call <sid>on_window_changed('BufUnload')

Executing BufUnload Autocommands for "*"
autocommand call s:Autocmd('BufUnload', +expand('<abuf>'))

Executing BufUnload Autocommands for "*"
autocommand call <sid>on_window_changed('BufUnload')

Executing BufUnload Autocommands for "*"
autocommand call s:Autocmd('BufUnload', +expand('<abuf>'))

Executing BufUnload Autocommands for "*"
autocommand call <sid>on_window_changed('BufUnload')

Executing BufUnload Autocommands for "*"
autocommand call s:Autocmd('BufUnload', +expand('<abuf>'))

Executing BufUnload Autocommands for "*"
autocommand call <sid>on_window_changed('BufUnload')

Executing BufUnload Autocommands for "*"
autocommand call s:Autocmd('BufUnload', +expand('<abuf>'))

Executing VimLeavePre Autocommands for "*"
autocommand let g:coc_vim_leaving = 1

autocommand call s:Autocmd('VimLeavePre')

Executing VimLeavePre Autocommands for "*"
autocommand <Lua 34: /opt/homebrew/Cellar/neovim/0.8.0/share/nvim/runtime/lua/vim/lsp.lua:1813>

Executing VimLeavePre Autocommands for "*"
autocommand call coc#rpc#request('doAutocmd', [1])

chdir(/Users/tomoya_tanaka/projects/github.com/txxxxc/competitive-programming/ABC_207/c)
Writing ShaDa file "/Users/tomoya_tanaka/.local/state/nvim/shada/main.shada"
Executing VimLeave Autocommands for "*"
autocommand let s:vim_exiting = 1

Executing User Autocommands for "DenopsStopped"
autocommand call denops#util#debug(expand('<amatch>:t'))

Executing User Autocommands for "DenopsStopped"
autocommand :

Executing User Autocommands for "DenopsStopped"
autocommand let s:loaded_plugins = {}
